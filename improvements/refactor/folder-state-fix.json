{
  "title": "Folder State Management Fixes",
  "date": "2025-10-06",
  "priority": "HIGH",
  "status": "planned",
  "summary": "Fix 7 critical issues with folder switching logic affecting UX, data consistency, and state synchronization",

  "issues": [
    {
      "id": 1,
      "severity": "high",
      "title": "No Loading Indicator When Switching Folders",
      "location": "app/(tabs)/notes.tsx:17, 27-29, 31-43",
      "problem": "Loading state is only set to true on mount. When switching folders via useEffect, loadNotes() runs without resetting loading state first. User sees no visual feedback during folder switch.",
      "impact": "Flash of old notes before new notes load. Poor UX during folder transitions.",
      "currentBehavior": "Switch Folder A → B shows A's notes briefly, then B's notes appear",
      "expectedBehavior": "Loading spinner during folder switch, smooth transition"
    },
    {
      "id": 2,
      "severity": "critical",
      "title": "Race Condition with Rapid Folder Switching",
      "location": "app/(tabs)/notes.tsx:27-43",
      "problem": "No request cancellation or tracking. If user rapidly switches A → B → C, three async requests fire. Responses can arrive out of order (e.g., B arrives after C). Wrong notes displayed for selected folder.",
      "impact": "CRITICAL: User might see Folder B's notes while Folder C is selected in dropdown. Data inconsistency.",
      "currentBehavior": "Fast clicks on folders can show wrong folder's content",
      "expectedBehavior": "Only latest folder's notes display, previous requests cancelled"
    },
    {
      "id": 3,
      "severity": "medium",
      "title": "Error State Not Cleared on Folder Switch",
      "location": "app/(tabs)/notes.tsx:20, 33",
      "problem": "If loadNotes fails for Folder A (error shown), switching to Folder B briefly displays old error until new loadNotes clears it at line 33.",
      "impact": "Confusing error messages from previous folder context",
      "currentBehavior": "Error 'Failed to load notes' lingers when switching folders",
      "expectedBehavior": "Error cleared immediately on folder selection change"
    },
    {
      "id": 4,
      "severity": "critical",
      "title": "Folder List Doesn't Update After CRUD Operations",
      "location": "common-header.tsx:28-44, notes.tsx:115-116",
      "problem": "Header loads folders only once in useEffect (line 28-32). After create/rename/delete folder, loadNotes() is called (line 116) BUT folder dropdown in header still shows stale data.",
      "impact": "CRITICAL: Created folders don't appear in dropdown. Renamed folders show old names. Deleted folders still selectable. Requires full page refresh.",
      "currentBehavior": "Create new folder → invisible until refresh. Rename → old name persists. Delete → ghost folder remains.",
      "expectedBehavior": "Folder dropdown updates immediately after any CRUD operation"
    },
    {
      "id": 5,
      "severity": "medium",
      "title": "Deleted Folder Remains in Dropdown",
      "location": "notes.tsx:99-102, common-header.tsx:149-167",
      "problem": "If viewing Folder A and deleting Folder B, Folder B still appears in header dropdown. Clicking it will fail or show empty results.",
      "impact": "User can select deleted folders leading to errors or confusion",
      "currentBehavior": "Deleted folders remain clickable in dropdown",
      "expectedBehavior": "Deleted folders removed from dropdown immediately"
    },
    {
      "id": 6,
      "severity": "medium",
      "title": "Refreshing State Inconsistency",
      "location": "app/(tabs)/notes.tsx:18, 41, 45-48",
      "problem": "If refreshing Folder A mid-refresh and switch to Folder B, refreshing state might show spinner for wrong folder.",
      "impact": "UI shows loading spinner on wrong folder",
      "currentBehavior": "Pull-to-refresh spinner persists during folder switch",
      "expectedBehavior": "Refreshing state resets when folder changes"
    },
    {
      "id": 7,
      "severity": "low",
      "title": "No Visual Feedback for Loading Folders",
      "location": "common-header.tsx:26, 34-44",
      "problem": "loadingFolders state exists but isn't used. When opening folder dropdown, no indication if folders are loading.",
      "impact": "User doesn't know if folder list is complete or still fetching",
      "currentBehavior": "Dropdown opens with no indication of loading state",
      "expectedBehavior": "Loading indicator in dropdown while folders fetch"
    }
  ],

  "implementation": {
    "phase1_critical": {
      "title": "Fix Critical Data Consistency Issues",
      "priority": 1,
      "issues": [2, 4],
      "tasks": [
        {
          "id": "1.1",
          "file": "app/(tabs)/notes.tsx",
          "title": "Implement Request Cancellation Pattern",
          "changes": [
            "Add cleanup function to useEffect that tracks if component unmounted or folder changed",
            "Only update state if request is still valid (not cancelled)",
            "Prevents race condition where old requests overwrite newer ones"
          ],
          "code": "useEffect(() => {\n  let cancelled = false;\n  setLoading(true);\n  setError(null);\n  setRefreshing(false);\n  \n  const loadData = async () => {\n    try {\n      const data = await notesService.getNotesByFolder(selectedFolderId);\n      if (!cancelled) {\n        setNotes(data);\n      }\n    } catch (err) {\n      if (!cancelled) {\n        console.error('Failed to load notes:', err);\n        setError('Failed to load notes');\n      }\n    } finally {\n      if (!cancelled) {\n        setLoading(false);\n        setRefreshing(false);\n      }\n    }\n  };\n  \n  loadData();\n  return () => { cancelled = true; };\n}, [selectedFolderId]);"
        },
        {
          "id": "1.2",
          "file": "app/(tabs)/notes.tsx",
          "title": "Add Folder Refresh Trigger State",
          "changes": [
            "Add folderRefreshTrigger state to notes.tsx",
            "Increment trigger after folder CRUD operations",
            "Pass trigger to SharedPageLayout → CommonHeader"
          ],
          "code": "// In notes.tsx\nconst [folderRefreshTrigger, setFolderRefreshTrigger] = useState(0);\n\nconst handleFolderModalSuccess = () => {\n  setShowFolderModal(false);\n  setEditingFolder(null);\n  setFolderRefreshTrigger(prev => prev + 1);\n  // Note: loadNotes() not needed - useEffect will trigger on folder list changes\n};\n\nconst confirmDeleteFolder = async () => {\n  if (!deleteFolder) return;\n  try {\n    await foldersService.deleteFolder(deleteFolder);\n    if (selectedFolderId === deleteFolder) {\n      setSelectedFolderId(null);\n    }\n    setDeleteFolder(null);\n    setFolderRefreshTrigger(prev => prev + 1);\n    // Note: loadNotes() not needed - useEffect will trigger on selectedFolderId change\n  } catch (err) {\n    console.error('Failed to delete folder:', err);\n    Alert.alert('Error', 'Failed to delete folder');\n  }\n};"
        },
        {
          "id": "1.3",
          "file": "components/shared-page-layout.tsx",
          "title": "Add Folder Refresh Trigger Prop",
          "changes": [
            "Add folderRefreshTrigger prop to interface",
            "Pass through to CommonHeader"
          ],
          "code": "interface SharedPageLayoutProps {\n  children: React.ReactNode;\n  onNewNote?: () => void;\n  onRefresh?: () => void;\n  refreshing?: boolean;\n  scrollable?: boolean;\n  onFolderSelect?: (folderId: string | null) => void;\n  onNewFolder?: () => void;\n  onRenameFolder?: (folder: Folder) => void;\n  onDeleteFolder?: (folderId: string) => void;\n  selectedFolderId?: string | null;\n  folderRefreshTrigger?: number; // ADD THIS\n}\n\n// In component:\n<CommonHeader\n  onNewNote={onNewNote}\n  onRefresh={onRefresh}\n  refreshing={refreshing}\n  onFolderSelect={onFolderSelect}\n  onNewFolder={onNewFolder}\n  onRenameFolder={onRenameFolder}\n  onDeleteFolder={onDeleteFolder}\n  selectedFolderId={selectedFolderId}\n  folderRefreshTrigger={folderRefreshTrigger} // ADD THIS\n/>"
        },
        {
          "id": "1.4",
          "file": "components/common-header.tsx",
          "title": "Add Folder Refresh Trigger to useEffect",
          "changes": [
            "Add folderRefreshTrigger to CommonHeaderProps",
            "Add to useEffect dependency array",
            "Folders reload after any CRUD operation"
          ],
          "code": "interface CommonHeaderProps {\n  onNewNote?: () => void;\n  onRefresh?: () => void;\n  refreshing?: boolean;\n  onFolderSelect?: (folderId: string | null) => void;\n  onNewFolder?: () => void;\n  onRenameFolder?: (folder: Folder) => void;\n  onDeleteFolder?: (folderId: string) => void;\n  selectedFolderId?: string | null;\n  folderRefreshTrigger?: number; // ADD THIS\n}\n\nexport function CommonHeader({ onNewNote, onRefresh, refreshing, onFolderSelect, onNewFolder, onRenameFolder, onDeleteFolder, selectedFolderId, folderRefreshTrigger }: CommonHeaderProps) {\n  // ...\n  \n  useEffect(() => {\n    if (onFolderSelect) {\n      loadFolders();\n    }\n  }, [onFolderSelect, folderRefreshTrigger]); // ADD folderRefreshTrigger\n}"
        }
      ]
    },

    "phase2_polish": {
      "title": "Add Loading Indicators (OPTIONAL)",
      "priority": 2,
      "issues": [7],
      "note": "This phase is optional - only implement if time permits. Not blocking any critical workflows.",
      "tasks": [
        {
          "id": "3.1",
          "file": "components/common-header.tsx",
          "title": "Show Loading State in Folder Dropdown",
          "changes": [
            "Use existing loadingFolders state",
            "Display ActivityIndicator in MenuOptions when loading",
            "Improve perceived performance"
          ],
          "code": "{loadingFolders ? (\n  <MenuOption customStyles={{ optionWrapper: styles.menuItem }}>\n    <ActivityIndicator size=\"small\" color={colors.tint} />\n    <Text style={[styles.menuText, { color: colors.textSecondary }]}>Loading folders...</Text>\n  </MenuOption>\n) : (\n  <>\n    <MenuOption onSelect={() => handleFolderSelect(null)} ...>\n      ...\n    </MenuOption>\n    {/* rest of menu items */}\n  </>\n)}"
        }
      ]
    }
  },

  "testing": {
    "scenarios": [
      {
        "id": "T1",
        "scenario": "Rapid folder switching",
        "steps": [
          "Create folders A, B, C with different notes",
          "Quickly click A → B → C in dropdown",
          "Verify C's notes display (not A or B)"
        ],
        "expectedResult": "Only Folder C's notes shown, no flash of A or B",
        "relatedIssue": 2
      },
      {
        "id": "T2",
        "scenario": "Create new folder",
        "steps": [
          "Open folder dropdown",
          "Click 'New Folder'",
          "Enter name 'Test Folder', save",
          "Open dropdown again"
        ],
        "expectedResult": "'Test Folder' appears in dropdown immediately",
        "relatedIssue": 4
      },
      {
        "id": "T3",
        "scenario": "Rename folder",
        "steps": [
          "Open dropdown, click (...) on existing folder",
          "Rename to 'Updated Name', save",
          "Open dropdown again"
        ],
        "expectedResult": "'Updated Name' appears in dropdown",
        "relatedIssue": 4
      },
      {
        "id": "T4",
        "scenario": "Delete folder while viewing it",
        "steps": [
          "Select Folder A in dropdown",
          "Open (...) menu, delete Folder A",
          "Check dropdown and note list"
        ],
        "expectedResult": "Switched to 'All Notes', Folder A not in dropdown",
        "relatedIssue": 5
      },
      {
        "id": "T5",
        "scenario": "Delete folder while viewing different folder",
        "steps": [
          "Select Folder A",
          "Open dropdown, delete Folder B via (...)",
          "Check dropdown"
        ],
        "expectedResult": "Folder B removed from dropdown, still viewing Folder A",
        "relatedIssue": 5
      },
      {
        "id": "T6",
        "scenario": "Error state during folder switch",
        "steps": [
          "Simulate network error for Folder A (mock service)",
          "Switch to Folder B (working)",
          "Verify error message"
        ],
        "expectedResult": "Error cleared immediately, Folder B loads successfully",
        "relatedIssue": 3
      },
      {
        "id": "T7",
        "scenario": "Pull-to-refresh during folder switch",
        "steps": [
          "Select Folder A",
          "Pull to refresh (start loading)",
          "Immediately switch to Folder B"
        ],
        "expectedResult": "Spinner stops, Folder B loads with loading indicator",
        "relatedIssue": 6
      },
      {
        "id": "T8",
        "scenario": "Loading indicator visibility",
        "steps": [
          "Clear folder cache/slow network",
          "Open folder dropdown",
          "Observe loading state"
        ],
        "expectedResult": "Loading spinner/text visible while folders fetch",
        "relatedIssue": 7
      }
    ]
  },

  "files_modified": [
    "app/(tabs)/notes.tsx",
    "components/common-header.tsx",
    "components/shared-page-layout.tsx"
  ],

  "estimatedEffort": "2-3 hours",

  "successCriteria": [
    "All 8 test scenarios pass (T1-T8)",
    "No race conditions with rapid folder switching (Issue #2 fixed)",
    "Folder dropdown updates immediately after CRUD operations (Issues #4, #5 fixed)",
    "Loading states clear and accurate during folder transitions (Issue #1 fixed)",
    "Error states don't persist across folder changes (Issue #3 fixed)",
    "Refreshing state resets correctly when switching folders (Issue #6 fixed)",
    "No console errors during folder operations"
  ],

  "implementationOrder": [
    "1. Implement Phase 1 (all 4 tasks) - fixes Issues #1, #2, #3, #4, #5, #6",
    "2. Test all 8 scenarios (T1-T8) to verify fixes",
    "3. Ship to production",
    "4. Optionally implement Phase 2 (loading indicators) - fixes Issue #7"
  ],

  "notes": [
    "Phase 1 (critical) fixes 6 of 7 issues and should be implemented immediately - blocks user workflows and causes data inconsistency",
    "Phase 2 (optional polish) can be deferred - only adds loading indicator in folder dropdown",
    "Original Phase 2 (state management) was removed as redundant - all functionality covered by Phase 1",
    "handleRefresh can optionally be simplified to: setRefreshing(true); setSelectedFolderId(prev => prev);",
    "Consider adding error boundaries for folder operations",
    "May want to add optimistic updates for folder CRUD (show change immediately, rollback on error)"
  ],

  "relatedDocs": [
    "improvements/refactor/ - Other refactoring plans",
    "improvements/coming-soon/ - Future feature enhancements",
    "CHANGELOG.md - Document fixes when complete"
  ],
  "agentFeedback": [
    "Extract a shared loadNotes helper (e.g., useCallback) so every caller uses the same cancellation-aware logic introduced in task 1.1.",
    "Avoid calling loadNotes() right after setSelectedFolderId(null); rely on the folder-change effect or pass an explicit folder id to prevent stale closures.",
    "Ensure all SharedPageLayout consumers receive a folderRefreshTrigger (or default it) so existing screens do not break once the prop is introduced.",
    "Trim CommonHeader's useEffect dependency list—tying it to folderRefreshTrigger alone prevents redundant reloads when callbacks re-render.",
    "Either expand task 2.1 with new behavior or remove it to avoid duplicating the state-reset work already covered in task 1.1.",
    "Confirm MenuOption is appropriate for the loading state in task 3.1; if it remains interactive, swap to a non-selectable wrapper to keep the dropdown accessible."
  ],

  "agent2Feedback": [
    "Phase 1 implementation is architecturally sound and fixes 6 of 7 issues (Issues #1, #2, #3, #4, #5, #6) - implement as-is with high confidence.",
    "Delete Phase 2 entirely: Task 2.1 is redundant (already covered by Task 1.1) and Task 2.2 has architectural issues (can't extract loadNotes outside useEffect due to hook usage).",
    "In Task 1.1, add 'setRefreshing(false)' at the top of useEffect (line 3) alongside setLoading(true) and setError(null) to fully fix Issue #6.",
    "Task 1.2 code has bug: calling loadNotes() after setFolderRefreshTrigger is redundant since loadNotes() doesn't trigger folder list reload - remove all loadNotes() calls in handleFolderModalSuccess and confirmDeleteFolder.",
    "Phase 3 (Task 3.1) is optional polish - implement only if time permits, not blocking any critical workflows.",
    "Recommended implementation order: Phase 1 → Test all 8 scenarios → Ship → Phase 3 (optional, later).",
    "All 7 identified issues are confirmed accurate after codebase review - race condition (Issue #2) and stale folder list (Issue #4) are highest priority data consistency risks.",
    "Consider removing handleRefresh function entirely after Phase 1 - can trigger refresh by calling setSelectedFolderId(prev => prev) to re-run useEffect with cancellation pattern."
  ]
}
