{
  "title": "Comprehensive Codebase Refactor Plan",
  "date": "2025-10-06",
  "version": "1.0.0",
  "summary": {
    "total_issues": 8,
    "estimated_line_reduction": "500+",
    "hooks_to_create": 6,
    "files_to_refactor": 12,
    "priority_levels": {
      "critical": 1,
      "high": 2,
      "medium": 2,
      "low": 3
    }
  },
  "issues": [
    {
      "id": 1,
      "title": "Folder Management Duplication",
      "priority": "HIGH",
      "severity": "Code Duplication",
      "location": {
        "files": [
          "app/(tabs)/notes.tsx",
          "app/(tabs)/folders.tsx",
          "app/(tabs)/index.tsx"
        ],
        "lines": "120+ lines duplicated 3 times"
      },
      "description": "Same folder state management and handlers duplicated across 3 files",
      "duplicate_code": [
        "handleNewFolder",
        "handleRenameFolder",
        "handleDeleteFolder",
        "handleFolderModalSuccess",
        "handleFolderModalClose",
        "confirmDeleteFolder"
      ],
      "duplicate_state": [
        "showFolderModal",
        "editingFolder",
        "deleteFolder",
        "folderRefreshTrigger"
      ],
      "solution": {
        "approach": "Extract to custom hook",
        "file_to_create": "hooks/use-folder-manager.ts",
        "implementation": {
          "hook_interface": {
            "state": {
              "showFolderModal": "boolean",
              "editingFolder": "Folder | null",
              "deleteFolder": "string | null",
              "folderRefreshTrigger": "number"
            },
            "handlers": {
              "handleNewFolder": "() => void",
              "handleRenameFolder": "(folder: Folder) => void",
              "handleDeleteFolder": "(folderId: string) => void",
              "handleFolderModalSuccess": "() => void",
              "handleFolderModalClose": "() => void",
              "confirmDeleteFolder": "() => Promise<void>"
            },
            "modals": {
              "FolderModalJSX": "JSX.Element",
              "DeleteConfirmationModalJSX": "JSX.Element"
            }
          }
        },
        "line_reduction": "360 lines → 120 lines (67% reduction)"
      }
    },
    {
      "id": 2,
      "title": "Note Editor Duplication",
      "priority": "HIGH",
      "severity": "Code Duplication",
      "location": {
        "files": [
          "app/note-editor/new.tsx",
          "app/note-editor/[id].tsx"
        ],
        "duplicate_percentage": "80%+"
      },
      "description": "Massive code duplication between new note and edit note screens",
      "duplicate_sections": [
        {
          "name": "Auto-save logic",
          "lines_new": "31-67",
          "lines_edit": "58-92"
        },
        {
          "name": "Export handler",
          "lines_new": "69-95",
          "lines_edit": "94-120"
        },
        {
          "name": "Header configuration",
          "lines_new": "99-160",
          "lines_edit": "180-241"
        },
        {
          "name": "Toolbar state",
          "description": "showToolbar, mode, canUndo, canRedo"
        }
      ],
      "solution": {
        "approach": "Create shared base component and hook",
        "files_to_create": [
          "components/note-editor/base-editor.tsx",
          "hooks/use-note-editor.ts"
        ],
        "implementation": {
          "base_editor_props": {
            "mode": "'new' | 'edit'",
            "noteId": "string | null",
            "initialContent": "string",
            "folderId": "string | null | undefined"
          },
          "hook_responsibilities": [
            "Auto-save with debounce",
            "HTML export logic",
            "Undo/redo state",
            "Toolbar visibility"
          ]
        },
        "line_reduction": "240 lines → 80 lines (67% reduction)"
      }
    },
    {
      "id": 3,
      "title": "Card Expansion Logic Duplication",
      "priority": "MEDIUM",
      "severity": "Code Duplication",
      "location": {
        "files": [
          "app/(tabs)/info.tsx",
          "app/(tabs)/settings.tsx"
        ],
        "lines": "22-31 in both files"
      },
      "description": "Same handleCardToggle function duplicated with 200ms delay logic",
      "duplicate_code": "const handleCardToggle = (cardId: string) => {\n  if (expandedCard === cardId) {\n    setExpandedCard(null);\n  } else if (expandedCard !== null) {\n    setExpandedCard(null);\n    setTimeout(() => setExpandedCard(cardId), 200);\n  } else {\n    setExpandedCard(cardId);\n  }\n};",
      "solution": {
        "approach": "Extract to custom hook",
        "file_to_create": "hooks/use-card-expansion.ts",
        "implementation": {
          "hook_interface": {
            "state": "expandedCard: string | null",
            "handler": "toggleCard: (cardId: string) => void"
          },
          "configuration": {
            "animation_delay": 200,
            "single_expansion": true
          }
        },
        "line_reduction": "30 lines → 5 lines per screen"
      }
    },
    {
      "id": 4,
      "title": "Hardcoded Error Styles",
      "priority": "MEDIUM",
      "severity": "Maintenance & Consistency",
      "location": {
        "files": [
          "app/(tabs)/notes.tsx",
          "app/(tabs)/folders.tsx"
        ],
        "lines": [
          "notes.tsx: 201-203",
          "folders.tsx: 220-222"
        ]
      },
      "description": "Error colors hardcoded instead of using theme system",
      "problematic_code": {
        "backgroundColor": "#fee2e2",
        "borderColor": "#fecaca",
        "textColor": "#dc2626"
      },
      "solution": {
        "approach": "Add error colors to theme or create error constants",
        "options": [
          {
            "option": "1",
            "description": "Add to theme system",
            "files": [
              "constants/theme.ts - add errorBackground, errorBorder, errorText"
            ]
          },
          {
            "option": "2",
            "description": "Create error constants file",
            "file": "constants/error-styles.ts"
          },
          {
            "option": "3",
            "description": "Create reusable component",
            "file": "components/common/error-message.tsx"
          }
        ],
        "recommended": "Option 3 - Reusable component",
        "benefits": [
          "Consistent error UX",
          "Theme-aware errors",
          "Single source of truth"
        ]
      }
    },
    {
      "id": 5,
      "title": "Prop Threading Issues",
      "priority": "LOW",
      "severity": "Architecture",
      "location": {
        "component_chain": [
          "notes.tsx",
          "SharedPageLayout",
          "CommonHeader"
        ]
      },
      "description": "8+ folder-related props threaded through 3 component levels",
      "props_threaded": [
        "onFolderSelect",
        "onNewFolder",
        "onRenameFolder",
        "onDeleteFolder",
        "selectedFolderId",
        "folderRefreshTrigger"
      ],
      "solution": {
        "approach": "Create context or event emitter",
        "options": [
          {
            "option": "1",
            "description": "Folder Manager Context",
            "file": "contexts/folder-manager-context.tsx",
            "benefits": [
              "Eliminates prop drilling",
              "Cleaner component APIs",
              "Centralized folder state"
            ]
          },
          {
            "option": "2",
            "description": "Event emitter pattern",
            "benefits": [
              "Decoupled components",
              "No provider wrapper needed"
            ]
          }
        ],
        "recommended": "Option 1 - Context API",
        "note": "Can be combined with Issue #1 solution (use-folder-manager hook)"
      }
    },
    {
      "id": 6,
      "title": "Platform-Specific Code Bug",
      "priority": "LOW",
      "severity": "Runtime Error",
      "location": {
        "file": "contexts/auth-context.tsx",
        "line": 69
      },
      "description": "Web-only code without platform check - crashes on mobile",
      "problematic_code": "redirectTo: `${window.location.origin}/auth`",
      "crash_scenario": "Mobile users calling resetPassword will crash (window undefined)",
      "solution": {
        "approach": "Add platform check",
        "implementation": {
          "imports_needed": [
            "import { Platform } from 'react-native';",
            "import * as Linking from 'expo-linking';"
          ],
          "code_before": "redirectTo: `${window.location.origin}/auth`,",
          "code_after": "const getRedirectUrl = () => {\n  if (Platform.OS === 'web') {\n    return `${window.location.origin}/auth`;\n  }\n  return Linking.createURL('/auth');\n};\n\n// Use in resetPassword\nredirectTo: getRedirectUrl(),"
        },
        "benefits": [
          "Prevents mobile crashes",
          "Cross-platform compatibility"
        ]
      }
    },
    {
      "id": 7,
      "title": "Missing Database Migration",
      "priority": "CRITICAL",
      "severity": "Data Schema",
      "location": {
        "database": "Supabase PostgreSQL",
        "table": "folders",
        "missing_column": "is_favorite"
      },
      "description": "is_favorite column doesn't exist - Dashboard uses graceful degradation",
      "current_state": {
        "workaround": "Try/catch in index.tsx lines 62-68",
        "behavior": "Dashboard loads without favorite folders section"
      },
      "solution": {
        "approach": "Run SQL migration",
        "file_to_create": "supabase/migrations/YYYYMMDDHHMMSS_add_folders_is_favorite.sql",
        "sql": "-- Add is_favorite column to folders table\nALTER TABLE folders \nADD COLUMN is_favorite BOOLEAN NOT NULL DEFAULT false;\n\n-- Add index for favorite queries\nCREATE INDEX idx_folders_is_favorite ON folders(is_favorite);\n\n-- Update existing data (optional)\n-- UPDATE folders SET is_favorite = false WHERE is_favorite IS NULL;",
        "steps": [
          "1. Backup database",
          "2. Run migration in development",
          "3. Test folder favorites feature",
          "4. Run migration in production",
          "5. Remove graceful degradation code from index.tsx"
        ],
        "risk": "HIGH - affects production data"
      }
    },
    {
      "id": 8,
      "title": "Legacy Code Cleanup",
      "priority": "LOW",
      "severity": "Tech Debt",
      "location": {
        "file": "components/note-modal.tsx",
        "related_flag": "config/features.ts USE_MARKDOWN_EDITOR = true"
      },
      "description": "Old modal editor kept for fallback but new editor is production-ready",
      "analysis": {
        "current_usage": "None - USE_MARKDOWN_EDITOR is true everywhere",
        "bundle_impact": "~200 lines of unused code",
        "last_used": "Before markdown editor implementation"
      },
      "solution": {
        "approach": "Remove after stability confirmation",
        "steps": [
          "1. Confirm new editor stable for 2+ weeks",
          "2. Remove USE_MARKDOWN_EDITOR flag",
          "3. Delete components/note-modal.tsx",
          "4. Remove flag checks in note-item.tsx"
        ],
        "benefits": [
          "Reduced bundle size",
          "Clearer codebase",
          "Less maintenance burden"
        ],
        "caution": "Keep for 1-2 more weeks as safety net"
      }
    }
  ],
  "implementation_plan": {
    "week_1": {
      "title": "High-Value Refactors",
      "tasks": [
        {
          "id": "1.1",
          "description": "Create hooks/use-folder-manager.ts",
          "files_affected": 1,
          "estimated_hours": 3
        },
        {
          "id": "1.2",
          "description": "Refactor notes.tsx to use useFolderManager",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "1.3",
          "description": "Refactor folders.tsx to use useFolderManager",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "1.4",
          "description": "Refactor index.tsx (Dashboard) to use useFolderManager",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "1.5",
          "description": "Create hooks/use-card-expansion.ts",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "1.6",
          "description": "Refactor info.tsx and settings.tsx to use useCardExpansion",
          "files_affected": 2,
          "estimated_hours": 1
        }
      ],
      "total_hours": 8,
      "impact": "~400 lines removed, 2 reusable hooks created"
    },
    "week_2": {
      "title": "Note Editor Consolidation",
      "tasks": [
        {
          "id": "2.1",
          "description": "Create components/note-editor/base-editor.tsx",
          "files_affected": 1,
          "estimated_hours": 4
        },
        {
          "id": "2.2",
          "description": "Create hooks/use-note-editor.ts",
          "files_affected": 1,
          "estimated_hours": 2
        },
        {
          "id": "2.3",
          "description": "Refactor app/note-editor/new.tsx to use BaseEditor",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "2.4",
          "description": "Refactor app/note-editor/[id].tsx to use BaseEditor",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "2.5",
          "description": "Test auto-save and export functionality",
          "estimated_hours": 2
        }
      ],
      "total_hours": 10,
      "impact": "~150 lines removed, DRY editor implementation"
    },
    "week_3": {
      "title": "Polish & Migration",
      "tasks": [
        {
          "id": "3.1",
          "description": "Create components/common/error-message.tsx",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "3.2",
          "description": "Refactor error handling in notes.tsx, folders.tsx, index.tsx",
          "files_affected": 3,
          "estimated_hours": 1
        },
        {
          "id": "3.3",
          "description": "Create and test database migration for is_favorite",
          "files_affected": 1,
          "estimated_hours": 2
        },
        {
          "id": "3.4",
          "description": "Run migration in production (with backup)",
          "estimated_hours": 1
        },
        {
          "id": "3.5",
          "description": "Fix platform-specific code in auth-context.tsx",
          "files_affected": 1,
          "estimated_hours": 1
        },
        {
          "id": "3.6",
          "description": "Remove legacy note-modal.tsx (optional)",
          "files_affected": 2,
          "estimated_hours": 1
        }
      ],
      "total_hours": 7,
      "impact": "Consistent error UX, folder favorites working, no platform bugs"
    }
  },
  "success_metrics": {
    "code_quality": {
      "lines_removed": "500+",
      "hooks_created": 6,
      "duplication_eliminated": "67% reduction in duplicated code"
    },
    "maintainability": {
      "reusable_components": 3,
      "consistent_patterns": "Error handling, card expansion, folder management"
    },
    "type_safety": {
      "platform_crashes": "0 (fixed window.location bug)",
      "runtime_errors": "Reduced via error boundaries"
    },
    "performance": {
      "folder_caching": "50%+ reduction in API calls via folderRefreshTrigger",
      "auto_save_optimization": "Debounced saves reduce database writes"
    },
    "user_experience": {
      "folder_favorites": "Fully functional after migration",
      "consistent_errors": "Unified error styling across all screens",
      "editor_consistency": "DRY implementation, no duplicate logic"
    }
  },
  "risk_assessment": {
    "low_risk": [
      "Hook extraction (backwards compatible)",
      "Error component creation",
      "Card expansion hook"
    ],
    "medium_risk": [
      "Note editor consolidation (requires thorough testing)",
      "Context API introduction (prop threading fix)"
    ],
    "high_risk": [
      "Database migration (requires backup, affects production data)"
    ]
  },
  "recommendations": {
    "immediate_actions": [
      "Start with Week 1 (high-value hooks)",
      "Test useFolderManager thoroughly before moving to Week 2",
      "Backup database before running is_favorite migration"
    ],
    "long_term": [
      "Consider Context API for folder state (Issue #5)",
      "Monitor new markdown editor stability for 2 weeks",
      "Document refactoring patterns in ARCHITECTURE.md"
    ],
    "optional": [
      "Remove legacy note-modal.tsx after editor stability confirmed",
      "Remove USE_MARKDOWN_EDITOR feature flag"
    ]
  },
  "files_to_create": [
    "hooks/use-folder-manager.ts",
    "hooks/use-card-expansion.ts",
    "hooks/use-note-editor.ts",
    "hooks/use-auto-save.ts (optional)",
    "hooks/use-note-export.ts (optional)",
    "components/note-editor/base-editor.tsx",
    "components/common/error-message.tsx",
    "constants/error-styles.ts (alternative)",
    "contexts/folder-manager-context.tsx (optional)",
    "supabase/migrations/YYYYMMDDHHMMSS_add_folders_is_favorite.sql"
  ],
  "files_to_refactor": [
    "app/(tabs)/notes.tsx",
    "app/(tabs)/folders.tsx",
    "app/(tabs)/index.tsx",
    "app/(tabs)/info.tsx",
    "app/(tabs)/settings.tsx",
    "app/note-editor/new.tsx",
    "app/note-editor/[id].tsx",
    "contexts/auth-context.tsx",
    "components/note-item.tsx (remove USE_MARKDOWN_EDITOR checks)"
  ],
  "files_to_delete": [
    "components/note-modal.tsx (after stability confirmation)",
    "config/features.ts (remove USE_MARKDOWN_EDITOR flag)"
  ],
  "agent_notes": {
    "analysis_date": "2025-10-06",
    "total_files_scanned": "60+",
    "source_files_analyzed": 45,
    "lines_of_code_reviewed": "~5000+",
    "key_insights": [
      "Folder management is the biggest duplication issue (360 lines)",
      "Note editor has 80%+ code overlap between new/edit",
      "Database schema missing is_favorite column (critical)",
      "Platform-specific code will crash on mobile (window.location)",
      "Error handling inconsistent across screens"
    ],
    "next_steps": "User to approve phase-by-phase implementation starting with Week 1 hooks"
  }
}
