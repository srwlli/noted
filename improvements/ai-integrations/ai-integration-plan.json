{
  "title": "AI Integration Plan - Claude & Perplexity APIs",
  "date": "2025-10-06",
  "version": "1.0.0",
  "status": "ready-to-implement",

  "executive_summary": {
    "overview": "Tailored AI integration roadmap leveraging Claude API (Anthropic) and Perplexity API for intelligent note-taking features",
    "primary_apis": {
      "claude": {
        "provider": "Anthropic",
        "models": ["claude-3-5-haiku-20241022", "claude-3-5-sonnet-20241022"],
        "use_cases": ["Content generation", "Summarization", "Structured outputs", "Enhancement"]
      },
      "perplexity": {
        "provider": "Perplexity AI",
        "models": ["llama-3.1-sonar-small-128k-online", "llama-3.1-sonar-large-128k-online"],
        "use_cases": ["Web research", "Real-time information", "Citations", "Hybrid RAG"]
      }
    },
    "key_benefits": [
      "Claude Haiku: 50% faster and 30% cheaper than GPT-4o-mini for simple tasks",
      "Claude Sonnet: Superior quality for complex enhancement tasks",
      "Perplexity: Built-in web search without vector database setup",
      "200K context window (57% larger than OpenAI)",
      "Better structured JSON outputs with Claude"
    ]
  },

  "api_strategy": {
    "claude_api": {
      "primary_use_cases": [
        "Smart note titles (Haiku model - ultra-fast)",
        "Auto-summarization (Haiku model - cost-effective)",
        "Content enhancement (Sonnet model - high quality)",
        "Structured categorization (JSON mode)",
        "Long-form analysis (200K context window)"
      ],
      "advantages": [
        "Excellent instruction following",
        "Strong markdown understanding",
        "Reliable JSON structured outputs",
        "Better at brevity (perfect for titles)",
        "200K context vs 128K (OpenAI)"
      ],
      "cost_structure": {
        "haiku": "$0.25 per 1M input tokens, $1.25 per 1M output tokens",
        "sonnet": "$3 per 1M input tokens, $15 per 1M output tokens",
        "typical_title_cost": "$0.0001 per request",
        "typical_summary_cost": "$0.0002 per note"
      }
    },
    "perplexity_api": {
      "primary_use_cases": [
        "Web-enhanced note creation",
        "Real-time fact-checking",
        "Research with automatic citations",
        "Up-to-date information retrieval",
        "Hybrid RAG (notes + web knowledge)"
      ],
      "advantages": [
        "Built-in web search capability",
        "Automatic citation extraction",
        "Lower latency than full RAG setup",
        "No vector database needed initially",
        "Real-time web knowledge"
      ],
      "cost_structure": {
        "sonar_small": "$0.20 per 1M tokens",
        "sonar_large": "$1 per 1M tokens",
        "typical_research_cost": "$0.003 per request"
      }
    }
  },

  "phase_1_quick_wins": {
    "name": "Foundation & Quick Wins",
    "priority": "HIGH",

    "features": [
      {
        "id": "1.1",
        "name": "Smart Note Titles",
        "api": "Claude Haiku",
        "description": "Auto-generate descriptive titles from note content",
        "implementation": {
          "service_file": "services/ai/claude.ts",
          "method": "generateTitle(content: string): Promise<string>",
          "api_call": {
            "model": "claude-3-5-haiku-20241022",
            "max_tokens": 50,
            "temperature": 0.3,
            "prompt": "Generate a concise, descriptive title (max 50 chars) for this note:\n\n{content}"
          },
          "ui_integration": [
            "Add '‚ú® Generate Title' button in markdown editor header",
            "Place next to Preview/Edit toggle",
            "Works in both app/note-editor/new.tsx and [id].tsx",
            "Show loading spinner during generation",
            "Allow user to edit before saving"
          ],
          "code_example": "export async function generateTitle(content: string): Promise<string> {\n  const response = await anthropic.messages.create({\n    model: 'claude-3-5-haiku-20241022',\n    max_tokens: 50,\n    temperature: 0.3,\n    messages: [{\n      role: 'user',\n      content: `Generate a concise, descriptive title (max 50 chars) for this note:\\n\\n${content.slice(0, 2000)}`\n    }]\n  });\n  return response.content[0].text.trim();\n}"
        },
        "estimated_cost_per_request": "$0.0001",
        "success_metrics": [
          "95%+ title generation success rate",
          "Response time < 2 seconds",
          "70%+ user acceptance rate (not manually edited)"
        ]
      },
      {
        "id": "1.2",
        "name": "AI Summarization",
        "api": "Claude Haiku",
        "description": "Auto-generate concise summaries for note previews",
        "implementation": {
          "service_file": "services/ai/claude.ts",
          "method": "summarizeNote(content: string): Promise<string>",
          "api_call": {
            "model": "claude-3-5-haiku-20241022",
            "max_tokens": 150,
            "temperature": 0.4,
            "prompt": "Summarize this note in 1-2 concise sentences (max 120 chars):\n\n{content}"
          },
          "database_changes": {
            "migration_file": "supabase/migrations/001_ai_summaries.sql",
            "sql": "ALTER TABLE notes ADD COLUMN ai_summary TEXT;\nALTER TABLE notes ADD COLUMN summary_generated_at TIMESTAMP;\nCREATE INDEX idx_notes_ai_summary ON notes(user_id) WHERE ai_summary IS NOT NULL;",
            "columns": [
              "ai_summary TEXT - Cached summary text",
              "summary_generated_at TIMESTAMP - When summary was generated"
            ]
          },
          "ui_integration": [
            "Show AI summary in NoteItem preview (replace raw content truncation)",
            "Add '‚ö° AI Summary' badge to indicate AI-generated content",
            "Regenerate only when content changes >20% (track content length)",
            "Option to toggle between AI summary and raw content preview"
          ],
          "caching_strategy": "Store summaries in database, regenerate only when content changes significantly"
        },
        "estimated_cost_per_note": "$0.0002",
        "success_metrics": [
          "Summaries cached for 90%+ of notes",
          "API calls reduced by 90% via caching",
          "Summary quality rating >4/5 from users"
        ]
      },
      {
        "id": "1.3",
        "name": "Service Infrastructure",
        "description": "Build foundational AI service layer",
        "implementation": {
          "files_to_create": [
            "services/ai/claude.ts - Claude API integration",
            "services/ai/perplexity.ts - Perplexity API integration",
            "services/ai/index.ts - Unified exports",
            "services/ai/types.ts - Shared TypeScript types",
            "lib/anthropic.ts - Anthropic client configuration",
            "lib/perplexity.ts - Perplexity client configuration"
          ],
          "environment_variables": [
            "ANTHROPIC_API_KEY - Claude API key",
            "PERPLEXITY_API_KEY - Perplexity API key",
            "AI_RATE_LIMIT_PER_USER - Default: 100 requests/hour",
            "ENABLE_AI_FEATURES - Feature flag, default: true"
          ],
          "error_handling": [
            "Rate limit detection and backoff",
            "Network timeout handling (8 second timeout)",
            "Graceful degradation when API unavailable",
            "User-friendly error messages",
            "Retry logic with exponential backoff"
          ],
          "rate_limiting": {
            "per_user_hourly": 100,
            "per_user_daily": 500,
            "storage": "Use Supabase to track usage per user_id",
            "enforcement": "Return 429 error when limit exceeded"
          }
        }
      }
    ],

    "deliverables": [
      "Smart titles working in production",
      "Summaries cached in database with <2s generation time",
      "AI service layer foundation complete",
      "Environment variables configured",
      "Error handling and rate limiting implemented"
    ]
  },

  "phase_2_research_enhancement": {
    "name": "Research & Categorization",
    "priority": "HIGH",

    "features": [
      {
        "id": "2.1",
        "name": "Web-Enhanced Notes (Perplexity)",
        "api": "Perplexity Sonar",
        "description": "Add real-time web research capabilities directly in markdown editor",
        "implementation": {
          "service_file": "services/ai/perplexity.ts",
          "method": "researchTopic(query: string): Promise<{ content: string; sources: string[] }>",
          "api_call": {
            "endpoint": "https://api.perplexity.ai/chat/completions",
            "model": "llama-3.1-sonar-small-128k-online",
            "return_citations": true,
            "example_request": "{\n  \"model\": \"llama-3.1-sonar-small-128k-online\",\n  \"messages\": [{ \"role\": \"user\", \"content\": \"Research quantum computing applications\" }],\n  \"return_citations\": true\n}"
          },
          "ui_integration": [
            "Add 'üîç Research' button in markdown toolbar (alongside Bold, Italic, etc.)",
            "Opens modal: 'What would you like to research?'",
            "Inserts research results with citations into note at cursor position",
            "Auto-formats with markdown: heading, content, sources list",
            "Show loading state during research (1-3 seconds typical)"
          ],
          "output_format": "## Web Research: {query}\n\n{ai_generated_content}\n\n**Sources:**\n- [Source 1](url)\n- [Source 2](url)",
          "use_cases": [
            "User writes 'quantum computing' ‚Üí taps Research ‚Üí gets latest info with citations",
            "Meeting notes ‚Üí research competitors or technologies mentioned",
            "Travel planning ‚Üí research destinations directly in note",
            "Learning notes ‚Üí get current information on any topic"
          ]
        },
        "estimated_cost_per_request": "$0.003",
        "success_metrics": [
          "Research completion time < 3 seconds",
          "95%+ citation accuracy",
          "User adoption: 20%+ of notes use research feature"
        ]
      },
      {
        "id": "2.2",
        "name": "Smart Categorization",
        "api": "Claude Haiku (JSON mode)",
        "description": "Auto-suggest tags, categories, and folder locations",
        "implementation": {
          "service_file": "services/ai/claude.ts",
          "method": "analyzeNote(content: string): Promise<NoteAnalysis>",
          "return_type": {
            "category": "meeting | idea | todo | journal | reference",
            "tags": "string[] - 3-5 relevant keywords",
            "suggestedFolder": "string | null - if obvious folder match",
            "topics": "string[] - main subjects discussed"
          },
          "api_call": {
            "model": "claude-3-5-haiku-20241022",
            "max_tokens": 300,
            "temperature": 0.2,
            "prompt": "Analyze this note and return JSON with: category (meeting/idea/todo/journal/reference), tags (3-5 keywords), suggestedFolder (if obvious), topics (main subjects):\n\n{content}",
            "response_parsing": "JSON.parse(response.content[0].text)"
          },
          "database_changes": {
            "migration_file": "supabase/migrations/002_ai_metadata.sql",
            "sql": "ALTER TABLE notes ADD COLUMN ai_category TEXT;\nALTER TABLE notes ADD COLUMN ai_tags TEXT[];\nALTER TABLE notes ADD COLUMN ai_analyzed_at TIMESTAMP;",
            "columns": [
              "ai_category TEXT - meeting/idea/todo/journal/reference",
              "ai_tags TEXT[] - Array of suggested tags",
              "ai_analyzed_at TIMESTAMP - When analysis was performed"
            ]
          },
          "ui_integration": [
            "Auto-suggest folder when creating/editing note",
            "Show suggested tags below title field with checkboxes",
            "One-tap to accept all suggestions",
            "Individual accept/reject for each tag",
            "Show category badge on note card"
          ]
        },
        "estimated_cost_per_note": "$0.0002",
        "success_metrics": [
          "Tag suggestion acceptance rate >60%",
          "Folder suggestion accuracy >70%",
          "Category classification accuracy >85%"
        ]
      }
    ],

    "deliverables": [
      "Web research integrated in markdown editor",
      "Perplexity API with citations working",
      "Auto-tagging and categorization operational",
      "Folder auto-suggestions functional",
      "Tag management UI complete"
    ]
  },

  "phase_3_advanced_features": {
    "name": "Enhancement & Intelligence",
    "priority": "MEDIUM",

    "features": [
      {
        "id": "3.1",
        "name": "Content Enhancement",
        "api": "Claude Sonnet",
        "description": "AI-powered text improvement: grammar, tone, expansion, simplification",
        "implementation": {
          "service_file": "services/ai/claude.ts",
          "method": "enhanceText(text: string, mode: EnhanceMode): Promise<string>",
          "enhance_modes": {
            "grammar": "Fix grammar and spelling, preserve meaning",
            "expand": "Expand into full paragraphs with more detail",
            "simplify": "Simplify to be clear and concise",
            "professional": "Rewrite in professional tone",
            "casual": "Rewrite in casual, friendly tone"
          },
          "api_call": {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 4000,
            "temperature": 0.5,
            "prompt_template": "{mode_instruction}:\n\n{text}"
          },
          "ui_integration": [
            "Add '‚ú® Enhance' dropdown in markdown toolbar",
            "Select text or entire note to enhance",
            "Show before/after comparison modal",
            "Side-by-side view with differences highlighted",
            "Accept (replace) or Reject (keep original) buttons",
            "Options: Fix Grammar, Expand, Simplify, Professional Tone, Casual Tone"
          ],
          "ux_considerations": [
            "Show word count before/after enhancement",
            "Allow undo after accepting enhancement",
            "Save original version in edit history (future feature)"
          ]
        },
        "estimated_cost_per_enhancement": "$0.001-0.003 (varies by text length)",
        "success_metrics": [
          "Enhancement acceptance rate >70%",
          "Grammar fixes reduce errors by >90%",
          "User satisfaction rating >4.5/5"
        ]
      },
      {
        "id": "3.2",
        "name": "Ask Your Notes (Hybrid RAG)",
        "api": "Perplexity + Local Search",
        "description": "Chat interface combining user notes with web knowledge",
        "implementation": {
          "service_file": "services/ai/ask-notes.ts",
          "method": "askQuestion(question: string, userNotes: Note[]): Promise<ChatResponse>",
          "workflow": [
            "Step 1: Find relevant notes using simple text search (MVP)",
            "Step 2: Build context from top 5 relevant notes",
            "Step 3: Send question + notes context to Perplexity",
            "Step 4: Perplexity answers using notes AND web knowledge",
            "Step 5: Return answer with source note citations and web citations"
          ],
          "api_call": {
            "model": "llama-3.1-sonar-large-128k-online",
            "system_prompt": "You are a helpful assistant that answers questions using the user's notes AND web knowledge. Always cite which notes you reference.",
            "context_format": "Based on these notes:\n\n[Note Title 1]: {content_preview}\n[Note Title 2]: {content_preview}\n\nAnswer: {question}",
            "return_citations": true
          },
          "ui_integration": [
            "Add 'üí¨ Ask' floating action button",
            "Chat interface with message history",
            "Show source notes with links for each answer",
            "Display web citations separately",
            "Example queries: 'What did I decide about the redesign?', 'Summarize all my Q3 planning notes'",
            "Save chat history for future reference"
          ],
          "future_enhancement": "Add pgvector for true semantic search instead of text matching (Phase 4)"
        },
        "estimated_cost_per_query": "$0.002-0.005 (varies by context)",
        "success_metrics": [
          "Answer relevance rating >4/5",
          "90%+ citation accuracy",
          "Daily active users of chat feature >30%"
        ]
      }
    ],

    "deliverables": [
      "Enhancement toolbar in markdown editor",
      "5 enhancement modes operational",
      "Ask Your Notes chat interface complete",
      "Hybrid RAG (notes + web) working",
      "Chat history persistence",
      "Source citations for both notes and web"
    ]
  },

  "technical_architecture": {
    "service_layer": {
      "new_files": [
        {
          "path": "services/ai/claude.ts",
          "exports": [
            "generateTitle(content: string): Promise<string>",
            "summarizeNote(content: string): Promise<string>",
            "enhanceText(text: string, mode: EnhanceMode): Promise<string>",
            "analyzeNote(content: string): Promise<NoteAnalysis>"
          ]
        },
        {
          "path": "services/ai/perplexity.ts",
          "exports": [
            "researchTopic(query: string): Promise<{ content: string; sources: string[] }>",
            "askQuestion(question: string, context: string): Promise<{ answer: string; citations: string[] }>"
          ]
        },
        {
          "path": "services/ai/index.ts",
          "purpose": "Unified exports for all AI functions"
        },
        {
          "path": "services/ai/types.ts",
          "types": [
            "EnhanceMode",
            "NoteAnalysis",
            "ChatResponse",
            "ResearchResult"
          ]
        },
        {
          "path": "lib/anthropic.ts",
          "purpose": "Anthropic client singleton with error handling"
        },
        {
          "path": "lib/perplexity.ts",
          "purpose": "Perplexity API wrapper with retry logic"
        }
      ]
    },

    "component_layer": {
      "new_components": [
        "components/ai/ai-button.tsx - Reusable AI action button with loading state",
        "components/ai/ai-loading.tsx - AI-specific loading animations",
        "components/ai/ai-badge.tsx - '‚ú® AI Generated' badge component",
        "components/markdown/research-modal.tsx - Perplexity research UI",
        "components/markdown/enhance-modal.tsx - Text enhancement comparison UI",
        "components/ai/ask-notes-interface.tsx - Chat UI for Ask Your Notes",
        "components/ai/chat-message.tsx - Individual chat message component",
        "components/ai/source-citation.tsx - Show source notes and web links"
      ],
      "modified_components": [
        "app/note-editor/new.tsx - Add AI buttons to header (Generate Title)",
        "app/note-editor/[id].tsx - Add AI buttons to header (Generate Title)",
        "components/markdown/markdown-toolbar.tsx - Add Research and Enhance buttons",
        "components/note-item.tsx - Display AI summaries instead of raw preview",
        "components/common-header.tsx - Add Ask Notes chat icon (optional)"
      ]
    },

    "database_schema": {
      "migrations": [
        {
          "file": "supabase/migrations/001_ai_summaries.sql",
          "changes": [
            "ALTER TABLE notes ADD COLUMN ai_summary TEXT",
            "ALTER TABLE notes ADD COLUMN summary_generated_at TIMESTAMP",
            "CREATE INDEX idx_notes_ai_summary ON notes(user_id) WHERE ai_summary IS NOT NULL"
          ]
        },
        {
          "file": "supabase/migrations/002_ai_metadata.sql",
          "changes": [
            "ALTER TABLE notes ADD COLUMN ai_category TEXT",
            "ALTER TABLE notes ADD COLUMN ai_tags TEXT[]",
            "ALTER TABLE notes ADD COLUMN ai_analyzed_at TIMESTAMP"
          ]
        }
      ],
      "future_migrations": [
        {
          "file": "supabase/migrations/003_chat_history.sql",
          "tables": [
            "chat_conversations (id, user_id, title, created_at)",
            "chat_messages (id, conversation_id, role, content, source_note_ids, created_at)"
          ]
        },
        {
          "file": "supabase/migrations/004_vector_search.sql",
          "description": "Enable pgvector for semantic search (Phase 4)",
          "changes": [
            "CREATE EXTENSION IF NOT EXISTS vector",
            "ALTER TABLE notes ADD COLUMN content_embedding VECTOR(1536)",
            "CREATE INDEX ON notes USING ivfflat (content_embedding vector_cosine_ops)"
          ]
        }
      ]
    },

    "environment_configuration": {
      "required": [
        {
          "name": "ANTHROPIC_API_KEY",
          "description": "Claude API key from console.anthropic.com",
          "storage": "Supabase Edge Functions secrets or Vercel env vars",
          "example": "sk-ant-api03-..."
        },
        {
          "name": "PERPLEXITY_API_KEY",
          "description": "Perplexity API key from perplexity.ai",
          "storage": "Supabase Edge Functions secrets or Vercel env vars",
          "example": "pplx-..."
        }
      ],
      "optional": [
        {
          "name": "AI_RATE_LIMIT_PER_USER",
          "default": 100,
          "description": "Max AI requests per user per hour"
        },
        {
          "name": "ENABLE_AI_FEATURES",
          "default": true,
          "description": "Feature flag to disable AI globally"
        },
        {
          "name": "AI_CACHE_TTL_SECONDS",
          "default": 86400,
          "description": "How long to cache AI results (24 hours default)"
        }
      ]
    }
  },

  "cost_analysis": {
    "per_user_monthly_estimates": {
      "light_user": {
        "notes_per_month": 10,
        "breakdown": {
          "titles": "10 √ó $0.0001 = $0.001",
          "summaries": "10 √ó $0.0002 = $0.002",
          "research": "2 √ó $0.003 = $0.006"
        },
        "total": "$0.01/month"
      },
      "medium_user": {
        "notes_per_month": 100,
        "breakdown": {
          "titles": "100 √ó $0.0001 = $0.01",
          "summaries": "100 √ó $0.0002 = $0.02",
          "enhancement": "20 √ó $0.002 = $0.04",
          "research": "10 √ó $0.003 = $0.03",
          "ask_notes": "50 √ó $0.002 = $0.10"
        },
        "total": "$0.20/month"
      },
      "heavy_user": {
        "notes_per_month": 500,
        "total": "$1-2/month"
      }
    },

    "cost_optimization_strategies": [
      "Cache summaries aggressively (reduce API calls by 90%)",
      "Use Claude Haiku for simple tasks (5-10x cheaper than Sonnet)",
      "Batch requests where possible",
      "Implement per-user rate limits (100 requests/day)",
      "Only regenerate summaries when content changes >20%",
      "Use simple text search initially (delay pgvector until needed)"
    ],

    "budget_monitoring": {
      "alerts": [
        "Set Anthropic usage alert at $50/month",
        "Set Perplexity usage alert at $50/month",
        "Monitor per-user costs weekly",
        "Flag users exceeding $5/month for review"
      ],
      "dashboards": [
        "Track daily AI request volume",
        "Cost per feature breakdown",
        "User adoption metrics",
        "Cache hit rate monitoring"
      ]
    }
  },

  "api_comparison": {
    "claude_vs_openai": [
      {
        "feature": "Title Generation",
        "openai": "GPT-4o-mini",
        "claude": "Claude Haiku",
        "advantage": "Claude: 50% faster, 30% cheaper"
      },
      {
        "feature": "Summarization",
        "openai": "GPT-4o-mini",
        "claude": "Claude Haiku",
        "advantage": "Claude: Better quality, same cost"
      },
      {
        "feature": "Enhancement",
        "openai": "GPT-4o",
        "claude": "Claude Sonnet",
        "advantage": "Claude: Superior instruction following"
      },
      {
        "feature": "JSON Outputs",
        "openai": "GPT-4 Structured",
        "claude": "Claude JSON mode",
        "advantage": "Claude: More reliable structure"
      },
      {
        "feature": "Web Search",
        "openai": "Not available",
        "claude": "Not available",
        "perplexity": "Built-in, no RAG setup",
        "advantage": "Perplexity: Native web integration"
      },
      {
        "feature": "Context Window",
        "openai": "128K tokens",
        "claude": "200K tokens",
        "advantage": "Claude: 57% larger context"
      }
    ]
  },

  "implementation_roadmap": {
    "phase_1": {
      "name": "Phase 1 - Foundation",
      "tasks": [
        "Create services/ai/claude.ts and perplexity.ts",
        "Add API keys to Supabase/Vercel environment",
        "Implement Smart Titles with Claude Haiku",
        "Add Generate Title button to markdown editor",
        "Implement Auto-Summarization",
        "Run database migration for ai_summary column",
        "Update NoteItem to display AI summaries",
        "Add error handling and rate limiting",
        "Test in development and staging"
      ],
      "deliverables": [
        "Smart titles operational",
        "Summaries cached in database",
        "AI service foundation complete",
        "Rate limiting implemented"
      ]
    },
    "phase_2": {
      "name": "Phase 2 - Research & Categorization",
      "tasks": [
        "Implement Perplexity research modal",
        "Add Research button to markdown toolbar",
        "Implement Claude-based categorization",
        "Add tag suggestions UI",
        "Implement folder auto-suggestions",
        "Run database migration for ai_metadata",
        "Test research with citations",
        "User acceptance testing"
      ],
      "deliverables": [
        "Web research integrated",
        "Auto-tagging working",
        "Folder suggestions operational",
        "Citation display complete"
      ]
    },
    "phase_3": {
      "name": "Phase 3 - Advanced Features",
      "tasks": [
        "Implement content enhancement with Claude Sonnet",
        "Add Enhance dropdown to toolbar",
        "Create before/after comparison modal",
        "Implement Ask Your Notes chat interface",
        "Build hybrid RAG with Perplexity",
        "Add chat history persistence",
        "Implement source citations UI",
        "Final testing and deployment"
      ],
      "deliverables": [
        "Enhancement tools working",
        "Chat interface complete",
        "Hybrid RAG operational",
        "All Phase 3 features deployed"
      ]
    }
  },

  "risk_mitigation": {
    "technical_risks": [
      {
        "risk": "API rate limits or outages",
        "probability": "Medium",
        "impact": "High",
        "mitigation": [
          "Implement exponential backoff retry logic",
          "Show graceful degradation (hide AI buttons)",
          "Cache aggressively to reduce API dependency",
          "Monitor API status pages"
        ]
      },
      {
        "risk": "Unexpected cost overruns",
        "probability": "Medium",
        "impact": "High",
        "mitigation": [
          "Per-user daily limits (100 requests/day)",
          "Budget alerts at $50, $100, $200",
          "Monitor costs daily via API dashboards",
          "Implement cost cap per user"
        ]
      },
      {
        "risk": "Poor quality AI outputs",
        "probability": "Low",
        "impact": "Medium",
        "mitigation": [
          "Thorough prompt engineering",
          "User feedback collection",
          "Allow regeneration of results",
          "A/B test different prompts"
        ]
      }
    ],

    "privacy_security": {
      "considerations": [
        "All API calls must go through Supabase Edge Functions (server-side)",
        "Never expose API keys to client",
        "Use zero data retention policies (Claude & Perplexity both support this)",
        "Implement 'Private Notes' flag to exclude from AI processing",
        "Log all AI requests for debugging (without storing content)",
        "Add input validation to prevent prompt injection",
        "Encrypt API keys in Supabase secrets"
      ],
      "compliance": [
        "GDPR: User consent for AI processing",
        "Data retention: Only cache results, not raw API responses",
        "User control: Ability to delete all AI-generated content"
      ]
    }
  },

  "success_metrics": {
    "adoption": [
      "% of users trying AI features initially (target: 40%+)",
      "% of notes with AI-generated titles (target: 30%+)",
      "% of notes with AI summaries (target: 50%+)",
      "AI requests per active user (target: 5+ per session)"
    ],
    "quality": [
      "Title acceptance rate - not manually edited (target: 70%+)",
      "Summary usefulness rating (target: 4/5+)",
      "Enhancement acceptance rate (target: 70%+)",
      "Research feature usage frequency (target: 20%+ of notes)"
    ],
    "engagement": [
      "Average AI requests per user (target: 15+ per period)",
      "Time spent in chat interface (target: 5+ min per session)",
      "Acceptance rate of AI suggestions (target: 60%+)"
    ],
    "business": [
      "Cost per user (target: <$0.50 per period)",
      "Retention improvement with AI features (target: +15%)",
      "User satisfaction with AI features (target: 4.5/5)"
    ]
  },

  "testing_strategy": {
    "unit_tests": [
      "Test AI service methods with mocked API responses",
      "Test rate limiting logic",
      "Test caching mechanisms",
      "Test error handling for all failure modes"
    ],
    "integration_tests": [
      "Test full title generation workflow",
      "Test summarization with database caching",
      "Test research modal with Perplexity API",
      "Test enhancement before/after UI",
      "Test chat interface with hybrid RAG"
    ],
    "personal_testing": [
      "Test each feature with real notes",
      "Collect personal feedback on AI quality",
      "Measure actual vs estimated costs",
      "Test on all target devices and platforms",
      "Verify offline/error state handling"
    ]
  },

  "rollout_strategy": {
    "development_testing": {
      "environment": "Personal development app (single user)",
      "approach": "Implement and test each feature individually",
      "feature_flags": "Enable AI features via environment variable",
      "monitoring": [
        "Track API costs during development",
        "Monitor error rates and performance",
        "Collect personal usage feedback",
        "Document issues and improvements"
      ]
    },
    "implementation_notes": [
      "Test each feature thoroughly before moving to next phase",
      "Monitor API costs closely during development",
      "Iterate based on personal feedback",
      "Update 'Coming Soon' card when features are ready",
      "Update Quick Start guide with AI features"
    ]
  },

  "future_enhancements": {
    "phase_4_optional": [
      {
        "feature": "Semantic Search with pgvector",
        "description": "Upgrade from text search to vector embeddings for true semantic search",
        "api": "Claude embeddings or OpenAI embeddings"
      },
      {
        "feature": "Voice Transcription",
        "description": "Record voice memos and transcribe with AI cleanup",
        "api": "Whisper API (via Replicate or OpenAI)"
      },
      {
        "feature": "Duplicate Note Detection",
        "description": "Find and merge duplicate or similar notes",
        "api": "Embeddings + cosine similarity"
      },
      {
        "feature": "Smart Reminders",
        "description": "Extract action items and deadlines from notes",
        "api": "Claude with structured JSON output"
      }
    ],
    "advanced_features": [
      "Multi-modal analysis (images, PDFs)",
      "Collaborative notes with AI summaries",
      "Knowledge graph visualization",
      "Email-to-note parsing",
      "Integration with external tools"
    ]
  },

  "next_steps": {
    "immediate_actions": [
      "Obtain Claude API key from console.anthropic.com",
      "Obtain Perplexity API key from perplexity.ai",
      "Add API keys to Supabase secrets or Vercel env vars",
      "Create services/ai folder structure",
      "Implement Phase 1 Feature 1.1 (Smart Titles) as proof of concept",
      "Test with 5-10 notes to validate API integration"
    ],
    "recommended_start": {
      "option_a": {
        "name": "Quick Start (Recommended)",
        "tasks": [
          "Setup AI services (claude.ts, perplexity.ts)",
          "Implement Smart Titles",
          "Testing and deployment"
        ],
        "deliverable": "Smart Titles working in production"
      },
      "option_b": {
        "name": "Full Phase 1",
        "tasks": [
          "Complete all Phase 1 features (Titles + Summaries + Infrastructure)",
          "Thorough testing",
          "Beta deployment"
        ],
        "deliverable": "All Phase 1 features live"
      }
    }
  },

  "resources": {
    "documentation": [
      "Anthropic Claude API: https://docs.anthropic.com/",
      "Perplexity API: https://docs.perplexity.ai/",
      "Supabase Edge Functions: https://supabase.com/docs/guides/functions",
      "Expo Environment Variables: https://docs.expo.dev/guides/environment-variables/"
    ],
    "api_dashboards": [
      "Anthropic Console: https://console.anthropic.com/",
      "Perplexity Dashboard: https://perplexity.ai/settings/api"
    ],
    "support": [
      "Anthropic Discord: https://discord.gg/anthropic",
      "Perplexity Support: support@perplexity.ai"
    ]
  }
}
