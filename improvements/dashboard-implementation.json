{
  "title": "Dashboard with Favorites and Recent Notes",
  "dateCreated": "2025-10-05",
  "status": "planned",
  "priority": "high",

  "overview": {
    "description": "Create a new Dashboard route as the home page with favorite notes and last 3 modified notes",
    "intent": "Provide users quick access to their most important and recently modified notes",
    "scope": "New route, database schema, tab restructure, favorite actions in menu/modal"
  },

  "requirements": {
    "database": {
      "approach": "is_favorite boolean column",
      "reasoning": "Preferred over join table for simplicity",
      "column": "is_favorite",
      "type": "boolean",
      "default": "false",
      "nullable": false
    },

    "tabStructure": {
      "changes": [
        "Add 4th tab: Dashboard",
        "Make Dashboard the new index (home page)",
        "Rename current index.tsx → notes.tsx",
        "Update tab navigation order"
      ],
      "icon": "home",
      "newTabOrder": ["Dashboard (home)", "Info", "Notes", "Settings"]
    },

    "favoritingInteraction": {
      "locations": ["Popup menu (...)", "Modal (primary card)"],
      "behavior": "On tap adds to dashboard",
      "userExperience": "User stays on note, not moved",
      "notAllowed": "Favorites NOT in card header",
      "nested": "Only in menu and modal"
    },

    "dashboardContent": {
      "section1": {
        "name": "Favorites",
        "header": "No header",
        "source": "Notes where is_favorite = true",
        "order": "Most recently updated first (ordered by updated_at DESC)"
      },
      "section2": {
        "name": "Last 3",
        "header": "Last 3",
        "source": "Last 3 modified notes",
        "filter": "Exclude notes that are favorites",
        "logic": "If note is in both favorites AND last 3, only show in favorites"
      }
    },

    "emptyState": {
      "trigger": "New user with no favorites and no notes",
      "display": [
        {
          "card": 1,
          "message": "Add fav for quick access"
        },
        {
          "card": 2,
          "message": "Last 3 notes here"
        }
      ],
      "dismissal": "Cards disappear once user adds either favorites or notes"
    }
  },

  "implementation": {
    "phase1": {
      "name": "Database Schema",
      "tasks": [
        {
          "task": "Create migration file",
          "file": "supabase/migrations/[timestamp]_add_is_favorite_column.sql",
          "sql": "ALTER TABLE public.notes ADD COLUMN is_favorite boolean NOT NULL DEFAULT false;",
          "index": "CREATE INDEX idx_notes_user_favorite ON public.notes(user_id, is_favorite) WHERE is_favorite = true;",
          "reasoning": "Index for fast favorite queries per user"
        }
      ]
    },

    "phase2": {
      "name": "TypeScript Interfaces",
      "tasks": [
        {
          "task": "Update Note interface",
          "file": "services/notes.ts",
          "before": "export interface Note {\n  id: string;\n  user_id: string;\n  title: string;\n  content: string;\n  folder_id: string | null;\n  created_at: string;\n  updated_at: string;\n}",
          "after": "export interface Note {\n  id: string;\n  user_id: string;\n  title: string;\n  content: string;\n  folder_id: string | null;\n  is_favorite: boolean;\n  created_at: string;\n  updated_at: string;\n}"
        }
      ]
    },

    "phase3": {
      "name": "Service Layer Methods",
      "tasks": [
        {
          "task": "Add toggleFavorite method",
          "file": "services/notes.ts",
          "signature": "async toggleFavorite(noteId: string, isFavorite: boolean): Promise<void>",
          "implementation": "const { error } = await supabase\n  .from('notes')\n  .update({ is_favorite: isFavorite })\n  .eq('id', noteId);\n\nif (error) throw error;"
        },
        {
          "task": "Add getFavoriteNotes method",
          "file": "services/notes.ts",
          "signature": "async getFavoriteNotes(): Promise<Note[]>",
          "implementation": "const { data, error } = await supabase\n  .from('notes')\n  .select('*')\n  .eq('is_favorite', true)\n  .order('updated_at', { ascending: false });\n\nif (error) throw error;\nreturn data || [];"
        },
        {
          "task": "Add getRecentNonFavoriteNotes method",
          "file": "services/notes.ts",
          "signature": "async getRecentNonFavoriteNotes(limit: number = 3): Promise<Note[]>",
          "implementation": "const { data, error } = await supabase\n  .from('notes')\n  .select('*')\n  .eq('is_favorite', false)\n  .order('updated_at', { ascending: false })\n  .limit(limit);\n\nif (error) throw error;\nreturn data || [];"
        }
      ]
    },

    "phase4": {
      "name": "Tab Restructure",
      "tasks": [
        {
          "task": "Rename index.tsx to notes.tsx",
          "action": "Move app/(tabs)/index.tsx → app/(tabs)/notes.tsx",
          "reasoning": "Free up index.tsx for dashboard (home page)"
        },
        {
          "task": "Update tab navigation",
          "file": "app/(tabs)/_layout.tsx",
          "changes": [
            {
              "change": "Add dashboard tab first",
              "code": "<Tabs.Screen\n  name=\"index\"\n  key=\"index-tab\"\n  options={{\n    title: 'Dashboard',\n    tabBarIcon: ({ color }) => <MaterialIcons size={24} name=\"home\" color={color} />,\n  }}\n/>"
            },
            {
              "change": "Update notes tab",
              "code": "<Tabs.Screen\n  name=\"notes\"\n  key=\"notes-tab\"\n  options={{\n    title: 'Notes',\n    tabBarIcon: ({ color }) => <MaterialIcons size={24} name=\"description\" color={color} />,\n  }}\n/>"
            }
          ],
          "newOrder": ["index (dashboard)", "info", "notes", "settings"]
        }
      ]
    },

    "phase5": {
      "name": "Dashboard Page Component",
      "file": "app/(tabs)/index.tsx",
      "structure": {
        "imports": [
          "React, { useState, useEffect, useCallback }",
          "View, Text, ScrollView, RefreshControl",
          "SharedPageLayout",
          "NoteItem",
          "Card (for empty state)",
          "notesService, Note",
          "useFocusEffect from @react-navigation/native"
        ],
        "state": [
          "favoriteNotes: Note[]",
          "recentNotes: Note[]",
          "loading: boolean",
          "refreshing: boolean",
          "error: string | null"
        ],
        "hooks": [
          "useEffect(() => { loadDashboardData() }, [])"
        ],
        "methods": [
          {
            "name": "loadDashboardData",
            "signature": "async () => Promise<void>",
            "logic": [
              "setError(null)",
              "const favorites = await notesService.getFavoriteNotes()",
              "const recent = await notesService.getRecentNonFavoriteNotes(3)",
              "setFavoriteNotes(favorites)",
              "setRecentNotes(recent)"
            ]
          },
          {
            "name": "handleRefresh",
            "logic": "setRefreshing(true); loadDashboardData();"
          }
        ],
        "render": {
          "sections": [
            {
              "section": "Favorites Section (no header)",
              "condition": "favoriteNotes.length > 0",
              "content": "favoriteNotes.map(note => <NoteItem ... />)"
            },
            {
              "section": "Last 3 Section",
              "condition": "recentNotes.length > 0",
              "header": "<Text style={styles.sectionHeader}>Last 3</Text>",
              "content": "recentNotes.map(note => <NoteItem ... />)"
            },
            {
              "section": "Empty State",
              "condition": "favoriteNotes.length === 0 && recentNotes.length === 0",
              "cards": [
                {
                  "card": 1,
                  "component": "Card",
                  "props": "isAccordion={false}",
                  "content": "<Text>Add fav for quick access</Text>"
                },
                {
                  "card": 2,
                  "component": "Card",
                  "props": "isAccordion={false}",
                  "content": "<Text>Last 3 notes here</Text>"
                }
              ]
            }
          ]
        }
      },
      "emptyStateLogic": {
        "display": "favoriteNotes.length === 0 && recentNotes.length === 0",
        "card1Condition": "Always show if empty state",
        "card2Condition": "Always show if empty state",
        "dismissal": "Both cards disappear when user adds first favorite OR creates first note"
      }
    },

    "phase6": {
      "name": "Favorite Action UI - Popup Menu",
      "file": "components/note-item.tsx",
      "location": "Popup menu (...) button",
      "changes": [
        {
          "task": "Update NoteItemProps interface",
          "code": "interface NoteItemProps {\n  note: Note;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onMoveToFolder?: () => void;\n  onFavoriteToggle?: () => void;  // NEW: Callback when favorite is toggled\n}"
        },
        {
          "task": "Add favorite state tracking",
          "code": "const [isFavorite, setIsFavorite] = useState(note.is_favorite);"
        },
        {
          "task": "Add state synchronization effect",
          "code": "// Sync local state when note.is_favorite changes from parent\nuseEffect(() => {\n  setIsFavorite(note.is_favorite);\n}, [note.is_favorite]);"
        },
        {
          "task": "Add menu item",
          "position": "After 'Edit' menu item",
          "code": "<MenuOption onSelect={handleToggleFavorite}>\n  <View style={styles.menuItem}>\n    <MaterialIcons \n      name={isFavorite ? 'star' : 'star-border'} \n      size={20} \n      color={colors.text} \n    />\n    <Text style={[styles.menuText, { color: colors.text }]}>\n      {isFavorite ? 'Remove from Favorites' : 'Add to Favorites'}\n    </Text>\n  </View>\n</MenuOption>"
        },
        {
          "task": "Add toggle handler",
          "code": "const handleToggleFavorite = async () => {\n  try {\n    const newFavoriteState = !isFavorite;\n    await notesService.toggleFavorite(note.id, newFavoriteState);\n    setIsFavorite(newFavoriteState);\n    toast.success(newFavoriteState ? 'Added to Favorites' : 'Removed from Favorites');\n    if (onFavoriteToggle) onFavoriteToggle();\n  } catch (err) {\n    console.error('Failed to toggle favorite:', err);\n    toast.error('Failed to update favorite');\n  }\n};"
        }
      ]
    },

    "phase7": {
      "name": "Favorite Action UI - Modal",
      "file": "components/note-actions-modal.tsx",
      "location": "Primary actions section",
      "changes": [
        {
          "task": "Add isFavorite prop",
          "interface": "interface NoteActionsModalProps {\n  ...\n  isFavorite: boolean;\n  onToggleFavorite: () => void;\n}"
        },
        {
          "task": "Add Favorite primary action card",
          "position": "After Edit, before Share",
          "code": "<ActionCard onPress={onToggleFavorite}>\n  <PrimaryActionRow\n    title=\"\"\n    actions={[\n      {\n        icon: isFavorite ? 'star' : 'star-border',\n        label: isFavorite ? 'Unfavorite' : 'Favorite',\n        onPress: onToggleFavorite,\n      },\n    ]}\n  />\n</ActionCard>"
        },
        {
          "task": "Update note-item.tsx modal call",
          "code": "<NoteActionsModal\n  ...\n  isFavorite={isFavorite}\n  onToggleFavorite={handleToggleFavorite}\n/>"
        }
      ]
    }
  },

  "fileChanges": {
    "newFiles": [
      "supabase/migrations/[timestamp]_add_is_favorite_column.sql",
      "app/(tabs)/index.tsx (new dashboard page)"
    ],
    "renamedFiles": [
      "app/(tabs)/index.tsx → app/(tabs)/notes.tsx"
    ],
    "modifiedFiles": [
      "services/notes.ts (Note interface + 3 new methods)",
      "app/(tabs)/_layout.tsx (tab navigation)",
      "components/note-item.tsx (popup menu favorite action)",
      "components/note-actions-modal.tsx (modal favorite action)",
      "CHANGELOG.md"
    ]
  },

  "uiFlow": {
    "userJourney": {
      "step1": "User opens app → Dashboard (index) is home page",
      "step2": {
        "scenario": "New user",
        "display": "Two empty state cards",
        "card1": "Add fav for quick access",
        "card2": "Last 3 notes here"
      },
      "step3": {
        "action": "User creates first note or favorites a note",
        "result": "Empty state cards disappear"
      },
      "step4": {
        "action": "User navigates to Notes tab",
        "result": "All notes list (current index.tsx behavior)"
      },
      "step5": {
        "action": "User clicks (...) menu on a note",
        "result": "Popup menu shows 'Add to Favorites' option"
      },
      "step6": {
        "action": "User taps 'Add to Favorites'",
        "result": [
          "Note is_favorite set to true",
          "User stays on current note (not moved)",
          "Toast: 'Added to Favorites'",
          "Note appears on Dashboard"
        ]
      },
      "step7": {
        "action": "User long presses note (mobile)",
        "result": "Modal opens with Favorite primary action card"
      },
      "step8": {
        "action": "User taps Favorite card in modal",
        "result": "Same as step 6"
      },
      "step9": {
        "action": "User returns to Dashboard",
        "display": [
          "Favorites section (no header)",
          "'Last 3' section with header",
          "If note is in both, only shows in favorites"
        ]
      }
    }
  },

  "dashboardLayout": {
    "structure": [
      {
        "section": "Favorites",
        "headerText": "None",
        "condition": "favoriteNotes.length > 0",
        "spacing": "No top margin (starts at top)",
        "content": "NoteItem components for each favorite"
      },
      {
        "section": "Last 3",
        "headerText": "Last 3",
        "headerStyle": "fontSize: 20, fontWeight: '600', marginBottom: 12, marginTop: 24",
        "condition": "recentNotes.length > 0",
        "spacing": "24px top margin to separate from favorites",
        "content": "NoteItem components for last 3 non-favorite notes"
      },
      {
        "section": "Empty State",
        "condition": "favoriteNotes.length === 0 && recentNotes.length === 0",
        "cards": [
          {
            "type": "Card",
            "isAccordion": false,
            "content": "Text: 'Add fav for quick access'",
            "icon": "star-border",
            "styling": "Centered text, icon above"
          },
          {
            "type": "Card",
            "isAccordion": false,
            "content": "Text: 'Last 3 notes here'",
            "icon": "access-time",
            "styling": "Centered text, icon above"
          }
        ]
      }
    ],
    "noteItemBehavior": {
      "interactions": "Same as notes page",
      "expand": "Click title to expand/collapse",
      "menu": "Click (...) for popup menu",
      "modal": "Long press for actions modal",
      "favorite": "Available in both menu and modal"
    }
  },

  "testing": {
    "scope": "Database migration, service methods, dashboard page, favorite actions",
    "critical": true,

    "testCases": [
      {
        "test": "Database migration applies successfully",
        "steps": [
          "Run migration on local database",
          "Verify is_favorite column exists with default false",
          "Verify index exists on (user_id, is_favorite)",
          "Check existing notes have is_favorite = false"
        ],
        "expected": "All notes have is_favorite field with default false"
      },
      {
        "test": "Service methods work correctly",
        "steps": [
          "Call toggleFavorite(noteId, true)",
          "Verify note is_favorite updates to true",
          "Call getFavoriteNotes()",
          "Verify only favorited notes return",
          "Call getRecentNonFavoriteNotes(3)",
          "Verify returns last 3 non-favorite notes"
        ],
        "expected": "All service methods query and update correctly"
      },
      {
        "test": "Tab navigation restructure works",
        "steps": [
          "Open app",
          "Verify Dashboard tab is first (home icon)",
          "Verify Info tab is second",
          "Verify Notes tab is third (description icon)",
          "Verify Settings tab is fourth",
          "Tap Dashboard → loads index.tsx",
          "Tap Notes → loads notes.tsx (old index behavior)"
        ],
        "expected": "Tab order correct, routes load properly"
      },
      {
        "test": "Dashboard empty state displays",
        "steps": [
          "Fresh database with no notes",
          "Navigate to Dashboard",
          "Verify two empty state cards appear",
          "Card 1: 'Add fav for quick access'",
          "Card 2: 'Last 3 notes here'"
        ],
        "expected": "Empty state cards display for new users"
      },
      {
        "test": "Empty state dismisses correctly",
        "steps": [
          "Start with empty dashboard",
          "Create first note",
          "Return to dashboard",
          "Verify empty state cards disappeared",
          "Verify note appears in 'Last 3' section"
        ],
        "expected": "Empty state disappears when notes exist"
      },
      {
        "test": "Popup menu favorite action works",
        "steps": [
          "Navigate to Notes tab",
          "Click (...) on a note",
          "Verify 'Add to Favorites' option appears",
          "Tap 'Add to Favorites'",
          "Verify toast shows 'Added to Favorites'",
          "Verify user stays on Notes page (not redirected)",
          "Navigate to Dashboard",
          "Verify note appears in favorites section"
        ],
        "expected": "Favorite toggles via popup menu, toast confirms, dashboard updates"
      },
      {
        "test": "Modal favorite action works",
        "steps": [
          "Navigate to Notes tab",
          "Long press a note",
          "Verify modal opens",
          "Verify Favorite primary action card appears",
          "Tap Favorite card",
          "Verify toast shows 'Added to Favorites'",
          "Close modal",
          "Navigate to Dashboard",
          "Verify note appears in favorites section"
        ],
        "expected": "Favorite toggles via modal, dashboard updates"
      },
      {
        "test": "Dashboard favorites section displays",
        "steps": [
          "Favorite 3 notes",
          "Navigate to Dashboard",
          "Verify favorites appear at top (no header)",
          "Verify most recently favorited is first",
          "Verify all 3 favorites display"
        ],
        "expected": "Favorites section shows favorited notes without header"
      },
      {
        "test": "Dashboard Last 3 section displays",
        "steps": [
          "Create 5 notes (none favorited)",
          "Navigate to Dashboard",
          "Verify 'Last 3' header appears",
          "Verify last 3 modified notes appear below header",
          "Verify ordered by updated_at descending"
        ],
        "expected": "Last 3 section shows 3 most recent non-favorite notes with header"
      },
      {
        "test": "Dashboard excludes favorites from Last 3",
        "steps": [
          "Create 5 notes",
          "Favorite the 2 most recent notes",
          "Navigate to Dashboard",
          "Verify favorited notes appear in favorites section (no header)",
          "Verify Last 3 section shows next 3 most recent (excluding favorited)",
          "Verify favorited notes NOT duplicated in Last 3"
        ],
        "expected": "Notes in favorites do not appear in Last 3 section"
      },
      {
        "test": "Unfavorite works correctly",
        "steps": [
          "Favorite a note",
          "Navigate to Dashboard → verify in favorites",
          "Navigate to Notes tab",
          "Click (...) on favorited note",
          "Verify menu shows 'Remove from Favorites' with star icon",
          "Tap 'Remove from Favorites'",
          "Verify toast shows 'Removed from Favorites'",
          "Navigate to Dashboard",
          "Verify note removed from favorites section",
          "If note is one of last 3 modified, verify it appears in Last 3"
        ],
        "expected": "Unfavorite removes from dashboard favorites, may appear in Last 3"
      },
      {
        "test": "Dashboard refresh works",
        "steps": [
          "Navigate to Dashboard",
          "Pull down to refresh",
          "Verify loading indicator",
          "Verify favorites and Last 3 reload",
          "Verify data is current"
        ],
        "expected": "Refresh reloads dashboard data"
      },
      {
        "test": "Icon states match favorite status",
        "steps": [
          "Non-favorited note: menu shows star-border icon",
          "Favorite the note",
          "Menu shows star icon (filled)",
          "Modal shows star icon (filled)",
          "Unfavorite the note",
          "Menu shows star-border icon"
        ],
        "expected": "Icons correctly reflect favorite state"
      }
    ]
  },

  "changelog": {
    "section": "Added",
    "dateAdded": "2025-10-05",
    "entries": [
      "**Dashboard Route** (2025-10-05)",
      "  - New Dashboard tab as home page (index route) with 'home' icon",
      "  - Favorites section displays favorited notes (no header)",
      "  - Last 3 section displays 3 most recently modified non-favorite notes",
      "  - Notes in favorites excluded from Last 3 to avoid duplication",
      "  - Empty state cards for new users: 'Add fav for quick access' and 'Last 3 notes here'",
      "  - Empty state dismisses when user adds notes or favorites",
      "",
      "**Favorite Notes Feature** (2025-10-05)",
      "  - Added is_favorite boolean column to notes table with database index",
      "  - 'Add to Favorites' action in popup menu (...) with star icon",
      "  - 'Favorite' primary action card in long-press modal",
      "  - Toast confirmation when toggling favorite status",
      "  - User stays on current note when favoriting (not redirected)",
      "  - Favorited notes appear immediately on Dashboard",
      "",
      "**Tab Navigation Update** (2025-10-05)",
      "  - Dashboard (home icon) now first tab and default route",
      "  - Notes list moved from index to dedicated 'notes' route",
      "  - Tab order: Dashboard → Info → Notes → Settings"
    ]
  },

  "commitMessage": {
    "title": "Add Dashboard with favorites and recent notes",
    "body": "Implement new Dashboard route as home page with favorite notes and Last 3 modified notes.\n\nNew Features:\n- Dashboard tab with 'home' icon as new index route\n- Favorites section (no header) for quick access to favorited notes\n- Last 3 section showing most recently modified non-favorite notes\n- Empty state cards for new users with helpful prompts\n- 'Add to Favorites' action in popup menu (...) and modal\n- Database column is_favorite with index for performance\n\nTab Restructure:\n- Renamed app/(tabs)/index.tsx → notes.tsx\n- Created new app/(tabs)/index.tsx for Dashboard\n- Updated tab navigation: Dashboard → Info → Notes → Settings\n\nService Layer:\n- toggleFavorite(noteId, isFavorite) - Update favorite status\n- getFavoriteNotes() - Query favorited notes\n- getRecentNonFavoriteNotes(limit) - Query recent non-favorites\n\nUser Experience:\n- Star icon (star-border/star) indicates favorite status\n- Toast confirmation on favorite toggle\n- User stays on current page when favoriting (not redirected)\n- Notes in favorites excluded from Last 3 (no duplication)\n- Empty state cards disappear when user adds content\n\nTesting:\n- Database migration tested with index creation\n- Service methods query correctly with RLS\n- Dashboard loads favorites and recent notes\n- Empty state displays and dismisses correctly\n- Favorite actions work in both menu and modal\n- Tab navigation routes to correct pages\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"
  },

  "estimatedTime": "2-3 hours",

  "risks": {
    "medium": [
      "Database migration requires careful testing with existing data",
      "Tab restructure changes default route (index → dashboard)",
      "Users accustomed to Notes as home page will see new layout"
    ],
    "low": [
      "Service layer methods follow existing patterns",
      "UI components reuse existing NoteItem and Card",
      "Empty state cards use standard Card component"
    ],
    "mitigation": [
      "Test migration on local database first",
      "Verify RLS policies work with new is_favorite column",
      "Test empty state dismissal logic thoroughly",
      "Ensure Last 3 correctly excludes favorites",
      "Confirm tab navigation routes to correct pages"
    ]
  },

  "futureEnhancements": {
    "planned": [
      "Drag-and-drop reordering of favorites",
      "Favorite folders in addition to notes",
      "Dashboard widgets (tags, recent activity, stats)",
      "Customizable 'Last N' count (user preference)",
      "Search within favorites",
      "Favorite groups/categories"
    ],
    "outOfScope": [
      "Multiple dashboards",
      "Shared favorites between users",
      "Favorite history/timeline"
    ]
  },

  "notes": [
    "is_favorite column preferred over join table for simplicity",
    "Dashboard is new home page (index route), Notes moved to dedicated tab",
    "Favorite action ONLY in menu and modal, NOT in card header",
    "User stays on current note when favoriting (no navigation)",
    "Notes appear in either favorites OR Last 3, never both",
    "Empty state cards both disappear when user adds ANY note or favorite",
    "Favorites section has no header text (clean design)",
    "Last 3 section has 'Last 3' header to distinguish",
    "Tab order: Dashboard (home) → Info → Notes (description) → Settings",
    "Database index on (user_id, is_favorite) for query performance",
    "Service methods follow existing async/await + error handling pattern",
    "Reuse existing NoteItem component for consistent note display",
    "Toast notifications for favorite toggle confirmation",
    "Star icon (star-border/star) indicates favorite state in menu and modal"
  ],

  "criticalFixes": {
    "dateFixed": "2025-10-05",
    "fixedBy": "Claude Code (based on deep review)",
    "totalIssuesFound": 6,
    "totalIssuesFixed": 6,

    "fixes": [
      {
        "issue": "CRITICAL #1: Wrong Toast API",
        "severity": "CRITICAL",
        "location": "Phase 6, line 247",
        "problem": "Used Toast.show() from react-native-toast-message, but app uses sonner-native with toast.success()/toast.error()",
        "impact": "App would crash - Toast is undefined",
        "fixApplied": "Changed Toast.show() to toast.success() and toast.error()",
        "linesChanged": "Phase 6, handleToggleFavorite code",
        "verified": true
      },
      {
        "issue": "CRITICAL #2: Missing Prop Interface",
        "severity": "CRITICAL",
        "location": "Phase 6, NoteItemProps",
        "problem": "Code calls onFavoriteToggle() callback but prop doesn't exist in interface",
        "impact": "TypeScript compilation error",
        "fixApplied": "Added onFavoriteToggle?: () => void to NoteItemProps interface",
        "linesChanged": "Phase 6, added new task for interface update",
        "verified": true
      },
      {
        "issue": "MEDIUM #3: Favorites Ordering Mismatch",
        "severity": "MEDIUM",
        "location": "Requirements section, line 47",
        "problem": "Description said 'Most recently favorited first' but service method orders by updated_at",
        "impact": "UX confusion - description didn't match implementation",
        "fixApplied": "Changed description to 'Most recently updated first (ordered by updated_at DESC)'",
        "linesChanged": "dashboardContent.section1.order",
        "verified": true
      },
      {
        "issue": "MEDIUM #4: State Synchronization Missing",
        "severity": "MEDIUM",
        "location": "Phase 6, state management",
        "problem": "isFavorite state wouldn't update when note.is_favorite changes from parent",
        "impact": "Stale UI - star icon wouldn't reflect actual favorite status",
        "fixApplied": "Added useEffect to sync isFavorite with note.is_favorite",
        "linesChanged": "Phase 6, added state synchronization effect",
        "verified": true
      },
      {
        "issue": "LOW #5: Missing Imports",
        "severity": "LOW",
        "location": "Phase 5, imports array",
        "problem": "Missing useCallback and useFocusEffect imports needed for Dashboard",
        "impact": "Compilation error when using useFocusEffect hook",
        "fixApplied": "Added useCallback to React imports, added useFocusEffect from @react-navigation/native",
        "linesChanged": "Phase 5, structure.imports",
        "verified": true
      },
      {
        "issue": "LOW #6: Missing Tab Keys",
        "severity": "LOW",
        "location": "Phase 4, tab navigation code",
        "problem": "Tab screens missing key prop causes React warnings",
        "impact": "Console warnings, potential reconciliation issues",
        "fixApplied": "Added key='index-tab' and key='notes-tab' to Tabs.Screen components",
        "linesChanged": "Phase 4, tab navigation changes",
        "verified": true
      }
    ],

    "beforeAfterComparison": {
      "before": {
        "criticalIssues": 2,
        "mediumIssues": 2,
        "lowIssues": 2,
        "totalBlockers": 2,
        "readyToImplement": false
      },
      "after": {
        "criticalIssues": 0,
        "mediumIssues": 0,
        "lowIssues": 0,
        "totalBlockers": 0,
        "readyToImplement": true
      }
    },

    "verificationStatus": {
      "toastAPI": "FIXED - Uses sonner-native toast.success()/toast.error()",
      "propInterface": "FIXED - onFavoriteToggle added to NoteItemProps",
      "favoritesOrdering": "FIXED - Description matches implementation (updated_at DESC)",
      "stateSynchronization": "FIXED - useEffect syncs isFavorite with note.is_favorite",
      "imports": "FIXED - useCallback and useFocusEffect added",
      "tabKeys": "FIXED - key props added to all tab screens"
    }
  },

  "review": {
    "dateReviewed": "2025-10-05",
    "reviewer": "Claude Code",
    "status": "APPROVED_WITH_RECOMMENDATIONS",
    "riskLevel": "LOW",
    "goNoGo": "GO - Proceed with implementation",

    "executiveSummary": {
      "assessment": "Well-architected plan with logical phased approach, sound technical decisions, and thoughtful UX",
      "readiness": "Ready to implement with minor adjustments",
      "confidence": "HIGH - Plan is conservative and builds on existing patterns",
      "estimatedTime": "2-3 hours (accurate for experienced developer)"
    },

    "strengths": [
      "Phases logically ordered: Database → Types → Services → UI",
      "Database-first approach with proper indexing strategy",
      "Reuses existing components (NoteItem, Card) - reduces risk",
      "User stays on current page when favoriting - excellent UX",
      "No duplication between Favorites and Last 3 sections",
      "Empty state provides helpful prompts for new users",
      "Toast confirmations for user feedback",
      "is_favorite boolean column is simpler than join table (correct choice)",
      "Index on (user_id, is_favorite) improves query performance",
      "Star icon visual feedback (star-border/star) is intuitive",
      "Comprehensive test cases cover edge cases and user flows",
      "Service methods follow existing async/await patterns"
    ],

    "potentialIssues": [
      {
        "issue": "Missing database index for Last 3 query",
        "severity": "MEDIUM",
        "description": "getRecentNonFavoriteNotes() queries non-favorites sorted by updated_at, but no index exists for this",
        "solution": "Add second index: CREATE INDEX idx_notes_user_recent ON public.notes(user_id, updated_at DESC) WHERE is_favorite = false;",
        "impact": "Performance degradation on Last 3 query as notes table grows"
      },
      {
        "issue": "Dashboard refresh strategy unclear",
        "severity": "MEDIUM",
        "description": "Dashboard needs to refresh when user favorites/unfavorites from Notes page or creates/edits notes, but refresh mechanism not specified",
        "solutions": [
          "Use navigation focus event to reload data when Dashboard tab gains focus",
          "Add onFavoriteToggle callback that triggers Dashboard refresh via context/event emitter",
          "Implement real-time subscriptions for automatic updates"
        ],
        "recommendation": "Use navigation focus event (simplest, most reliable)"
      },
      {
        "issue": "Empty state logic may be too strict",
        "severity": "LOW",
        "description": "Current: favoriteNotes.length === 0 && recentNotes.length === 0 - Both cards disappear together. If user has 1 favorite but no other notes, empty state won't show.",
        "alternative": "Show card 1 only if favoriteNotes.length === 0, show card 2 only if recentNotes.length === 0",
        "currentBehavior": "Intentional - both cards disappear when ANY content exists",
        "verdict": "Current approach is acceptable but worth discussing with designer"
      },
      {
        "issue": "Favorites display limit not specified",
        "severity": "LOW",
        "description": "What happens when user has 50+ favorites? Should Dashboard limit display or show all with scroll?",
        "recommendation": "Either: (1) Show all favorites with scroll, or (2) Add limit to getFavoriteNotes() and 'View All' link",
        "preferredApproach": "Show all with scroll (simpler, matches user expectation)"
      }
    ],

    "recommendedAdjustments": [
      {
        "priority": "HIGH",
        "adjustment": "Add second database index for Last 3 query performance",
        "implementation": "In migration file, add: CREATE INDEX idx_notes_user_recent ON public.notes(user_id, updated_at DESC) WHERE is_favorite = false;",
        "reasoning": "Optimizes getRecentNonFavoriteNotes() query as notes table scales"
      },
      {
        "priority": "HIGH",
        "adjustment": "Implement Dashboard refresh on navigation focus",
        "implementation": "In app/(tabs)/index.tsx, add useFocusEffect hook to reload data when Dashboard tab gains focus",
        "code": "import { useFocusEffect } from '@react-navigation/native';\\n\\nuseFocusEffect(\\n  useCallback(() => {\\n    loadDashboardData();\\n  }, [])\\n);",
        "reasoning": "Ensures Dashboard shows latest data after user favorites/creates notes from other tabs"
      },
      {
        "priority": "MEDIUM",
        "adjustment": "Clarify favorites display limit in dashboard",
        "recommendation": "Document whether favorites section has display limit or shows all with scroll",
        "preferredApproach": "Show all favorites with scroll (no limit)"
      },
      {
        "priority": "LOW",
        "adjustment": "Consider separate empty state logic per section",
        "implementation": "Show 'Add fav for quick access' only if favoriteNotes.length === 0, show 'Last 3 notes here' only if recentNotes.length === 0",
        "currentApproach": "Both cards disappear when ANY content exists (simpler)",
        "verdict": "Current approach is acceptable, keep as-is unless UX testing shows otherwise"
      }
    ],

    "missingConsiderations": [
      {
        "item": "RLS policy verification",
        "description": "Ensure Supabase RLS policies allow users to update is_favorite column on their own notes",
        "action": "Test toggleFavorite() with RLS enabled before deploying",
        "critical": true
      },
      {
        "item": "Real-time updates",
        "description": "Plan doesn't mention real-time subscriptions for live updates when notes change",
        "action": "Consider adding Supabase real-time subscriptions if instant updates are desired",
        "critical": false,
        "note": "Navigation focus refresh is sufficient for MVP"
      },
      {
        "item": "Error handling for empty Last 3",
        "description": "What if user has 5 favorites but only 2 total notes? Last 3 section would be empty.",
        "action": "Ensure 'Last 3' header only shows when recentNotes.length > 0",
        "critical": false
      },
      {
        "item": "Migration rollback plan",
        "description": "No rollback migration provided if is_favorite column needs to be removed",
        "action": "Create down migration: ALTER TABLE public.notes DROP COLUMN is_favorite; DROP INDEX idx_notes_user_favorite; DROP INDEX idx_notes_user_recent;",
        "critical": false
      }
    ],

    "verificationChecklist": {
      "beforeStarting": [
        "Supabase project has migrations enabled and accessible",
        "RLS policies allow users to update their own notes (including is_favorite)",
        "Existing notesService follows async/await + error handling pattern",
        "Toast library (sonner-native or equivalent) is installed",
        "MaterialIcons 'home' and 'star'/'star-border' icons are available",
        "Confirm tab restructure won't break existing deep links or routing"
      ],
      "duringImplementation": [
        "Test migration on local database before production",
        "Verify both indexes are created successfully",
        "Test service methods with RLS enabled",
        "Ensure Dashboard loads with no favorites/notes (empty state)",
        "Test favorite toggle from both menu and modal",
        "Verify Last 3 excludes favorited notes",
        "Confirm tab navigation routes correctly after restructure"
      ],
      "beforeDeployment": [
        "All test cases from testing section pass",
        "Dashboard refreshes when navigating from other tabs",
        "Empty state dismisses correctly",
        "Favorites section scrolls if many favorites exist",
        "Toast notifications appear for favorite toggle",
        "Icons correctly reflect favorite state (star vs star-border)",
        "Performance acceptable with 50+ notes and 10+ favorites"
      ]
    },

    "implementationApproach": {
      "recommended": "Incremental with testing at each phase",
      "phases": [
        {
          "phase": "Phase 1: Database + Services",
          "tasks": [
            "Create and test migration locally",
            "Add service methods to notesService",
            "Test service methods with mock data and RLS"
          ],
          "validation": "Service methods query and update correctly"
        },
        {
          "phase": "Phase 2: Tab Restructure",
          "tasks": [
            "Rename index.tsx → notes.tsx",
            "Update _layout.tsx tab configuration",
            "Create new index.tsx (empty Dashboard shell)"
          ],
          "validation": "Tab navigation routes to correct pages"
        },
        {
          "phase": "Phase 3: Dashboard UI",
          "tasks": [
            "Build Dashboard with empty state first",
            "Add favorites section",
            "Add Last 3 section",
            "Implement refresh and navigation focus reload"
          ],
          "validation": "Dashboard displays correctly with various data states"
        },
        {
          "phase": "Phase 4: Favorite Actions",
          "tasks": [
            "Add favorite action to popup menu",
            "Add favorite action to modal",
            "Wire up toggleFavorite calls with toast feedback"
          ],
          "validation": "Favorite toggle works from both menu and modal"
        },
        {
          "phase": "Phase 5: Integration Testing",
          "tasks": [
            "Run all test cases from testing section",
            "Test with various data scenarios",
            "Verify performance with large datasets"
          ],
          "validation": "All features work end-to-end"
        }
      ]
    },

    "questionsToResolve": [
      {
        "question": "Should there be a limit on favorites displayed on Dashboard?",
        "recommendation": "Show all favorites with scroll (no limit)",
        "reasoning": "Users expect to see all their favorites; scrolling is familiar pattern"
      },
      {
        "question": "What happens if user has 0 favorites but 10+ notes?",
        "answer": "Last 3 section shows 3 most recent (correct per plan)",
        "confirmed": true
      },
      {
        "question": "Should Dashboard auto-refresh when navigating back from Notes tab?",
        "recommendation": "YES - Use useFocusEffect to reload data on tab focus",
        "implementation": "Add to Phase 3"
      },
      {
        "question": "Icon for Dashboard tab - confirm MaterialIcons 'home' matches design?",
        "status": "Awaiting confirmation from designer/user",
        "fallback": "Use 'dashboard' or 'apps' icon if 'home' doesn't fit"
      }
    ],

    "finalVerdict": {
      "decision": "APPROVED - All critical issues fixed, ready to implement",
      "confidence": "VERY HIGH",
      "status": "READY TO EXECUTE",
      "reasoning": [
        "Plan is comprehensive and well-structured",
        "Technical decisions are sound and follow best practices",
        "UX is thoughtful and user-friendly",
        "Test coverage is thorough",
        "Risks are low and well-mitigated",
        "ALL 6 critical issues identified and fixed (2 CRITICAL, 2 MEDIUM, 2 LOW)",
        "Toast API corrected to use sonner-native",
        "Missing prop interface added",
        "State synchronization implemented",
        "All imports and keys added"
      ],
      "criticalIssuesResolved": {
        "total": 6,
        "critical": 2,
        "medium": 2,
        "low": 2,
        "allFixed": true,
        "blockersRemaining": 0
      },
      "nextSteps": [
        "✅ Add second database index to migration (idx_notes_user_recent)",
        "✅ Implement useFocusEffect for Dashboard refresh on navigation",
        "✅ Fix toast API to use sonner-native",
        "✅ Add onFavoriteToggle to NoteItemProps",
        "✅ Add state synchronization useEffect",
        "✅ Add all missing imports and keys",
        "START Phase 1: Database migration and service methods",
        "Test incrementally at each phase",
        "Document any deviations from plan in commit messages"
      ]
    }
  }
}
