{
  "meta": {
    "version": "1.0",
    "created": "2025-10-06",
    "title": "Universal Agent Communication Template",
    "description": "Drop this file into any project to communicate with AI agents. Copy to project root and rename to AGENT.json or keep as-is.",
    "lastUpdated": "2025-10-06"
  },

  "project": {
    "name": "Your Project Name",
    "type": "web-app | mobile-app | api | library | other",
    "stack": ["List your tech stack here"],
    "description": "Brief description of what this project does",
    "repository": "https://github.com/username/repo",
    "status": "development | production | archived"
  },

  "howToUse": {
    "instructions": [
      "1. Copy this file to your project root directory",
      "2. Update the 'project' section with your project details",
      "3. Add conversations in the 'conversations' array",
      "4. Use commands in 'quickCommands' for common requests",
      "5. Agent reads this file and responds inline",
      "6. Keep this file in version control to track decisions"
    ],
    "tips": [
      "Use timestamps for conversations to track history",
      "Add context files in 'context.files' that agent should read",
      "Use 'scratchpad' for quick notes or TODOs",
      "Tag conversations with status: pending, in-progress, completed",
      "Reference specific files using relative paths"
    ]
  },

  "conversations": [
    {
      "id": "conv-001",
      "timestamp": "2025-10-06T14:30:00Z",
      "status": "completed",
      "topic": "Project Analysis",
      "messages": [
        {
          "role": "user",
          "content": "Please analyze this project and tell me:\n1. What framework/stack is it using?\n2. What's the main purpose?\n3. What files should I look at first?",
          "timestamp": "2025-10-06T14:30:00Z"
        },
        {
          "role": "agent",
          "content": "[Agent response will appear here]\n\nBased on my analysis:\n- Stack: [detected stack]\n- Purpose: [purpose description]\n- Key files: [list of files]",
          "timestamp": "2025-10-06T14:32:00Z"
        }
      ]
    },
    {
      "id": "conv-002",
      "timestamp": "2025-10-06T15:00:00Z",
      "status": "pending",
      "topic": "Feature Implementation",
      "messages": [
        {
          "role": "user",
          "content": "I want to add [feature name]. What do I need to do?",
          "timestamp": "2025-10-06T15:00:00Z"
        },
        {
          "role": "agent",
          "content": "[Agent will provide implementation plan here]",
          "timestamp": null
        }
      ]
    }
  ],

  "quickCommands": {
    "description": "Use these shortcuts in your conversations",
    "commands": {
      "@analyze": {
        "description": "Analyze project structure and architecture",
        "usage": "@analyze",
        "example": "User: @analyze\nAgent: Analyzing project structure..."
      },
      "@explain": {
        "description": "Explain a specific file or concept",
        "usage": "@explain <file-path>",
        "example": "User: @explain src/services/api.ts\nAgent: This file contains..."
      },
      "@review": {
        "description": "Code review for a file",
        "usage": "@review <file-path>",
        "example": "User: @review components/Header.tsx\nAgent: Code review findings..."
      },
      "@implement": {
        "description": "Get implementation plan for a feature",
        "usage": "@implement <feature-name>",
        "example": "User: @implement dark mode\nAgent: Implementation plan..."
      },
      "@debug": {
        "description": "Help debug an issue",
        "usage": "@debug <issue-description>",
        "example": "User: @debug users getting logged out\nAgent: Let me investigate..."
      },
      "@refactor": {
        "description": "Refactoring suggestions",
        "usage": "@refactor <file-path>",
        "example": "User: @refactor utils/helpers.ts\nAgent: Refactoring suggestions..."
      },
      "@generate": {
        "description": "Generate code, docs, tests, etc.",
        "usage": "@generate <type> <description>",
        "example": "User: @generate tests for api.ts\nAgent: Generating tests..."
      },
      "@plan": {
        "description": "Create implementation plan",
        "usage": "@plan <feature-or-task>",
        "example": "User: @plan migrate to TypeScript\nAgent: Migration plan..."
      }
    }
  },

  "context": {
    "description": "Files and information the agent should consider as context",
    "files": [
      "package.json",
      "README.md",
      "tsconfig.json",
      "docs/architecture.md"
    ],
    "important": [
      "We use functional components only, no class components",
      "All API calls go through services/ directory",
      "Follow existing patterns in services/notes.ts"
    ],
    "constraints": [
      "Must maintain backward compatibility",
      "No breaking changes without discussion",
      "Keep bundle size under 500KB"
    ]
  },

  "scratchpad": {
    "description": "Quick notes, ideas, TODOs - agent can reference this",
    "notes": [
      "Need to refactor authentication flow",
      "Consider adding Redis caching",
      "Bug: Mobile menu doesn't close on iOS"
    ],
    "todos": [
      "Write tests for new upload feature",
      "Update documentation",
      "Add error boundaries"
    ],
    "ideas": [
      "Voice notes feature",
      "Collaborative editing",
      "Offline-first architecture"
    ]
  },

  "decisions": {
    "description": "Architecture Decision Records (ADRs) - track important decisions",
    "records": [
      {
        "id": "ADR-001",
        "date": "2025-10-06",
        "title": "Use Supabase for backend",
        "status": "accepted",
        "context": "Need a backend solution that handles auth, database, and storage",
        "decision": "Use Supabase instead of building custom backend",
        "consequences": [
          "Positive: Faster development, built-in auth, real-time support",
          "Negative: Vendor lock-in, some customization limitations"
        ]
      }
    ]
  },

  "tasks": {
    "description": "Track implementation tasks",
    "current": [
      {
        "id": "task-001",
        "title": "Add image upload feature",
        "status": "in-progress",
        "priority": "high",
        "assignedTo": "agent",
        "notes": "Using expo-image-picker and Supabase Storage",
        "subtasks": [
          "Install expo-image-picker - ‚úÖ",
          "Create services/images.ts - ‚úÖ",
          "Update UI components - üîÑ",
          "Add tests - ‚è≥"
        ]
      }
    ],
    "completed": [],
    "backlog": []
  },

  "agentConfig": {
    "description": "Configure how the agent should behave",
    "preferences": {
      "codeStyle": "functional, TypeScript, modern ES6+",
      "verbosity": "detailed | concise | balanced",
      "includeExplanations": true,
      "includeExamples": true,
      "suggestAlternatives": true
    },
    "autoIncludeContext": [
      "package.json",
      "README.md"
    ],
    "responseFormat": {
      "useMarkdownInResponses": true,
      "includeCodeBlocks": true,
      "includeFileReferences": true,
      "provideStepByStep": true
    }
  },

  "examples": {
    "description": "Example conversations showing how to use this system",
    "exampleConversations": [
      {
        "scenario": "Asking for help with a bug",
        "conversation": {
          "user": "I'm getting an error: 'Cannot read property X of undefined' in components/UserProfile.tsx line 45. Can you help?",
          "agent": "Let me analyze the file...\n\n**Issue Found:**\nLine 45 tries to access user.profile.avatar but user.profile might be null.\n\n**Fix:**\n```typescript\nconst avatar = user?.profile?.avatar || '/default-avatar.png';\n```\n\n**Explanation:**\nUse optional chaining (?.) to safely access nested properties."
        }
      },
      {
        "scenario": "Planning a new feature",
        "conversation": {
          "user": "@plan add dark mode support",
          "agent": "**Dark Mode Implementation Plan:**\n\n**Phase 1: Setup**\n1. Add theme context provider\n2. Create theme definitions (light/dark)\n3. Update app.json for system preference\n\n**Phase 2: Components**\n1. Update all components to use theme colors\n2. Add theme toggle UI\n\n**Phase 3: Persistence**\n1. Save user preference to AsyncStorage\n\n**Estimated time:** 4-6 hours\n**Files to modify:** [list]"
        }
      }
    ]
  },

  "integrations": {
    "description": "Optional integrations with other tools",
    "github": {
      "enabled": false,
      "autoCreateIssues": false,
      "repository": ""
    },
    "notion": {
      "enabled": false,
      "syncConversations": false
    },
    "jira": {
      "enabled": false,
      "projectKey": ""
    }
  },

  "changelog": {
    "description": "Track changes to this agent communication file",
    "entries": [
      {
        "date": "2025-10-06",
        "version": "1.0",
        "changes": [
          "Initial template created",
          "Added conversation structure",
          "Added quick commands",
          "Added examples"
        ]
      }
    ]
  },

  "tips": {
    "bestPractices": [
      "Be specific in your requests - include file names, line numbers, exact errors",
      "Provide context - what you're trying to achieve, what you've tried",
      "Use commands (@analyze, @review) for common tasks",
      "Update 'context.files' with relevant files for ongoing work",
      "Tag conversations with status to track progress",
      "Keep scratchpad updated with current thoughts/TODOs",
      "Document decisions in 'decisions' section for future reference"
    ],
    "effectiveCommunication": [
      "Good: 'Review services/api.ts for performance issues, specifically the getUserData function'",
      "Better: '@review services/api.ts - getUserData function is slow with 1000+ users'",
      "Bad: 'fix the code'",
      "Good: 'Error on line 45 of UserProfile.tsx: Cannot read property avatar. User object structure: {...}'",
      "Better: '@debug UserProfile.tsx:45 - avatar property undefined. Full error: [paste error]. User object: [paste object]'"
    ]
  }
}
