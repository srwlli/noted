{
  "title": "Export Action MVP - Final Implementation Plan",
  "subtitle": "3-Format Export System - All Issues Resolved",
  "version": "2.0.0",
  "date": "2025-10-07",
  "status": "ready_for_execution",
  "revision_notes": "Addresses all 18 security, correctness, and implementation issues from code review",

  "modal_styling_requirements": {
    "pattern": "Match NoteActionsModal and FolderPickerModal existing pattern",
    "purpose": "Ensure visual consistency across all app modals",
    "styles": {
      "backdrop": {
        "backgroundColor": "rgba(0, 0, 0, 0.5)",
        "flex": 1,
        "justifyContent": "flex-end"
      },
      "bottomSheet": {
        "borderTopLeftRadius": 20,
        "borderTopRightRadius": 20,
        "paddingBottom": 80,
        "maxHeight": "80%",
        "backgroundColor": "colors.elevatedSurface"
      },
      "handle": {
        "width": 40,
        "height": 4,
        "borderRadius": 2,
        "backgroundColor": "colors.border",
        "description": "Drag indicator at top of modal"
      },
      "scrollView": {
        "flexShrink": 1,
        "description": "Allow content to naturally size based on content"
      }
    },
    "behavior": "FLEX - Modal height adapts to content size, capped at 80% screen height for very large content",
    "animationType": "slide",
    "note": "All export-related modals must follow this exact styling pattern"
  },

  "ui_behavior_standards": {
    "purpose": "Ensure behavioral consistency across Export, Embed, and Upload actions",
    "modal_pattern": "All modals use bottom sheet pattern with flex sizing (maxHeight 80%)",
    "button_states": "All action buttons should show prerequisites/state in sublabel when applicable (e.g., 'Connect Drive', 'Publish first')",
    "progress_indication": {
      "rule": "Actions >2 seconds must show progress indicator",
      "export_specific": "Files >1MB show progress bar in modal during export"
    },
    "toast_pattern": "Use loading toast with ID replacement: toast.loading(msg) ‚Üí toast.success/error(msg, { id: loadingToast })",
    "modal_close_timing": "Close modal after completion, not during action. Use finally block to close last.",
    "success_actions": {
      "rule": "Long-running actions should provide action button in success toast when applicable",
      "export_mobile": "Add 'Open File' button in success toast on mobile (like Upload's 'Open in Drive')"
    },
    "export_duration_thresholds": {
      "instant": "<1MB files (~1s) - Toast-only feedback, close modal immediately",
      "progress": ">1MB files (>2s) - Keep modal open, show progress bar, close on complete"
    },
    "reference_implementation": "Upload action follows all standards - use as reference for consistency"
  },

  "critical_fixes": {
    "fix_1_yaml_injection": {
      "severity": "üö® CRITICAL - Data Corruption",
      "issue": "Unescaped YAML values cause parsing errors and potential injection",
      "examples": [
        "title: My Note: TODO (breaks on colon)",
        "title: He said \"hello\" (breaks on quotes)"
      ],
      "rejected_solution": "Manual escaping with regex (error-prone)",
      "accepted_solution": "Use js-yaml library for safe serialization",
      "implementation": {
        "install": "npm install js-yaml && npm install --save-dev @types/js-yaml",
        "code": "import yaml from 'js-yaml';\n\nexport async function exportAsMarkdown(\n  noteTitle: string,\n  noteContent: string,\n  metadata?: {\n    created_at?: string;\n    updated_at?: string;\n    folder_name?: string;\n    is_favorite?: boolean;\n  }\n): Promise<void> {\n  let frontmatter = '';\n  if (metadata) {\n    const frontmatterData = {\n      title: noteTitle,\n      ...(metadata.created_at && { created: metadata.created_at }),\n      ...(metadata.updated_at && { updated: metadata.updated_at }),\n      ...(metadata.folder_name && { folder: metadata.folder_name }),\n      ...(metadata.is_favorite && { favorite: true }),\n    };\n    frontmatter = '---\\n' + yaml.dump(frontmatterData) + '---\\n\\n';\n  }\n  \n  const markdownContent = frontmatter + noteContent;\n  // ... rest of export logic\n}",
        "benefits": [
          "Automatic escaping of all special chars",
          "Handles edge cases (multiline, unicode, etc.)",
          "Industry-standard library (battle-tested)",
          "Proper YAML spec compliance"
        ]
      }
    },

    "fix_2_platform_imports": {
      "severity": "üö® CRITICAL - Won't Build",
      "issue": "Metro bundler analyzes all require() at build time, will fail if .web.ts file imported on native",
      "wrong_approach": "const pdfExport = Platform.OS === 'web' ? require('./pdf-export.web') : require('./pdf-export.native');",
      "correct_approach": "Use file extension convention with single import",
      "implementation": {
        "file_naming": {
          "web": "services/export/pdf-export.web.ts",
          "native": "services/export/pdf-export.native.ts",
          "shared": "services/export/pdf-export.ts (re-exports)"
        },
        "code_pdf_export_ts": "// services/export/pdf-export.ts\n// Metro automatically picks .web.ts or .native.ts based on platform\nexport { exportAsPDF } from './pdf-export';",
        "code_pdf_export_web_ts": "// services/export/pdf-export.web.ts\nexport async function exportAsPDF(noteTitle: string, noteContent: string): Promise<void> {\n  // Web implementation with window.print()\n}",
        "code_pdf_export_native_ts": "// services/export/pdf-export.native.ts\nimport * as Print from 'expo-print';\nexport async function exportAsPDF(noteTitle: string, noteContent: string): Promise<void> {\n  // Native implementation with expo-print\n}",
        "import_usage": "import { exportAsPDF } from '@/services/export/pdf-export'; // Metro resolves automatically"
      }
    },

    "fix_3_popup_blocker": {
      "severity": "‚ö†Ô∏è HIGH - Broken UX",
      "issue": "window.open() blocked by default, no fallback, silent failure",
      "solution": "Use same-tab approach with data URL instead of window.open()",
      "implementation": {
        "code": "export async function exportAsPDF(noteTitle: string, noteContent: string): Promise<void> {\n  try {\n    // Generate HTML\n    const html = markdownService.renderToDocument(noteTitle, noteContent);\n    \n    // Create data URL\n    const blob = new Blob([html], { type: 'text/html' });\n    const dataUrl = URL.createObjectURL(blob);\n    \n    // Open in same tab temporarily for printing\n    const originalContent = document.body.innerHTML;\n    const iframe = document.createElement('iframe');\n    iframe.style.position = 'fixed';\n    iframe.style.right = '0';\n    iframe.style.bottom = '0';\n    iframe.style.width = '0';\n    iframe.style.height = '0';\n    iframe.style.border = 'none';\n    document.body.appendChild(iframe);\n    \n    if (iframe.contentWindow) {\n      iframe.contentWindow.document.open();\n      iframe.contentWindow.document.write(html);\n      iframe.contentWindow.document.close();\n      \n      // Wait for content to load\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Trigger print\n      toast.info('Print dialog will open. Select \"Save as PDF\".', { duration: 2000 });\n      iframe.contentWindow.print();\n      \n      // Cleanup after print dialog closes (user action)\n      // Note: Can't detect when print dialog closes, so leave iframe\n    }\n    \n    URL.revokeObjectURL(dataUrl);\n  } catch (error) {\n    console.error('PDF export failed:', error);\n    throw new Error('Failed to generate PDF. Try exporting as HTML instead.');\n  }\n}",
        "benefits": [
          "No popup blocker issues (iframe in same document)",
          "Better UX (doesn't navigate away)",
          "Fallback suggestion in error message"
        ]
      }
    },

    "fix_4_html_export_details": {
      "severity": "‚ö†Ô∏è HIGH - Incomplete Spec",
      "issue": "HTML export references renderToDocument() but doesn't specify theme source or provide skeleton",
      "solution": "Specify theme access via hooks and provide complete implementation",
      "implementation": {
        "file": "services/export/html-export.ts",
        "code": "import { markdownService } from '@/services/markdown-service';\nimport { Platform } from 'react-native';\nimport * as FileSystem from 'expo-file-system';\nimport * as Sharing from 'expo-sharing';\n\nexport async function exportAsHTML(\n  noteTitle: string,\n  noteContent: string,\n  theme: string,\n  colorMode: 'light' | 'dark'\n): Promise<void> {\n  // Generate HTML with theme\n  const html = markdownService.renderToDocument(noteTitle, noteContent, theme, colorMode);\n  const filename = sanitizeFilename(noteTitle) + '.html';\n  \n  if (Platform.OS === 'web') {\n    // Web: Download\n    const blob = new Blob([html], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    link.click();\n    URL.revokeObjectURL(url);\n  } else {\n    // Mobile: Share\n    const fileUri = `${FileSystem.cacheDirectory}${filename}`;\n    await FileSystem.writeAsStringAsync(fileUri, html);\n    await Sharing.shareAsync(fileUri, {\n      mimeType: 'text/html',\n      dialogTitle: 'Export HTML',\n    });\n  }\n}\n\nfunction sanitizeFilename(filename: string): string {\n  return filename\n    .replace(/[<>:\"/\\\\|?*]/g, '-')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .toLowerCase()\n    .substring(0, 60) || 'untitled';\n}",
        "theme_access_in_modal": {
          "file": "components/export/export-format-modal.tsx",
          "code": "import { useThemeColors } from '@/hooks/use-theme-colors';\n\nexport function ExportFormatModal({ ... }: ExportFormatModalProps) {\n  const { themeName, colorScheme } = useThemeColors();\n  \n  const handleExportHTML = async () => {\n    await exportAsHTML(noteTitle, noteContent, themeName, colorScheme === 'dark' ? 'dark' : 'light');\n  };\n}"
        },
        "note": "Assumes markdown-service.renderToDocument() already exists (from themed-html-export plan)"
      }
    },

    "fix_5_metadata_passing": {
      "severity": "‚ö†Ô∏è HIGH - Incomplete Spec",
      "issue": "Metadata passing still uses placeholders, verification needed",
      "verification_complete": true,
      "findings": {
        "note_interface": "Note { id, user_id, title, content, folder_id, is_favorite, created_at, updated_at }",
        "currently_passed": "noteId, noteTitle, noteContent, folderId, isFavorite",
        "missing": "created_at, updated_at"
      },
      "solution": {
        "step_1": "Add props to NoteActionsModal interface",
        "step_2": "Pass from NoteItem",
        "step_3": "Pass to ExportFormatModal"
      },
      "implementation": {
        "note_actions_modal_interface": "interface NoteActionsModalProps {\n  visible: boolean;\n  onClose: () => void;\n  noteId: string;\n  noteTitle: string;\n  noteContent: string;\n  folderId: string | null;\n  isFavorite: boolean;\n  createdAt: string;           // NEW\n  updatedAt: string;           // NEW\n  onToggleFavorite: () => void;\n  onFolderChanged?: () => void;\n  onNoteUpdated?: () => void;\n  onDelete?: () => void;\n}",
        "note_item_usage": "// components/note-item.tsx line 240\n<NoteActionsModal\n  visible={showActionsModal}\n  onClose={() => setShowActionsModal(false)}\n  noteId={note.id}\n  noteTitle={note.title}\n  noteContent={note.content || ''}\n  folderId={note.folder_id}\n  isFavorite={isFavorite}\n  createdAt={note.created_at}  // NEW\n  updatedAt={note.updated_at}  // NEW\n  onToggleFavorite={handleToggleFavorite}\n  onFolderChanged={onMoveToFolder}\n  onNoteUpdated={onEdit}\n  onDelete={handleDelete}\n/>",
        "export_modal_usage": "// components/note-actions-modal.tsx\n<ExportFormatModal\n  visible={showExportModal}\n  onClose={() => setShowExportModal(false)}\n  noteId={noteId}\n  noteTitle={noteTitle}\n  noteContent={noteContent}\n  noteMetadata={{\n    created_at: createdAt,\n    updated_at: updatedAt,\n    folder_name: undefined,  // Can lookup later if needed\n    is_favorite: isFavorite,\n  }}\n/>"
      }
    },

    "fix_6_image_handling": {
      "severity": "‚ö†Ô∏è MEDIUM - Missing Feature",
      "issue": "Markdown with base64 images not addressed (file size, rendering)",
      "solution": "Document limitations and add validation for MVP",
      "mvp_approach": {
        "markdown_export": {
          "behavior": "Export as-is (includes base64 images in markdown)",
          "limitation": "File size may explode with many images",
          "validation": "Warn if content >10MB"
        },
        "html_export": {
          "behavior": "Images render (base64 embedded)",
          "limitation": "Large HTML files",
          "validation": "Same 10MB warning"
        },
        "pdf_export": {
          "web": "Images MAY render in print preview (browser-dependent)",
          "native": "expo-print supports base64 images",
          "limitation": "Very large images may fail to render",
          "validation": "Same 10MB warning"
        },
        "size_check_implementation": "const sizeKB = new Blob([noteContent]).size / 1024;\nif (sizeKB > 10240) {\n  const proceed = await confirmDialog('Note is large (>10MB). Export may be slow or fail. Continue?');\n  if (!proceed) return;\n}",
        "future_enhancement": "Image optimization service (compress/resize before export)"
      }
    },

    "fix_7_filename_sanitization": {
      "severity": "‚ö†Ô∏è MEDIUM - Poor UX",
      "issue": "Current logic produces ugly filenames with multiple underscores",
      "examples": {
        "bad": "My Note: Q4 (2024) ‚Üí my_note__q4__2024_",
        "good": "My Note: Q4 (2024) ‚Üí my-note-q4-2024"
      },
      "implementation": {
        "code": "function sanitizeFilename(filename: string): string {\n  if (!filename || filename.trim().length === 0) {\n    return 'untitled';\n  }\n  \n  return filename\n    // Remove OS-illegal chars: < > : \" / \\ | ? *\n    .replace(/[<>:\"/\\\\|?*]/g, '-')\n    // Replace whitespace with hyphens\n    .replace(/\\s+/g, '-')\n    // Remove consecutive hyphens\n    .replace(/-+/g, '-')\n    // Trim hyphens from ends\n    .replace(/^-+|-+$/g, '')\n    // Lowercase for consistency\n    .toLowerCase()\n    // Limit length (filesystem limits ~255, use 60 for safety)\n    .substring(0, 60)\n    // Final fallback\n    || 'untitled';\n}",
        "test_cases": [
          { "input": "My Note: Q4 (2024)", "output": "my-note-q4-2024" },
          { "input": "Project Plan - Phase 1", "output": "project-plan-phase-1" },
          { "input": "File with <invalid> chars", "output": "file-with-invalid-chars" },
          { "input": "   Leading/Trailing Spaces   ", "output": "leading-trailing-spaces" },
          { "input": "Multiple   Spaces", "output": "multiple-spaces" },
          { "input": "", "output": "untitled" }
        ]
      }
    },

    "fix_8_race_condition": {
      "severity": "üêõ LOW - Minor Bug",
      "issue": "setExporting(false) after onClose() may update unmounted component",
      "solution": "Use try/finally pattern and close modal last (matches ui_behavior_standards)",
      "implementation": {
        "before": "try {\n  await exportAsHTML(...);\n  onClose();\n  setExporting(false);\n}",
        "after": "try {\n  await exportAsHTML(...);\n  toast.success('Exported as HTML', { id: loadingToast });\n} catch (error) {\n  toast.error('Export failed', { id: loadingToast });\n} finally {\n  setExporting(false);\n  setExportProgress(null);\n  onClose();  // Close last to avoid state update warnings\n}",
        "note": "Consistent with modal_close_timing standard: close after completion, not during"
      }
    },

    "fix_9_misleading_toasts": {
      "severity": "üêõ MEDIUM - Confusing UX",
      "issue": "PDF toast says 'Exported as PDF' while print dialog still open (user hasn't saved)",
      "solution": "Different messages for web vs native, accurate timing",
      "implementation": {
        "web": "toast.info('Print dialog opened. Choose \"Save as PDF\" to complete export.', { duration: 5000 });",
        "native": "toast.success('PDF generated. Choose destination to save.', { duration: 3000 });",
        "code": "// After successful PDF generation\nif (Platform.OS === 'web') {\n  toast.info('Print dialog opened. Choose \"Save as PDF\" to complete export.', { duration: 5000 });\n} else {\n  toast.success('PDF generated. Choose destination to save.', { duration: 3000 });\n}"
      }
    },

    "fix_10_code_duplication": {
      "severity": "üìê MEDIUM - Maintainability",
      "issue": "Download/share logic duplicated across all 3 export services",
      "solution": "Extract common file operations to shared utility",
      "implementation": {
        "file": "services/export/export-utils.ts",
        "code": "import { Platform } from 'react-native';\nimport * as FileSystem from 'expo-file-system';\nimport * as Sharing from 'expo-sharing';\n\n/**\n * Download file on web or share on mobile\n */\nexport async function saveOrShareFile(\n  content: string,\n  filename: string,\n  mimeType: string\n): Promise<void> {\n  if (Platform.OS === 'web') {\n    // Web: Download\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    link.click();\n    URL.revokeObjectURL(url);\n  } else {\n    // Mobile: Share\n    const fileUri = `${FileSystem.cacheDirectory}${filename}`;\n    await FileSystem.writeAsStringAsync(fileUri, content);\n    await Sharing.shareAsync(fileUri, {\n      mimeType,\n      dialogTitle: `Export ${filename}`,\n    });\n  }\n}\n\n/**\n * Sanitize filename for filesystem\n */\nexport function sanitizeFilename(filename: string): string {\n  if (!filename || filename.trim().length === 0) {\n    return 'untitled';\n  }\n  \n  return filename\n    .replace(/[<>:\"/\\\\|?*]/g, '-')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .toLowerCase()\n    .substring(0, 60)\n    || 'untitled';\n}",
        "usage_in_markdown_export": "import { saveOrShareFile, sanitizeFilename } from './export-utils';\n\nexport async function exportAsMarkdown(...): Promise<void> {\n  // Generate content\n  const markdownContent = frontmatter + noteContent;\n  const filename = sanitizeFilename(noteTitle) + '.md';\n  \n  // Save or share\n  await saveOrShareFile(markdownContent, filename, 'text/markdown');\n}"
      }
    },

    "fix_11_error_handling": {
      "severity": "‚ö†Ô∏è MEDIUM - Poor UX",
      "issue": "Generic error messages don't help user understand what went wrong",
      "solution": "Specific error codes and user-friendly messages",
      "implementation": {
        "error_types": {
          "permission_denied": "Storage permission denied. Grant permission in settings.",
          "disk_full": "Insufficient storage space. Free up space and try again.",
          "network_error": "Network error during export. Check connection.",
          "file_too_large": "Note is too large to export (>50MB). Try reducing content.",
          "cancelled": "Export cancelled.",
          "unknown": "Export failed. Please try again."
        },
        "code": "async function handleExport(format: ExportFormat) {\n  const loadingToast = toast.loading(`Exporting as ${format.toUpperCase()}...`);\n  try {\n    // Size check\n    const sizeKB = new Blob([noteContent]).size / 1024;\n    if (sizeKB > 51200) {\n      throw new Error('file_too_large');\n    }\n    if (sizeKB > 10240) {\n      toast.info('Note is large. This may take a moment...', { duration: 2000 });\n    }\n    \n    // Export\n    switch (format) {\n      case 'html':\n        await exportAsHTML(...);\n        break;\n      // ...\n    }\n    \n    // Success message (format-specific)\n    if (Platform.OS === 'web') {\n      toast.success(`${format.toUpperCase()} file downloaded`, { id: loadingToast });\n    } else {\n      toast.success(`${format.toUpperCase()} ready to share`, { id: loadingToast });\n    }\n  } catch (error: any) {\n    console.error('Export failed:', error);\n    \n    let errorMessage = 'Export failed. Please try again.';\n    \n    // Parse error type\n    if (error.message === 'file_too_large') {\n      errorMessage = 'Note is too large (>50MB). Try reducing content.';\n    } else if (error.message?.includes('permission')) {\n      errorMessage = 'Permission denied. Check app permissions.';\n    } else if (error.message?.includes('space') || error.message?.includes('storage')) {\n      errorMessage = 'Insufficient storage. Free up space and try again.';\n    } else if (error.message?.includes('network')) {\n      errorMessage = 'Network error. Check connection and try again.';\n    } else if (error.name === 'AbortError') {\n      errorMessage = 'Export cancelled.';\n    }\n    \n    toast.error(errorMessage, { id: loadingToast });\n  } finally {\n    onClose();\n  }\n}"
      }
    },

    "fix_12_progress_indication": {
      "severity": "‚ö†Ô∏è MEDIUM - UX Consistency (upgraded from LOW)",
      "issue": "Large notes (5MB+) take 5-10s with no progress feedback",
      "updated_solution": "Add progress bar to modal for files >1MB (consistent with Upload pattern)",
      "implementation": {
        "modal_behavior_by_size": {
          "small_files": {
            "threshold": "<1MB",
            "duration": "~1 second",
            "behavior": "Toast-only feedback, close modal immediately",
            "reason": "Fast enough that progress bar adds visual clutter"
          },
          "large_files": {
            "threshold": ">1MB",
            "duration": ">2 seconds",
            "behavior": "Keep modal open, show progress bar/spinner in modal",
            "reason": "User needs feedback that action is in progress"
          }
        },
        "ui_implementation": {
          "component": "components/export/export-format-modal.tsx",
          "add_progress_section": "Between format selection and footer",
          "code": "const [isExporting, setIsExporting] = useState(false);\nconst [exportProgress, setExportProgress] = useState<string | null>(null);\n\n// During export\nsetIsExporting(true);\nsetExportProgress('Preparing export...');\n// Later: setExportProgress('Generating HTML...');\n// Finally: setIsExporting(false); setExportProgress(null);\n\n// In JSX\n{isExporting && (\n  <View style={styles.progressSection}>\n    <ActivityIndicator size=\"small\" color={colors.tint} />\n    <Text style={[styles.progressText, { color: colors.text }]}>\n      {exportProgress || 'Exporting...'}\n    </Text>\n  </View>\n)}"
        },
        "toast_behavior": {
          "small_files": "Loading toast ‚Üí success/error (standard pattern)",
          "large_files": "Info toast on start ('Exporting large file...'), success/error on complete"
        },
        "mobile_success_action": {
          "add": "On mobile, add 'Open File' button to success toast",
          "code": "if (Platform.OS !== 'web' && fileUri) {\n  toast.success('Exported successfully', {\n    id: loadingToast,\n    action: {\n      label: 'Open',\n      onClick: async () => {\n        await Sharing.shareAsync(fileUri, { UTI: mimeType });\n      }\n    }\n  });\n}"
        },
        "future_enhancement": "Actual percentage-based progress bar (requires chunked export processing)"
      }
    }
  },

  "updated_testing": {
    "realistic_time_estimate": "4-6 hours (was 2 hours)",
    "breakdown": {
      "setup": "30 min (install test apps, reset devices)",
      "per_test_time": "10-15 min (execute, verify, document, screenshot)",
      "total_tests": "27 tests (9 cases √ó 3 platforms)",
      "calculation": "27 tests √ó 12 min avg = 5.4 hours"
    },
    "additional_test_cases": [
      {
        "test": "Export note with 1MB+ content",
        "validates": "Large file warning appears",
        "platforms": ["web", "ios", "android"]
      },
      {
        "test": "Export note with embedded base64 images",
        "validates": "Images render in HTML, included in PDF",
        "platforms": ["web", "ios", "android"]
      },
      {
        "test": "Export with network offline",
        "validates": "Export succeeds (no network required)",
        "platforms": ["web", "ios", "android"]
      },
      {
        "test": "Export with insufficient storage",
        "validates": "Appropriate error message",
        "platforms": ["android"]
      },
      {
        "test": "Rapid successive export clicks",
        "validates": "Debouncing prevents duplicate exports",
        "platforms": ["web", "ios", "android"]
      },
      {
        "test": "Export during app background/restore",
        "validates": "Export completes or fails gracefully",
        "platforms": ["ios", "android"]
      },
      {
        "test": "YAML frontmatter with special chars",
        "validates": "Proper escaping via js-yaml",
        "input": "Title: My Note: Q4 \"Final\" (2024)",
        "expected": "title: 'My Note: Q4 \"Final\" (2024)'",
        "platforms": ["web"]
      },
      {
        "test": "Popup blocker scenario",
        "validates": "Iframe approach bypasses blocker",
        "platforms": ["web"]
      },
      {
        "test": "PDF on mobile with complex tables",
        "validates": "expo-print CSS limitations documented",
        "platforms": ["ios", "android"]
      }
    ],
    "total_tests_updated": 36
  },

  "dependencies_final": {
    "required_new": [
      "expo-file-system",
      "expo-sharing",
      "expo-print",
      "js-yaml",
      "@types/js-yaml"
    ],
    "install_commands": [
      "npx expo install expo-file-system expo-sharing expo-print",
      "npm install js-yaml",
      "npm install --save-dev @types/js-yaml"
    ],
    "rejected": [
      "jspdf (using window.print() for web PDF)",
      "html2canvas (not needed with iframe approach)"
    ]
  },

  "out_of_scope_deferred": {
    "export_from_editor": {
      "issue": "Plan only adds export to note list, not editor",
      "common_workflow": "User edits note, wants to export without leaving editor",
      "solution": "Add export button to editor header menu",
      "defer_reason": "Separate feature, can add after MVP validates core export system",
      "future_ticket": "Add export to note editor toolbar"
    },
    "mobile_permissions": {
      "android": "Scoped storage (Android 10+) - handled by expo-sharing (no permissions needed)",
      "ios": "No special permissions needed for share sheet",
      "app_json_changes": "None required (expo-sharing handles permissions)",
      "note": "If future features require direct file writes, will need WRITE_EXTERNAL_STORAGE"
    },
    "expo_print_css_limitations": {
      "issue": "expo-print has limited CSS support compared to browsers",
      "testing_needed": "Complex tables, syntax highlighting may not render perfectly",
      "solution": "Test during Phase 5, document limitations if found",
      "fallback": "If PDF rendering poor, suggest HTML export as alternative",
      "defer": "Full CSS compatibility testing to post-MVP"
    }
  },

  "final_file_structure": {
    "new_files": [
      "services/export/export-utils.ts (common utilities)",
      "services/export/markdown-export.ts (with js-yaml)",
      "services/export/html-export.ts (complete implementation)",
      "services/export/pdf-export.web.ts (iframe approach)",
      "services/export/pdf-export.native.ts (expo-print)",
      "components/export/export-format-modal.tsx (with all error handling)",
      "package.json (updated dependencies)"
    ],
    "modified_files": [
      "components/note-actions-modal.tsx (add createdAt/updatedAt props, wire Export)",
      "components/note-item.tsx (pass createdAt/updatedAt)"
    ]
  },

  "updated_time_estimate": {
    "phase_1_dependencies": "15 min (was 10 min, added js-yaml)",
    "phase_2_services": "4-5 hours (was 2-3 hours, added proper implementations)",
    "phase_3_ui": "3-4 hours (same, but with all error handling)",
    "phase_4_integration": "1.5 hours (same, metadata passing clear now)",
    "phase_5_testing": "5-6 hours (was 2 hours, realistic estimate with 36 tests)",
    "phase_6_polish": "1 hour (same)",
    "total": "15-17.5 hours (was 9-12 hours)",
    "justification": "More realistic given proper implementations and thorough testing"
  },

  "success_criteria_updated": {
    "must_have_all_fixed": [
      "‚úÖ YAML frontmatter safely escaped (js-yaml)",
      "‚úÖ Platform imports work (Metro .web.ts/.native.ts convention)",
      "‚úÖ PDF works without popup blocker issues (iframe approach)",
      "‚úÖ HTML export with theme specified from useThemeColors hook",
      "‚úÖ Metadata (createdAt, updatedAt) passed correctly",
      "‚úÖ Images in exports handled (with warnings for large files)",
      "‚úÖ Filename sanitization produces readable names (hyphens)",
      "‚úÖ No race conditions (finally + close last)",
      "‚úÖ Toast messages accurate (web PDF says 'print dialog opened')",
      "‚úÖ No code duplication (shared export-utils)",
      "‚úÖ Specific error messages (permission, storage, size)",
      "‚úÖ Progress indication for large files (size-based messages)",
      "‚úÖ All 36 test cases pass on web, iOS, Android"
    ]
  },

  "execution_checklist": {
    "pre_implementation": [
      "[ ] Review final plan with team",
      "[ ] Create feature branch: feature/export-mvp",
      "[ ] Install all dependencies",
      "[ ] Verify Metro bundler version (for .web.ts/.native.ts support)"
    ],
    "implementation_order": [
      "1. [ ] Phase 1: Install dependencies (15 min)",
      "2. [ ] Phase 2a: Create export-utils.ts (30 min)",
      "3. [ ] Phase 2b: Create markdown-export.ts with js-yaml (1 hour)",
      "4. [ ] Phase 2c: Create html-export.ts (1 hour)",
      "5. [ ] Phase 2d: Create pdf-export.web.ts with iframe (1.5 hours)",
      "6. [ ] Phase 2e: Create pdf-export.native.ts with expo-print (30 min)",
      "7. [ ] Phase 3: Create export-format-modal.tsx with all error handling (3-4 hours)",
      "8. [ ] Phase 4: Update note-actions-modal.tsx and note-item.tsx (1.5 hours)",
      "9. [ ] Phase 5: Comprehensive testing (5-6 hours)",
      "10. [ ] Phase 6: Polish and final validation (1 hour)"
    ],
    "post_implementation": [
      "[ ] Code review",
      "[ ] Update documentation",
      "[ ] Create release notes",
      "[ ] Merge to main",
      "[ ] Deploy and monitor"
    ]
  }
}
