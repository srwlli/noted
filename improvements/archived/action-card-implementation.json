{
  "title": "Note Card Actions: Swipe Gestures & Comprehensive Action Modal",
  "dateCreated": "2025-10-04",
  "status": "planned",
  "priority": "high",

  "overview": {
    "description": "Implement swipe-to-reveal quick actions and a comprehensive bottom-sheet modal for note cards, inspired by modern mobile app patterns (e.g., music apps).",
    "userNeed": [
      "Quick access to common actions (delete, move, share) via swipe gesture",
      "Comprehensive action menu for all note operations without cluttering the UI",
      "Clear visual hierarchy separating primary, AI, export, and destructive actions"
    ],
    "businessValue": [
      "Improves UX by reducing taps needed for common actions",
      "Prepares infrastructure for future AI and export features",
      "Creates reusable component patterns for other parts of the app"
    ]
  },

  "designDecisions": {
    "swipeVsModal": {
      "swipe": "Quick actions only (Move to Folder, Delete, Share) - revealed on left swipe",
      "modal": "Comprehensive actions triggered by (...) menu button",
      "reasoning": "Move to Folder ONLY in swipe to avoid double-stacking modals"
    },
    "actionPlacement": {
      "swipeOnly": ["Move to Folder"],
      "bothSwipeAndModal": ["Delete", "Share"],
      "modalOnly": ["Edit", "Duplicate", "AI Actions", "Exports", "Organization", "Copy Content"]
    },
    "hapticFeedback": "Skipped for now - may be added later",
    "placeholders": "Use disabled state (opacity 0.5) with placeholder text for unimplemented features"
  },

  "swipeImplementation": {
    "library": "react-native-gesture-handler",
    "component": "Swipeable",
    "direction": "Left swipe reveals actions on the right",
    "actions": [
      {
        "label": "Move to Folder",
        "icon": "folder",
        "color": "tint",
        "handler": "handleMoveToFolder",
        "status": "working",
        "notes": "Triggers folder selection modal - SWIPE ONLY to avoid modal stacking"
      },
      {
        "label": "Delete",
        "icon": "delete",
        "color": "destructive",
        "handler": "handleDelete",
        "status": "working",
        "notes": "Also appears in modal"
      },
      {
        "label": "Share",
        "icon": "share",
        "color": "tint",
        "handler": "handleShare",
        "status": "placeholder",
        "notes": "Not yet integrated - also appears in modal"
      }
    ],
    "behavior": {
      "closeOnAction": true,
      "closeOnOutsideTap": true,
      "animationDuration": "200ms"
    }
  },

  "modalStructure": {
    "presentation": "Bottom sheet modal with backdrop",
    "dismissal": ["Backdrop tap", "Swipe down", "Any action selected"],
    "sections": [
      {
        "id": "primary-actions",
        "type": "horizontal-row",
        "title": null,
        "actions": [
          {
            "label": "Edit",
            "icon": "edit",
            "handler": "handleEdit",
            "status": "working"
          },
          {
            "label": "Share",
            "icon": "share",
            "handler": "handleShare",
            "status": "placeholder"
          },
          {
            "label": "Duplicate",
            "icon": "content-copy",
            "handler": "handleDuplicate",
            "status": "placeholder"
          }
        ]
      },
      {
        "id": "ai-actions",
        "type": "vertical-card",
        "title": "AI Actions",
        "badge": "beta",
        "actions": [
          {
            "label": "Generate Title",
            "icon": "auto-awesome",
            "handler": "handleGenerateTitle",
            "status": "planned",
            "notes": "See improvements/coming-soon/ai-integrations/ai-title-generation.json"
          },
          {
            "label": "Summarize",
            "icon": "summarize",
            "handler": "handleSummarize",
            "status": "placeholder"
          },
          {
            "label": "Suggest Tags",
            "icon": "label",
            "handler": "handleSuggestTags",
            "status": "placeholder"
          }
        ]
      },
      {
        "id": "export-publishing",
        "type": "vertical-card",
        "title": "Export & Publishing",
        "actions": [
          {
            "label": "Export HTML",
            "icon": "code",
            "handler": "handleExportHTML",
            "status": "working",
            "notes": "Already exists in note editor"
          },
          {
            "label": "Export PDF",
            "icon": "picture-as-pdf",
            "handler": "handleExportPDF",
            "status": "placeholder"
          },
          {
            "label": "Export Markdown",
            "icon": "description",
            "handler": "handleExportMarkdown",
            "status": "placeholder"
          },
          {
            "label": "Add CSS Styling",
            "icon": "palette",
            "handler": "handleAddCSS",
            "status": "placeholder"
          },
          {
            "label": "Publish as HTML",
            "icon": "publish",
            "handler": "handlePublish",
            "status": "placeholder"
          }
        ],
        "notes": "ALL exports on ONE card matching screenshot pattern"
      },
      {
        "id": "organization",
        "type": "vertical-card",
        "title": "Organization",
        "actions": [
          {
            "label": "Add Comment",
            "icon": "comment",
            "handler": "handleAddComment",
            "status": "placeholder"
          },
          {
            "label": "Pin Note",
            "icon": "push-pin",
            "handler": "handlePinNote",
            "status": "placeholder"
          }
        ]
      },
      {
        "id": "actions",
        "type": "vertical-card",
        "title": "Actions",
        "actions": [
          {
            "label": "Copy Content",
            "icon": "content-copy",
            "handler": "handleCopy",
            "status": "working"
          }
        ]
      },
      {
        "id": "destructive",
        "type": "vertical-card",
        "title": null,
        "destructive": true,
        "actions": [
          {
            "label": "Delete Note",
            "icon": "delete",
            "handler": "handleDelete",
            "status": "working",
            "style": "destructive",
            "notes": "Red text and icon"
          }
        ]
      }
    ]
  },

  "reusableComponents": {
    "actionButton": {
      "file": "components/note-actions/action-button.tsx",
      "purpose": "Individual action button with icon, label, disabled state, and placeholder support",
      "props": {
        "icon": "MaterialIcons name",
        "label": "string",
        "onPress": "() => void",
        "disabled": "boolean",
        "destructive": "boolean",
        "placeholder": "boolean (shows opacity 0.5 when true)"
      },
      "styling": [
        "Horizontal layout: icon on left, label on right",
        "Padding: 12-16px",
        "Gap between icon and text: 12px",
        "Disabled state: opacity 0.5",
        "Destructive state: red color for icon and text",
        "Tap feedback: opacity change or background highlight"
      ]
    },
    "actionCard": {
      "file": "components/note-actions/action-card.tsx",
      "purpose": "Card wrapper containing vertical list of action buttons",
      "props": {
        "title": "string | null",
        "badge": "string | null (e.g., 'beta')",
        "destructive": "boolean",
        "children": "ActionButton components"
      },
      "styling": [
        "Card background: colors.surface",
        "Border: 1px solid colors.border",
        "Border radius: 12px",
        "Padding: 8px",
        "Shadow: subtle elevation",
        "Gap between actions: 4px",
        "Optional title section with badge"
      ]
    },
    "primaryActionRow": {
      "file": "components/note-actions/primary-action-row.tsx",
      "purpose": "Horizontal row of 3 equal-width action buttons for primary actions",
      "props": {
        "actions": "Array<{icon, label, onPress, disabled}>"
      },
      "styling": [
        "Flexbox row with equal distribution",
        "Each button: flex: 1",
        "Gap between buttons: 8px",
        "Vertical layout within each button: icon above label",
        "Icon size: 24px",
        "Text: smaller font, centered"
      ]
    },
    "noteActionsModal": {
      "file": "components/note-actions-modal.tsx",
      "purpose": "Main bottom sheet modal container coordinating all action sections",
      "props": {
        "visible": "boolean",
        "onClose": "() => void",
        "noteId": "string",
        "noteTitle": "string",
        "noteContent": "string"
      },
      "structure": [
        "Modal backdrop (semi-transparent)",
        "Bottom sheet with slide-up animation",
        "Scroll view for content",
        "Handle/drag indicator at top",
        "Primary Actions Row (fixed top)",
        "Scrollable section cards",
        "Safe area insets for bottom padding"
      ],
      "behavior": {
        "openAnimation": "Slide up from bottom (300ms)",
        "closeAnimation": "Slide down (200ms)",
        "dismissTriggers": ["Backdrop tap", "Swipe down", "Action selected"],
        "maxHeight": "80% of screen"
      }
    }
  },

  "filesToModify": {
    "noteItem": {
      "file": "components/note-item.tsx",
      "currentImplementation": "Uses react-native-popup-menu for (...) button",
      "changes": [
        "Remove react-native-popup-menu and Menu components",
        "Wrap entire note card content with Swipeable from react-native-gesture-handler",
        "Render right swipe actions (Move to Folder, Delete, Share buttons)",
        "Change (...) button to trigger modal instead of popup menu",
        "Add state for modal visibility: const [showActionsModal, setShowActionsModal] = useState(false)",
        "Pass note data to NoteActionsModal component"
      ],
      "preserveHandlers": [
        "handleEdit - Navigate to note editor",
        "handleCopy - Copy content to clipboard",
        "handleDelete - Delete note with confirmation",
        "handleMoveToFolder - Open folder selection modal"
      ],
      "newHandlers": [
        "handleShare - Placeholder for now",
        "handleDuplicate - Placeholder",
        "handleGenerateTitle - Placeholder (future AI integration)",
        "handleSummarize - Placeholder",
        "handleSuggestTags - Placeholder",
        "handleExportHTML - Use existing export logic",
        "handleExportPDF - Placeholder",
        "handleExportMarkdown - Placeholder",
        "handleAddCSS - Placeholder",
        "handlePublish - Placeholder",
        "handleAddComment - Placeholder",
        "handlePinNote - Placeholder"
      ]
    }
  },

  "technicalImplementation": {
    "dependencies": {
      "existing": [
        "react-native-gesture-handler (for Swipeable)",
        "@expo/vector-icons (MaterialIcons)"
      ],
      "new": [
        "May need react-native-modal or custom modal implementation"
      ]
    },
    "stateManagement": {
      "noteItem": [
        "showActionsModal: boolean - controls modal visibility",
        "swipeableRef: useRef() - to programmatically close swipe"
      ]
    },
    "styling": {
      "theme": "Use existing useThemeColors hook",
      "colors": [
        "colors.surface - card backgrounds",
        "colors.border - card borders",
        "colors.text - default text and icons",
        "colors.tint - accent actions",
        "colors.destructive - delete actions",
        "colors.disabled - placeholder actions (opacity 0.5)"
      ],
      "layout": "Match screenshot pattern with consistent spacing and card styling"
    }
  },

  "implementationPhases": {
    "phase1": {
      "title": "Create Reusable Components",
      "duration": "1-2 hours",
      "tasks": [
        "Create components/note-actions/action-button.tsx",
        "Create components/note-actions/action-card.tsx",
        "Create components/note-actions/primary-action-row.tsx",
        "Test components in isolation with placeholder data"
      ]
    },
    "phase2": {
      "title": "Build Modal Structure",
      "duration": "1-2 hours",
      "tasks": [
        "Create components/note-actions-modal.tsx",
        "Implement all 6 sections using reusable components",
        "Add slide-up animation and backdrop dismissal",
        "Wire up working handlers (Edit, Copy, Delete)",
        "Add placeholders for unimplemented features"
      ]
    },
    "phase3": {
      "title": "Integrate Swipe Gestures",
      "duration": "1 hour",
      "tasks": [
        "Wrap note-item.tsx content with Swipeable",
        "Render 3 swipe action buttons (Move to Folder, Delete, Share)",
        "Style swipe buttons to match design",
        "Test swipe gesture on mobile and web"
      ]
    },
    "phase4": {
      "title": "Replace Popup Menu with Modal",
      "duration": "0.5-1 hour",
      "tasks": [
        "Remove react-native-popup-menu code from note-item.tsx",
        "Change (...) button to open NoteActionsModal",
        "Pass note data to modal",
        "Close swipe when modal opens",
        "Test modal interactions"
      ]
    },
    "phase5": {
      "title": "Testing & Polish",
      "duration": "0.5-1 hour",
      "tasks": [
        "Test on iOS, Android, and web",
        "Verify all working features function correctly",
        "Confirm placeholders are clearly disabled",
        "Check accessibility and tap targets",
        "Test edge cases (long note titles, scrolling)"
      ]
    }
  },

  "successCriteria": {
    "functional": [
      "Swipe reveals 3 action buttons (Move to Folder, Delete, Share)",
      "(...) button opens comprehensive modal from bottom",
      "Modal displays all 6 sections with correct layout",
      "Working features execute correctly (Edit, Copy, Delete, Export HTML, Move to Folder)",
      "Placeholder features are disabled and visually distinct",
      "Modal dismisses on backdrop tap, swipe down, or action selection",
      "Swipe closes when modal opens"
    ],
    "ux": [
      "Swipe gesture feels responsive and natural",
      "Modal animation is smooth (slide up/down)",
      "Primary actions row matches screenshot layout",
      "All export actions are on one card",
      "Destructive action is clearly red and separated",
      "Disabled actions show opacity 0.5 with placeholder text"
    ],
    "technical": [
      "No popup menu code remains in note-item.tsx",
      "Reusable components are properly typed and exported",
      "Theme colors are used consistently",
      "No console errors or warnings",
      "Works on iOS, Android, and web platforms"
    ]
  },

  "futureEnhancements": {
    "hapticFeedback": "Add haptic feedback on swipe and action taps",
    "aiIntegration": "Implement Generate Title feature (see ai-title-generation.json)",
    "exportFormats": "Add PDF, Markdown, and styled HTML exports",
    "shareIntegration": "Implement native share sheet",
    "pinning": "Add note pinning to keep important notes at top",
    "comments": "Add note comments/annotations feature",
    "publishing": "Build publish-to-web feature with custom CSS"
  },

  "designReference": {
    "screenshot": "IMG_8276.PNG",
    "app": "Music app action menu pattern",
    "layout": "Horizontal primary row + vertical action cards + destructive card at bottom",
    "notes": "Match this visual hierarchy and spacing in our implementation"
  },

  "estimatedTimeline": "4-6 hours",

  "dependencies": [
    "react-native-gesture-handler installed",
    "MaterialIcons available",
    "Existing handlers in note-item.tsx (handleEdit, handleCopy, handleDelete, handleMoveToFolder)",
    "Theme colors including destructive and disabled states"
  ],

  "openQuestions": [
    "Should we add haptic feedback now or later?",
    "Do we need a feature flag to toggle between old popup menu and new modal during development?",
    "Should placeholder actions show a toast explaining they're coming soon?",
    "Do we want the swipe to auto-close after a timeout?"
  ],

  "notes": [
    "Move to Folder is SWIPE ONLY to avoid double-stacking modals",
    "Delete and Share appear in BOTH swipe and modal for flexibility",
    "All exports must be on ONE card matching the screenshot pattern",
    "Use placeholder text and disabled state for unimplemented features",
    "Build reusable components to enable future use in other parts of the app",
    "Start with working features, add AI and export features in follow-up PRs"
  ]
}
