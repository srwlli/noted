{
  "feature": "Markdown Editor with Preview Toggle - Implementation Guide",
  "version": "3.0 - Simplified Approach",
  "dateCreated": "2025-10-03",
  "status": "approved",
  "priority": "high",

  "executiveSummary": {
    "goal": "Replace current form-style modal editor with full-screen markdown editor with preview toggle",
    "keyChanges": [
      "Full-screen editor with auto-focus (no modal)",
      "Markdown storage (plain text, portable)",
      "Preview toggle to view formatted result",
      "Auto-title extraction from first line",
      "Smart formatting toolbar above keyboard",
      "Auto-save (no save button)",
      "HTML export capability"
    ],
    "approach": "Parallel development - Build new system alongside old, swap when ready",
    "noBreakingChanges": "Old modal works until final migration phase",
    "agenticDevelopment": "No time estimates - task-based completion",
    "upgradePath": "Can evolve to live markdown (hybrid) or WYSIWYG later without data migration"
  },

  "projectContext": {
    "technology": {
      "framework": "React Native (Expo SDK 54)",
      "router": "Expo Router (file-based routing)",
      "backend": "Supabase (PostgreSQL)",
      "styling": "NativeWind (Tailwind for React Native)",
      "platforms": ["iOS", "Android", "Web (PWA)"]
    },
    "currentPainPoints": {
      "editor": "Modal with separate title/content fields",
      "location": "components/note-modal.tsx, components/note-form.tsx",
      "issues": [
        "Feels like filling form, not writing",
        "Separate title/content breaks flow",
        "Modal from top feels heavy",
        "No immediate writing (must tap into fields)",
        "No formatting support"
      ]
    },
    "targetExperience": {
      "inspiration": "Obsidian, iA Writer, Typora (edit/preview toggle style)",
      "flow": [
        "1. User taps 'New Note' → Full-screen editor appears",
        "2. Cursor ready immediately (auto-focus)",
        "3. User types markdown (plain text)",
        "4. Toolbar provides formatting buttons to insert syntax",
        "5. User taps 'Preview' → Sees formatted result",
        "6. User taps 'Edit' → Back to markdown editing",
        "7. Auto-saves as user types (debounced)",
        "8. First line becomes title automatically",
        "9. Tap back button → Returns to list"
      ],
      "transformation": {
        "before": "Modal, separate fields, plain text, manual save",
        "after": "Full-screen, single field, markdown with preview, auto-save"
      }
    }
  },

  "approachDecision": {
    "chosenOption": "Option 2: Markdown with Preview Toggle",
    "reasoning": [
      "Simplest to implement - plain TextInput",
      "Best data portability - markdown is universal",
      "Easy to export - markdown converts to anything",
      "Can upgrade later - add live preview if users request",
      "No vendor lock-in - plain text storage",
      "Familiar UX - like Obsidian, Typora, iA Writer"
    ],
    "alternatives": {
      "option1": {
        "name": "Plain Markdown (no preview)",
        "rejected": "Too basic, users can't verify formatting"
      },
      "option3": {
        "name": "Hybrid (syntax visible + styled)",
        "deferred": "More complex, can add later if needed"
      },
      "option4": {
        "name": "Pure WYSIWYG",
        "deferred": "Most complex, loses markdown portability"
      }
    },
    "upgradePath": {
      "phase1": "Ship preview toggle (this plan)",
      "laterIfNeeded": [
        "Add live preview (react-native-live-markdown)",
        "Add custom parser (Bear-style syntax hiding)",
        "Add WYSIWYG mode (rich text editor)",
        "All upgrades possible without data migration"
      ]
    }
  },

  "technicalArchitecture": {
    "packages": {
      "reactNativeMarkdownDisplay": {
        "npm": "react-native-markdown-display",
        "purpose": "Render markdown to native components in preview mode",
        "usage": "Display formatted markdown when user toggles preview",
        "platforms": ["iOS", "Android", "Web"]
      },
      "marked": {
        "npm": "marked",
        "purpose": "Convert markdown to HTML for export",
        "usage": "Export notes as HTML documents",
        "platforms": ["All"]
      },
      "installation": "npm install react-native-markdown-display marked && npm install --save-dev @types/marked",
      "notNeeded": {
        "reactNativeLiveMarkdown": "Not needed for preview toggle approach - deferred to future upgrade"
      }
    },
    "fileStructure": {
      "routes": [
        {
          "path": "app/note/new.tsx",
          "purpose": "Full-screen editor for creating new notes",
          "features": ["Auto-focus", "Single textarea", "Edit/Preview toggle", "Auto-save", "Markdown toolbar"]
        },
        {
          "path": "app/note/[id].tsx",
          "purpose": "Full-screen editor for editing existing notes",
          "features": ["Load note content", "Edit/Preview toggle", "Auto-save", "Back navigation"]
        }
      ],
      "components": [
        {
          "path": "components/markdown/markdown-editor.tsx",
          "purpose": "Main editor component with edit/preview toggle",
          "modes": ["Edit mode (TextInput)", "Preview mode (MarkdownDisplay)"]
        },
        {
          "path": "components/markdown/markdown-toolbar.tsx",
          "purpose": "Formatting buttons (B, I, H1-H3, List, Link, Table, Code)",
          "features": ["Text wrapping", "Smart insertion", "Modal triggers"],
          "position": "Floating above keyboard using KeyboardAvoidingView"
        },
        {
          "path": "components/markdown/markdown-renderer.tsx",
          "purpose": "Display markdown content as styled native components",
          "usage": "Used in preview mode and note-item.tsx for previews"
        },
        {
          "path": "components/markdown/table-generator-modal.tsx",
          "purpose": "Visual table creator (row/col picker)",
          "features": ["Grid size selector", "Markdown table generation"]
        },
        {
          "path": "components/markdown/link-dialog-modal.tsx",
          "purpose": "Link insertion dialog (text + URL inputs)",
          "features": ["Text input", "URL input", "Markdown link generation"]
        }
      ],
      "services": [
        {
          "path": "services/markdown-service.ts",
          "purpose": "Markdown rendering and HTML conversion",
          "methods": [
            "renderToComponents(markdown) - For in-app preview display",
            "renderToHtml(markdown) - For HTML export",
            "renderToDocument(title, markdown) - Full HTML document with styles"
          ]
        }
      ],
      "utilities": [
        {
          "path": "utils/note-parser.ts",
          "purpose": "Extract title from markdown content",
          "methods": [
            "extractTitle(markdown) - Get first line or # heading",
            "parseNote(markdown) - Return {title, content}",
            "getPreviewText(markdown) - Get preview excerpt"
          ]
        }
      ]
    },
    "databaseStrategy": {
      "noSchemaChanges": true,
      "currentSchema": {
        "table": "notes",
        "columns": {
          "id": "UUID PRIMARY KEY",
          "title": "VARCHAR(500) - Keep for performance (auto-extracted from content)",
          "content": "TEXT - Stores markdown (no change needed)",
          "user_id": "UUID",
          "folder_id": "UUID (from folders feature)",
          "is_private": "BOOLEAN (from private notes feature)",
          "created_at": "TIMESTAMP",
          "updated_at": "TIMESTAMP"
        }
      },
      "titleHandling": {
        "approach": "Keep title column, auto-populate from first line",
        "extraction": "extractTitle(markdownContent) - Get first line or # heading",
        "storage": "Save extracted title to title column for fast queries",
        "logic": [
          "1. Check if first line starts with # (heading)",
          "2. If yes: Remove # symbols, use as title",
          "3. If no: Use first line as-is (up to 500 chars)",
          "4. Fallback: If empty, use 'Note [timestamp]'"
        ],
        "reasoning": "Keeping title column allows faster queries, sorting, search without parsing markdown every time"
      },
      "backwardCompatibility": {
        "plainTextNotes": "Will render correctly via markdown renderer",
        "migration": "No migration needed - plain text is valid markdown"
      }
    }
  },

  "editorSpecification": {
    "editMode": {
      "component": "TextInput",
      "appearance": "Plain text input",
      "behavior": "User types raw markdown: **bold**, # heading, etc.",
      "autoFocus": true,
      "multiline": true,
      "placeholder": "Start typing..."
    },
    "previewMode": {
      "component": "MarkdownDisplay (from react-native-markdown-display)",
      "appearance": "Fully formatted/styled content",
      "behavior": "Shows rendered markdown - bold text, headings, lists, etc.",
      "syntax": "All markdown syntax hidden in preview",
      "scrollable": true
    },
    "toggleButton": {
      "states": ["Edit", "Preview"],
      "position": "Top right or bottom toolbar",
      "behavior": "Switch between edit and preview modes",
      "icons": {
        "edit": "MaterialIcons: edit",
        "preview": "MaterialIcons: visibility"
      }
    }
  },

  "toolbarSpecification": {
    "architecture": {
      "location": "Floating toolbar at bottom of screen, above keyboard",
      "positioning": "Fixed above keyboard using KeyboardAvoidingView",
      "layout": "Horizontal row of icon buttons with gap spacing",
      "visibility": "Visible in edit mode, hidden in preview mode"
    },
    "buttons": [
      {
        "icon": "B",
        "label": "Bold",
        "markdown": "**text**",
        "action": "Wrap selected text or insert at cursor",
        "withSelection": "hello → **hello**",
        "withoutSelection": "| → **|** (cursor between)"
      },
      {
        "icon": "I",
        "label": "Italic",
        "markdown": "*text*",
        "action": "Wrap with *text*",
        "withSelection": "hello → *hello*",
        "withoutSelection": "| → *|*"
      },
      {
        "icon": "H1",
        "label": "Heading 1",
        "markdown": "# heading",
        "action": "Insert # at line start",
        "behavior": "My Title → # My Title"
      },
      {
        "icon": "H2",
        "label": "Heading 2",
        "markdown": "## heading",
        "action": "Insert ## at line start",
        "behavior": "Title → ## Title"
      },
      {
        "icon": "H3",
        "label": "Heading 3",
        "markdown": "### heading",
        "action": "Insert ### at line start",
        "behavior": "Title → ### Title"
      },
      {
        "icon": "•",
        "label": "Bullet List",
        "markdown": "- list item",
        "action": "Insert - at line start",
        "behavior": "Item → - Item",
        "multipleLines": "Each line gets - prefix"
      },
      {
        "icon": "1.",
        "label": "Numbered List",
        "markdown": "1. numbered item",
        "action": "Insert 1. at line start",
        "behavior": "Item → 1. Item"
      },
      {
        "icon": "☑",
        "label": "Checklist",
        "markdown": "- [ ] task",
        "action": "Insert - [ ] at line start",
        "behavior": "Task → - [ ] Task"
      },
      {
        "icon": "🔗",
        "label": "Link",
        "markdown": "[text](url)",
        "action": "Open link dialog modal",
        "modal": {
          "fields": ["Text (pre-filled if selection)", "URL"],
          "insert": "[text](url)",
          "example": "Selected 'Click here' → [Click here](https://url)"
        }
      },
      {
        "icon": "⊞",
        "label": "Table",
        "markdown": "| col | col |",
        "action": "Open table generator modal",
        "modal": {
          "fields": ["Rows (dropdown)", "Columns (dropdown)"],
          "generates": "| Col 1 | Col 2 |\n|-------|-------|\n| Cell  | Cell  |"
        }
      },
      {
        "icon": "⋮",
        "label": "More",
        "action": "Show popup menu",
        "options": [
          "Strikethrough (~~text~~)",
          "Inline Code (`code`)",
          "Code Block (```\\ncode\\n```)",
          "Quote (> text)",
          "Divider (---)"
        ]
      }
    ],
    "textInsertionLogic": {
      "selectionHandling": {
        "hasSelection": "Wrap selected text with markdown syntax",
        "noSelection": "Insert markdown at cursor position"
      },
      "cursorManagement": "Move cursor to appropriate position after insertion",
      "implementation": {
        "trackSelection": "onSelectionChange event tracks start/end",
        "insertText": "Replace substring with markdown-wrapped version",
        "updateCursor": "setNativeProps to position cursor correctly"
      }
    },
    "advancedFeatures": {
      "keyboardShortcuts": {
        "autoConvert": [
          "Type ## + space → Converts to H2 heading",
          "Type - + space → Starts bullet list",
          "Type 1. + space → Starts numbered list",
          "Type [] + space → Creates checkbox - [ ]",
          "Type ``` → Creates code block"
        ],
        "implementation": "Monitor text changes, detect patterns, auto-convert"
      }
    }
  },

  "markdownFeatures": {
    "supported": [
      "Headings (# H1, ## H2, ### H3)",
      "Bold (**text**), Italic (*text*), Strikethrough (~~text~~)",
      "Bullet lists (- item), Numbered lists (1. item)",
      "Checklists (- [ ] task, - [x] done)",
      "Links ([text](url))",
      "Inline code (`code`), Code blocks (``` code ```)",
      "Blockquotes (> quote)",
      "Tables (| col | col |)",
      "Horizontal rules (---)"
    ],
    "limitations": [
      "No text colors (markdown spec limitation)",
      "No font size changes (use headings instead)",
      "Images via links only (upload feature future enhancement)"
    ],
    "htmlExport": {
      "method": "marked(markdown) → HTML string",
      "useCases": [
        "Export as .html file",
        "Email with formatting",
        "Copy as HTML to clipboard",
        "Print preview"
      ],
      "styling": "Includes CSS for tables, code blocks, typography"
    }
  },

  "implementationPhases": {
    "overview": "Sequential phases with task-based completion. Each phase must complete before next begins.",
    "agenticApproach": "No time estimates - complete tasks, verify criteria, move forward",

    "phase0": {
      "name": "Development Environment Isolation",
      "goal": "Setup workspace to build new editor without affecting current app",
      "prerequisite": "None - Starting phase",
      "tasks": [
        {
          "task": "Create isolated component directory structure",
          "details": "Create components/markdown/ directory for all new editor components",
          "verification": "Directory exists, separated from existing components"
        },
        {
          "task": "Create isolated route structure",
          "details": "Create app/note-editor/ directory (separate from current app/note/)",
          "verification": "Routes isolated, can develop without touching current app/note/"
        },
        {
          "task": "Add development-only navigation link",
          "details": "Temporary button in settings to access /note-editor/test route",
          "verification": "Can access new editor for testing without affecting main flow"
        },
        {
          "task": "Verify complete isolation",
          "details": "Confirm no imports/dependencies from new code to old code",
          "verification": "Can build new editor entirely separately, old app unchanged"
        }
      ],
      "completionCriteria": [
        "New component directory structure created",
        "Test routes accessible via dev-only link",
        "No changes to existing note functionality",
        "Can develop new editor without affecting current app"
      ],
      "deliverable": "Isolated development environment ready"
    },

    "phase1": {
      "name": "Core Editor - Edit/Preview Toggle",
      "goal": "Full-screen editor with preview toggle working",
      "prerequisite": "Phase 0 complete - Isolated environment ready",
      "tasks": [
        {
          "task": "Install packages",
          "details": "npm install react-native-markdown-display marked @types/marked",
          "verification": "Package.json updated, no errors on install"
        },
        {
          "task": "Create services/markdown-service.ts",
          "methods": ["renderToComponents()", "renderToHtml()", "renderToDocument()"],
          "verification": "Service exports all methods, basic rendering works"
        },
        {
          "task": "Create utils/note-parser.ts",
          "methods": ["extractTitle()", "parseNote()", "getPreviewText()"],
          "verification": "extractTitle function returns correct title from markdown"
        },
        {
          "task": "Create components/markdown/markdown-renderer.tsx",
          "details": "Wrapper for react-native-markdown-display",
          "verification": "Component accepts markdown string, renders with styling"
        },
        {
          "task": "Create components/markdown/markdown-editor.tsx",
          "details": "Main editor with edit/preview toggle state",
          "features": ["TextInput for edit mode", "MarkdownRenderer for preview mode", "Toggle button", "Auto-focus"],
          "verification": "Can switch between edit and preview modes smoothly"
        },
        {
          "task": "Create app/note/new.tsx",
          "details": "Full-screen route for new notes with blank editor, auto-focus",
          "verification": "Route accessible, blank editor appears, cursor auto-focuses"
        },
        {
          "task": "Create app/note/[id].tsx",
          "details": "Full-screen route for editing existing notes",
          "verification": "Route loads note by ID, content editable"
        },
        {
          "task": "Implement auto-save with useEffect + debounce",
          "details": "Save after 1000ms of no typing",
          "verification": "Saves trigger after typing stops, no data loss"
        },
        {
          "task": "Update components/note-item.tsx",
          "details": "Use markdown-renderer for preview instead of raw text",
          "verification": "Note list shows formatted markdown, plain text still works"
        },
        {
          "task": "Wire navigation from app/(tabs)/index.tsx",
          "details": "Add new routes alongside old modal (parallel systems)",
          "verification": "Can navigate to new routes, old modal still accessible"
        }
      ],
      "completionCriteria": [
        "Navigating to /note/new shows blank editor with cursor",
        "Navigating to /note/[id] loads note content",
        "Edit/Preview toggle switches modes correctly",
        "Preview mode shows fully formatted markdown",
        "Edit mode shows plain markdown syntax",
        "Auto-save triggers after typing stops",
        "Back button returns to list",
        "Note list shows formatted previews",
        "Plain text notes still display correctly",
        "Old modal still works for fallback"
      ],
      "deliverable": "Working full-screen editor with edit/preview toggle"
    },

    "phase2": {
      "name": "Toolbar, Export, Migration",
      "goal": "Add formatting toolbar, export features, make new editor default",
      "prerequisite": "Phase 1 complete - Edit/preview toggle working",
      "tasks": [
        {
          "task": "Create components/markdown/markdown-toolbar.tsx",
          "details": "Basic buttons: B, I, H1-H3, List, Code",
          "verification": "Toolbar renders, buttons trigger correct actions"
        },
        {
          "task": "Implement text insertion logic",
          "details": "Handle selection wrapping and cursor positioning",
          "verification": "Buttons insert markdown syntax correctly with/without selection"
        },
        {
          "task": "Create components/markdown/table-generator-modal.tsx",
          "details": "Visual grid picker for rows/columns",
          "verification": "Modal opens, generates valid markdown table"
        },
        {
          "task": "Create components/markdown/link-dialog-modal.tsx",
          "details": "Text + URL inputs for link creation",
          "verification": "Modal opens, inserts proper markdown link"
        },
        {
          "task": "Add table (⊞) and link (🔗) buttons to toolbar",
          "details": "Buttons open respective modals",
          "verification": "Buttons open modals, modals insert correct markdown"
        },
        {
          "task": "Add keyboard shortcuts",
          "details": "## → heading, - → list auto-conversion",
          "verification": "Keyboard shortcuts convert text automatically"
        },
        {
          "task": "Implement HTML export",
          "details": "Add export button in preview mode, generate HTML document",
          "verification": "Export generates valid HTML with styling"
        },
        {
          "task": "Add simple feature flag",
          "details": "const USE_MARKDOWN_EDITOR = true; // Toggle in one place to switch editors",
          "verification": "Can switch between old and new editor by changing one boolean"
        },
        {
          "task": "Create error boundary wrapper",
          "details": "Wrap new editor with error boundary that falls back to old editor on crash",
          "verification": "Simulated error switches to old editor gracefully with toast message"
        },
        {
          "task": "Update app/(tabs)/index.tsx navigation",
          "details": "New Note button → navigate to /note/new (not modal) if USE_MARKDOWN_EDITOR === true",
          "verification": "Feature flag controls which editor is used"
        },
        {
          "task": "Update note tap behavior",
          "details": "Navigate to /note/[id] instead of opening modal",
          "verification": "Tapping note opens full-screen editor"
        },
        {
          "task": "Add slide-in animation to editor routes",
          "details": "Smooth transition from list to editor",
          "verification": "Smooth slide-in animation on editor open"
        },
        {
          "task": "Move old modal to archive",
          "details": "components/note-modal.tsx → components/archive/note-modal.tsx",
          "verification": "Old components moved to archive/ folder"
        },
        {
          "task": "Move old form to archive",
          "details": "components/note-form.tsx → components/archive/note-form.tsx",
          "verification": "Old form moved to archive/ folder"
        },
        {
          "task": "Remove all imports/references to archived components",
          "details": "Clean up imports in active code",
          "verification": "No imports or usage of old modal in active code"
        },
        {
          "task": "Update documentation",
          "details": "Update SCHEMA.md, README.md with new editor flow",
          "verification": "Documentation accurate and complete"
        }
      ],
      "completionCriteria": [
        "Toolbar buttons insert markdown syntax correctly",
        "Table modal generates valid markdown tables",
        "Link modal inserts [text](url) correctly",
        "Keyboard shortcuts work reliably",
        "HTML export generates valid documents",
        "Feature flag successfully switches between editors",
        "Error boundary catches crashes and falls back to old editor",
        "New editor is default when flag is enabled",
        "No active code references old modal",
        "Animations smooth on all platforms",
        "Documentation updated and accurate",
        "All tests passing (iOS, Android, Web)"
      ],
      "deliverable": "Full-featured markdown editor as default system"
    }
  },

  "codeExamples": {
    "markdownService": "// services/markdown-service.ts\nimport { marked } from 'marked';\nimport Markdown from 'react-native-markdown-display';\n\nexport const markdownService = {\n  renderToComponents(markdown: string): JSX.Element {\n    return <Markdown>{markdown}</Markdown>;\n  },\n\n  renderToHtml(markdown: string): string {\n    return marked(markdown);\n  },\n\n  renderToDocument(title: string, markdown: string): string {\n    return `<!DOCTYPE html>\\n<html>\\n<head>\\n<title>${title}</title>\\n<style>body { font-family: sans-serif; max-width: 800px; margin: 40px auto; }</style>\\n</head>\\n<body>\\n${marked(markdown)}\\n</body>\\n</html>`;\n  }\n};",

    "noteParser": "// utils/note-parser.ts\nexport function extractTitle(markdown: string): string {\n  const lines = markdown.trim().split('\\n');\n  const firstLine = lines[0]?.trim() || '';\n\n  if (firstLine.startsWith('#')) {\n    return firstLine.replace(/^#+\\s*/, ''); // Remove # symbols\n  }\n\n  if (firstLine) {\n    return firstLine.substring(0, 500); // Limit to VARCHAR(500)\n  }\n\n  return `Note ${new Date().toLocaleString()}`; // Fallback\n}\n\nexport function parseNote(markdown: string) {\n  return {\n    title: extractTitle(markdown),\n    content: markdown\n  };\n}\n\nexport function getPreviewText(markdown: string, maxLength = 100): string {\n  const lines = markdown.split('\\n');\n  const contentLines = lines.slice(1); // Skip title line\n  return contentLines.join(' ').substring(0, maxLength);\n}",

    "markdownEditor": "// components/markdown/markdown-editor.tsx\nimport { useState } from 'react';\nimport { View, TextInput, TouchableOpacity, Text } from 'react-native';\nimport { MarkdownRenderer } from './markdown-renderer';\nimport { useThemeColors } from '@/hooks/use-theme-colors';\n\ninterface MarkdownEditorProps {\n  value: string;\n  onChange: (text: string) => void;\n  onSelectionChange?: (selection: { start: number; end: number }) => void;\n}\n\nexport function MarkdownEditor({ value, onChange, onSelectionChange }: MarkdownEditorProps) {\n  const [mode, setMode] = useState<'edit' | 'preview'>('edit');\n  const { colors } = useThemeColors();\n\n  return (\n    <View style={{ flex: 1 }}>\n      {/* Toggle Button */}\n      <View style={{ flexDirection: 'row', justifyContent: 'flex-end', padding: 12 }}>\n        <TouchableOpacity onPress={() => setMode(mode === 'edit' ? 'preview' : 'edit')}>\n          <Text style={{ color: colors.tint, fontWeight: '600' }}>\n            {mode === 'edit' ? 'Preview' : 'Edit'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Edit Mode */}\n      {mode === 'edit' && (\n        <TextInput\n          value={value}\n          onChangeText={onChange}\n          onSelectionChange={(e) => onSelectionChange?.(e.nativeEvent.selection)}\n          multiline\n          autoFocus\n          placeholder=\"Start typing...\"\n          style={{ flex: 1, padding: 16, color: colors.text }}\n        />\n      )}\n\n      {/* Preview Mode */}\n      {mode === 'preview' && (\n        <MarkdownRenderer markdown={value} />\n      )}\n    </View>\n  );\n}",

    "newNoteScreen": "// app/note/new.tsx\nimport { useState, useEffect } from 'react';\nimport { KeyboardAvoidingView, Platform } from 'react-native';\nimport { MarkdownEditor } from '@/components/markdown/markdown-editor';\nimport { MarkdownToolbar } from '@/components/markdown/markdown-toolbar';\nimport { useRouter } from 'expo-router';\nimport { notesService } from '@/services/notes';\nimport { extractTitle } from '@/utils/note-parser';\n\nexport default function NewNoteScreen() {\n  const [content, setContent] = useState('');\n  const [selection, setSelection] = useState({ start: 0, end: 0 });\n  const router = useRouter();\n\n  // Auto-save\n  useEffect(() => {\n    if (!content.trim()) return;\n    const timer = setTimeout(async () => {\n      const title = extractTitle(content);\n      await notesService.createNote(title, content);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [content]);\n\n  const handleInsert = (before: string, after: string) => {\n    const { start, end } = selection;\n    const selectedText = content.substring(start, end);\n    if (start !== end) {\n      const newContent = content.substring(0, start) + before + selectedText + after + content.substring(end);\n      setContent(newContent);\n    } else {\n      const newContent = content.substring(0, start) + before + after + content.substring(start);\n      setContent(newContent);\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView \n      style={{ flex: 1 }} \n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <MarkdownEditor \n        value={content} \n        onChange={setContent}\n        onSelectionChange={setSelection}\n      />\n      <MarkdownToolbar onInsert={handleInsert} />\n    </KeyboardAvoidingView>\n  );\n}",

    "markdownToolbar": "// components/markdown/markdown-toolbar.tsx\nimport { View, TouchableOpacity, Text, StyleSheet } from 'react-native';\nimport { useThemeColors } from '@/hooks/use-theme-colors';\n\ninterface MarkdownToolbarProps {\n  onInsert: (before: string, after: string) => void;\n}\n\nexport function MarkdownToolbar({ onInsert }: MarkdownToolbarProps) {\n  const { colors } = useThemeColors();\n\n  return (\n    <View style={[styles.toolbar, { backgroundColor: colors.surface, borderTopColor: colors.border }]}>\n      <ToolbarButton text=\"B\" onPress={() => onInsert('**', '**')} />\n      <ToolbarButton text=\"I\" onPress={() => onInsert('*', '*')} />\n      <ToolbarButton text=\"H1\" onPress={() => onInsert('# ', '')} />\n      <ToolbarButton text=\"•\" onPress={() => onInsert('- ', '')} />\n    </View>\n  );\n}\n\nfunction ToolbarButton({ text, onPress }) {\n  const { colors } = useThemeColors();\n  return (\n    <TouchableOpacity style={styles.button} onPress={onPress}>\n      <Text style={[styles.buttonText, { color: colors.text }]}>{text}</Text>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  toolbar: {\n    flexDirection: 'row',\n    borderTopWidth: 1,\n    paddingHorizontal: 8,\n    paddingVertical: 8,\n    gap: 8,\n  },\n  button: {\n    width: 40,\n    height: 40,\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});",

    "errorBoundary": "// components/markdown/markdown-editor-boundary.tsx\nimport React, { Component, ReactNode } from 'react';\nimport { toast } from 'sonner-native';\n\ninterface Props {\n  children: ReactNode;\n  fallback: ReactNode; // Old editor component\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class MarkdownEditorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error) {\n    console.error('Markdown editor crashed:', error);\n    toast.error('Editor error - switched to legacy mode');\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback;\n    }\n    return this.props.children;\n  }\n}\n\n// Usage:\n// <MarkdownEditorBoundary fallback={<LegacyNoteModal />}>\n//   <MarkdownEditor />\n// </MarkdownEditorBoundary>",

    "featureFlag": "// lib/feature-flags.ts\nexport const FeatureFlags = {\n  USE_MARKDOWN_EDITOR: true, // Toggle to switch between old and new editor\n};\n\n// In app/(tabs)/index.tsx:\nimport { FeatureFlags } from '@/lib/feature-flags';\nimport { MarkdownEditorBoundary } from '@/components/markdown/markdown-editor-boundary';\n\nfunction handleNewNote() {\n  if (FeatureFlags.USE_MARKDOWN_EDITOR) {\n    router.push('/note/new'); // New markdown editor\n  } else {\n    setShowModal(true); // Old modal\n  }\n}\n\n// Wrap new editor with boundary:\nif (FeatureFlags.USE_MARKDOWN_EDITOR) {\n  return (\n    <MarkdownEditorBoundary fallback={<NoteModal />}>\n      <MarkdownEditor />\n    </MarkdownEditorBoundary>\n  );\n}"
  },

  "testingStrategy": {
    "phase1Tests": [
      "Navigate to /note/new, verify blank editor appears with cursor focused",
      "Type markdown syntax: **bold**, # heading, - list",
      "Tap 'Preview' button, verify formatted output (bold text, large heading, bullet list)",
      "Tap 'Edit' button, verify raw markdown appears again",
      "Type content, wait 2s, navigate back, verify note saved",
      "Create test note with markdown: '# Title\\n**Bold** text'",
      "Verify note list shows formatted preview",
      "Verify plain text note 'Plain note' still displays",
      "Check console for errors"
    ],
    "phase2Tests": [
      "Tap B button, verify ** inserted around selection or at cursor",
      "Tap H1 button, verify # inserted at line start",
      "Tap table button, select 3x3, verify table generated",
      "Tap link button, enter text/URL, verify link inserted",
      "Type '## ' and space, verify converts to heading",
      "Tap export button in preview mode, verify HTML generated",
      "Verify all 'New Note' actions use new editor",
      "Verify old modal components in archive/ folder",
      "Test on iOS device, Android device, Web browser",
      "Verify no console errors or warnings"
    ]
  },

  "rollbackStrategy": {
    "featureFlag": {
      "implementation": "const USE_NEW_EDITOR = true; // Toggle to rollback",
      "location": "app/(tabs)/index.tsx",
      "behavior": "If false, use old modal; if true, use new editor"
    },
    "archiveApproach": {
      "before": "Move old components to components/archive/",
      "during": "Keep both systems working with feature flag",
      "after": "Delete archived components after 1-2 release cycles"
    },
    "dataIntegrity": "No database changes means instant rollback with no data loss"
  },

  "successCriteria": {
    "functionality": [
      "Users can create notes with markdown syntax",
      "Users can toggle between edit and preview modes",
      "Users can edit existing notes",
      "Toolbar provides easy formatting without knowing markdown",
      "Auto-save prevents data loss",
      "Old plain text notes display correctly",
      "HTML export works correctly"
    ],
    "performance": [
      "Editor opens instantly with cursor ready",
      "Preview toggle switches modes smoothly",
      "Auto-save doesn't block typing",
      "Smooth animations on all platforms"
    ],
    "quality": [
      "No console errors or warnings",
      "Works on iOS, Android, and Web",
      "Code follows project conventions",
      "Documentation updated and accurate"
    ]
  },

  "futureUpgrades": {
    "livePreview": {
      "when": "If users request seeing formatted text while typing",
      "approach": "Add react-native-live-markdown for hybrid mode",
      "effort": "Moderate - add package, update editor component",
      "dataMigration": "None - markdown storage unchanged"
    },
    "customParser": {
      "when": "If users want Bear-style syntax hiding (hide syntax after Enter)",
      "approach": "Build custom line-by-line parser with focus detection",
      "effort": "High - complex custom implementation",
      "dataMigration": "None - markdown storage unchanged"
    },
    "pureWYSIWYG": {
      "when": "If users prefer Word-style editor with no syntax",
      "approach": "Integrate rich text editor, store as HTML or convert to markdown",
      "effort": "Very High - major architectural change",
      "dataMigration": "Possibly needed if switching from markdown to HTML storage"
    },
    "additionalFeatures": [
      "Image upload and embedding",
      "Syntax highlighting for code blocks",
      "Collaborative editing (real-time)",
      "Version history / undo/redo",
      "Custom markdown plugins",
      "Diagram support (mermaid)",
      "Math equations (KaTeX)",
      "Voice-to-text markdown"
    ]
  },

  "troubleshooting": {
    "packageInstallFails": "Try: npm install --legacy-peer-deps or check React Native version compatibility",
    "markdownNotRendering": "Check: import statements correct, MarkdownDisplay props configured, NativeWind conflicts",
    "autoSaveNotWorking": "Check: useEffect dependencies, debounce timer cleanup, notesService methods",
    "toolbarNotVisible": "Check: KeyboardAvoidingView behavior prop, platform-specific keyboard handling",
    "navigationIssues": "Check: Expo Router file structure, navigation imports, screen options",
    "previewNotFormatting": "Check: MarkdownDisplay component setup, markdown syntax validity, styles applied"
  },

  "references": {
    "packages": {
      "reactNativeMarkdownDisplay": "https://github.com/iamacup/react-native-markdown-display",
      "marked": "https://marked.js.org/"
    },
    "inspiration": {
      "obsidian": "https://obsidian.md/ - Preview toggle style",
      "iaWriter": "https://ia.net/writer - Clean markdown editor",
      "typora": "https://typora.io/ - Live preview approach"
    }
  }
}
