{
  "title": "Settings Page Refactor - Component Extraction",
  "dateCreated": "2025-10-02",
  "dateUpdated": "2025-10-02",
  "status": "ready-to-implement",
  "priority": "medium",
  "description": "Refactor settings page to use imported card components with universal Card wrapper",
  "pattern": "Same pattern as info page - extract sections into dedicated components using Card component",

  "prerequisites": {
    "completed": [
      "Universal Card component created (components/common/card.tsx)",
      "Info cards migrated to use Card wrapper",
      "Note cards migrated to use Card wrapper"
    ],
    "ready": "Card component standardization complete - ready to apply to settings"
  },

  "current_structure": {
    "file": "app/(tabs)/settings.tsx",
    "lineCount": 242,
    "sections": [
      {
        "name": "Theme",
        "lines": "43-95",
        "contains": [
          "Error banner (if loadError)",
          "Theme selector button with color preview dots",
          "Dark mode toggle switch"
        ]
      },
      {
        "name": "Profile",
        "lines": "97-104",
        "contains": [
          "User email display"
        ]
      },
      {
        "name": "Account",
        "lines": "106-118",
        "contains": [
          "Sign out button"
        ]
      },
      {
        "name": "Modals",
        "lines": "120-136",
        "contains": [
          "ConfirmationModal for sign out",
          "ThemePickerModal for theme selection"
        ]
      }
    ],
    "issues": [
      "All logic and UI is inline in settings.tsx",
      "240+ lines in single file",
      "Duplicate card structure styles (section, sectionTitle, etc.)",
      "Hard to test individual sections",
      "Settings page does orchestration AND rendering"
    ]
  },

  "proposed_structure": {
    "components_folder": "components/settings-cards/",
    "files": [
      {
        "name": "theme-settings-card.tsx",
        "purpose": "Theme selection and dark mode toggle",
        "contains": [
          "Theme picker button with color preview dots (3 dots: background, surface, tint)",
          "Dark mode toggle switch",
          "Theme error banner (conditional)",
          "Card wrapper with 'Theme' header"
        ],
        "imports": [
          "React (useState)",
          "React Native (View, Text, TouchableOpacity, Switch, StyleSheet)",
          "useThemeController from @/contexts/theme-controller",
          "useThemeColors from @/hooks/use-theme-colors",
          "Card from @/components/common/card",
          "Themes from @/constants/theme"
        ],
        "props": {
          "onOpenThemePicker": {
            "type": "() => void",
            "description": "Callback to open theme picker modal (managed at page level)"
          }
        },
        "state": [
          "None - all state managed by useThemeController hook or page level"
        ],
        "componentAPI": "export function ThemeSettingsCard({ onOpenThemePicker }: { onOpenThemePicker: () => void })",
        "usesCardComponent": true,
        "cardProps": {
          "isAccordion": false,
          "headerContent": "<Text>Theme</Text>",
          "children": "Theme picker button + dark mode toggle + error banner"
        }
      },
      {
        "name": "profile-settings-card.tsx",
        "purpose": "Display user profile information",
        "contains": [
          "User email display",
          "Card wrapper with 'Profile' header"
        ],
        "imports": [
          "React Native (View, Text, StyleSheet)",
          "useAuth from @/hooks/use-auth",
          "useThemeColors from @/hooks/use-theme-colors",
          "Card from @/components/common/card"
        ],
        "props": "None - self-contained, uses useAuth hook",
        "state": "None - reads from useAuth hook",
        "componentAPI": "export function ProfileSettingsCard()",
        "usesCardComponent": true,
        "cardProps": {
          "isAccordion": false,
          "headerContent": "<Text>Profile</Text>",
          "children": "Email display row"
        }
      },
      {
        "name": "account-settings-card.tsx",
        "purpose": "Account actions (sign out)",
        "contains": [
          "Sign out button",
          "Card wrapper with 'Account' header"
        ],
        "imports": [
          "React Native (TouchableOpacity, Text, StyleSheet)",
          "useThemeColors from @/hooks/use-theme-colors",
          "Card from @/components/common/card"
        ],
        "props": {
          "onSignOut": {
            "type": "() => void",
            "description": "Callback to trigger sign out confirmation (managed at page level)"
          },
          "isSigningOut": {
            "type": "boolean",
            "description": "Loading state for sign out button"
          }
        },
        "state": "None - state managed at page level",
        "componentAPI": "export function AccountSettingsCard({ onSignOut, isSigningOut }: { onSignOut: () => void; isSigningOut: boolean })",
        "usesCardComponent": true,
        "cardProps": {
          "isAccordion": false,
          "headerContent": "<Text>Account</Text>",
          "children": "Sign out button"
        }
      }
    ],
    "settings_page": {
      "file": "app/(tabs)/settings.tsx",
      "newLineCount": "~80-100 lines (60% reduction)",
      "becomes": "Layout orchestrator that manages modal state and arranges card components",
      "imports": [
        "ThemeSettingsCard from @/components/settings-cards/theme-settings-card",
        "ProfileSettingsCard from @/components/settings-cards/profile-settings-card",
        "AccountSettingsCard from @/components/settings-cards/account-settings-card",
        "SharedPageLayout",
        "ConfirmationModal",
        "ThemePickerModal",
        "useThemeController",
        "useAuth",
        "router from expo-router"
      ],
      "state": [
        "showThemePicker (boolean) - controls ThemePickerModal visibility",
        "showSignOutModal (boolean) - controls ConfirmationModal visibility",
        "isSigningOut (boolean) - sign out loading state"
      ],
      "structure": "SharedPageLayout wrapper with 3 card components + 2 modals at bottom",
      "responsibilities": [
        "Manage modal visibility state",
        "Handle theme selection (setTheme callback)",
        "Handle sign out flow (confirmSignOut function)",
        "Render modals at page level",
        "Pass callbacks to card components"
      ]
    }
  },

  "modalManagementPattern": {
    "principle": "Modals render at page level, cards trigger via callbacks",
    "reasoning": [
      "Modals overlay entire screen (not card-specific)",
      "Multiple cards might trigger same modal type",
      "Cleaner separation: card triggers, page manages",
      "Page owns navigation flow (router.replace after sign out)",
      "Easier to test: cards are pure UI, page handles side effects"
    ],
    "flow": {
      "themePickerFlow": [
        "1. ThemeSettingsCard renders button",
        "2. User clicks → calls onOpenThemePicker() prop",
        "3. Page receives callback → setShowThemePicker(true)",
        "4. ThemePickerModal appears (visible={showThemePicker})",
        "5. User selects theme → onSelectTheme(themeName)",
        "6. Page calls setTheme(themeName) from useThemeController",
        "7. Modal closes → setShowThemePicker(false)"
      ],
      "signOutFlow": [
        "1. AccountSettingsCard renders sign out button",
        "2. User clicks → calls onSignOut() prop",
        "3. Page receives callback → setShowSignOutModal(true)",
        "4. ConfirmationModal appears (visible={showSignOutModal})",
        "5. User confirms → onConfirm() → confirmSignOut()",
        "6. Page calls signOut() → router.replace('/auth')",
        "7. Modal closes → setShowSignOutModal(false)"
      ]
    },
    "visualStructure": "Card UI (button) → callback to page → page sets state → modal renders"
  },

  "cardComponentUsage": {
    "componentPath": "components/common/card.tsx",
    "propsUsed": {
      "isAccordion": false,
      "headerContent": "Section title (Theme, Profile, Account)",
      "children": "Section content (buttons, toggles, displays)"
    },
    "benefits": [
      "Identical sizing to info/note cards (borderWidth: 1, borderRadius: 12, padding: 16)",
      "Header bottom border for visual separation",
      "No duplicate card structure code",
      "Universal Card component = single source of truth for ALL cards in app"
    ],
    "settingsCardType": "Static cards (isAccordion={false}) - content always visible"
  },

  "card_type": "Regular cards (NOT accordion)",
  "reasoning": [
    "Settings need to be quickly accessible",
    "Each section is already compact",
    "Users need to see all options at once",
    "No need for expand/collapse - just clean separation",
    "Matches settings page UX conventions"
  ],

  "benefits": [
    "Each settings section is self-contained and reusable",
    "Easier to add/remove settings sections",
    "Settings page becomes simple layout orchestrator (~60% code reduction)",
    "Consistent with info page pattern",
    "Better separation of concerns (UI vs logic)",
    "Easier testing and maintenance",
    "Universal card sizing across entire app (info, notes, settings)",
    "No duplicate card structure styles"
  ],

  "implementationPlan": {
    "phase1": {
      "name": "Create Theme Settings Card",
      "tasks": [
        {
          "id": "1.1",
          "task": "Create components/settings-cards/theme-settings-card.tsx",
          "details": [
            "Import Card component and hooks",
            "Extract theme section UI (lines 43-95 from settings.tsx)",
            "Wrap with Card (isAccordion={false})",
            "Header: 'Theme' text",
            "Children: error banner + theme picker button + dark mode toggle",
            "Accept onOpenThemePicker callback prop",
            "Use useThemeController for theme state",
            "Keep theme-specific styles (themeSelectorButton, previewDot, etc.)"
          ]
        },
        {
          "id": "1.2",
          "task": "Test ThemeSettingsCard in isolation",
          "details": [
            "Verify theme picker button renders with preview dots",
            "Verify dark mode toggle works",
            "Verify error banner shows when loadError present",
            "Check Card wrapper styling matches info cards"
          ]
        }
      ]
    },
    "phase2": {
      "name": "Create Profile Settings Card",
      "tasks": [
        {
          "id": "2.1",
          "task": "Create components/settings-cards/profile-settings-card.tsx",
          "details": [
            "Import Card component and useAuth hook",
            "Extract profile section UI (lines 97-104 from settings.tsx)",
            "Wrap with Card (isAccordion={false})",
            "Header: 'Profile' text",
            "Children: email display row",
            "Use useAuth hook for user data",
            "Keep profile-specific styles (debugRow, debugLabel, debugValue)"
          ]
        },
        {
          "id": "2.2",
          "task": "Test ProfileSettingsCard",
          "details": [
            "Verify email displays correctly",
            "Verify fallback 'None' shows when no user",
            "Check Card wrapper styling"
          ]
        }
      ]
    },
    "phase3": {
      "name": "Create Account Settings Card",
      "tasks": [
        {
          "id": "3.1",
          "task": "Create components/settings-cards/account-settings-card.tsx",
          "details": [
            "Import Card component",
            "Extract account section UI (lines 106-118 from settings.tsx)",
            "Wrap with Card (isAccordion={false})",
            "Header: 'Account' text",
            "Children: sign out button",
            "Accept onSignOut callback and isSigningOut boolean props",
            "Keep account-specific styles (signOutButton, signOutText)"
          ]
        },
        {
          "id": "3.2",
          "task": "Test AccountSettingsCard",
          "details": [
            "Verify sign out button renders",
            "Verify loading state ('Signing Out...' text)",
            "Verify button disabled during sign out",
            "Check Card wrapper styling"
          ]
        }
      ]
    },
    "phase4": {
      "name": "Refactor Settings Page",
      "tasks": [
        {
          "id": "4.1",
          "task": "Update app/(tabs)/settings.tsx to use card components",
          "details": [
            "Import all 3 settings card components",
            "Remove inline section UI (keep only state and handlers)",
            "Replace View sections with card components",
            "Pass callbacks: onOpenThemePicker, onSignOut",
            "Pass state: isSigningOut",
            "Keep modals at page level (ConfirmationModal, ThemePickerModal)",
            "Remove section/sectionTitle/settingRow base styles (provided by Card)",
            "Keep modal state management (showThemePicker, showSignOutModal, isSigningOut)",
            "Keep handlers (handleSignOut, confirmSignOut)"
          ]
        },
        {
          "id": "4.2",
          "task": "Test full settings page flow",
          "details": [
            "Test theme picker modal opens and closes",
            "Test theme selection works",
            "Test dark mode toggle works",
            "Test sign out confirmation modal",
            "Test sign out flow (redirects to /auth)",
            "Verify all 3 cards have identical sizing",
            "Compare card heights with info/note cards"
          ]
        }
      ]
    },
    "phase5": {
      "name": "Cleanup and Documentation",
      "tasks": [
        {
          "id": "5.1",
          "task": "Remove unused styles from settings.tsx",
          "details": [
            "Remove section, sectionTitle, settingRow (now in Card)",
            "Keep modal-specific styles if needed",
            "Verify no orphaned style references"
          ]
        },
        {
          "id": "5.2",
          "task": "Update CHANGELOG.md",
          "details": [
            "Document settings page refactor",
            "Note card component standardization complete",
            "Mention code reduction (~60%)"
          ]
        },
        {
          "id": "5.3",
          "task": "Update settingpage-refactor.json status",
          "details": [
            "Mark status as 'completed'",
            "Add completion date",
            "Note any deviations from plan"
          ]
        }
      ]
    }
  },

  "codeExamples": {
    "themeSettingsCard": {
      "structure": "// components/settings-cards/theme-settings-card.tsx\nimport { useState } from 'react';\nimport { View, Text, TouchableOpacity, Switch, StyleSheet } from 'react-native';\nimport { useThemeController } from '@/contexts/theme-controller';\nimport { useThemeColors } from '@/hooks/use-theme-colors';\nimport { Card } from '@/components/common/card';\nimport { Themes } from '@/constants/theme';\n\ninterface ThemeSettingsCardProps {\n  onOpenThemePicker: () => void;\n}\n\nexport function ThemeSettingsCard({ onOpenThemePicker }: ThemeSettingsCardProps) {\n  const { themeName, colorScheme, resolvedScheme, setColorScheme, isLoading, loadError } = useThemeController();\n  const { colors } = useThemeColors();\n\n  const handleThemeToggle = (value: boolean) => {\n    setColorScheme(value ? 'dark' : 'light');\n  };\n\n  return (\n    <Card\n      isAccordion={false}\n      headerContent={<Text style={{ color: colors.textSecondary }}>THEME</Text>}\n    >\n      {loadError && (\n        <View style={[styles.errorBanner, { backgroundColor: colors.surface, borderColor: '#ff6b6b' }]}>\n          {/* Error banner UI */}\n        </View>\n      )}\n\n      <TouchableOpacity\n        style={styles.themeSelectorButton}\n        onPress={onOpenThemePicker}\n      >\n        {/* Preview dots + theme name */}\n      </TouchableOpacity>\n\n      <View style={styles.settingRow}>\n        {/* Dark mode toggle */}\n      </View>\n    </Card>\n  );\n}"
    },
    "settingsPageRefactored": {
      "structure": "// app/(tabs)/settings.tsx\nimport { ThemeSettingsCard } from '@/components/settings-cards/theme-settings-card';\nimport { ProfileSettingsCard } from '@/components/settings-cards/profile-settings-card';\nimport { AccountSettingsCard } from '@/components/settings-cards/account-settings-card';\n\nexport default function SettingsScreen() {\n  const [showThemePicker, setShowThemePicker] = useState(false);\n  const [showSignOutModal, setShowSignOutModal] = useState(false);\n  const [isSigningOut, setIsSigningOut] = useState(false);\n  const { setTheme } = useThemeController();\n  const { signOut } = useAuth();\n\n  const handleSignOut = () => setShowSignOutModal(true);\n  const confirmSignOut = async () => { /* sign out logic */ };\n\n  return (\n    <SharedPageLayout scrollable={true}>\n      <ThemeSettingsCard onOpenThemePicker={() => setShowThemePicker(true)} />\n      <ProfileSettingsCard />\n      <AccountSettingsCard onSignOut={handleSignOut} isSigningOut={isSigningOut} />\n\n      <ThemePickerModal\n        visible={showThemePicker}\n        onSelectTheme={setTheme}\n        onClose={() => setShowThemePicker(false)}\n      />\n\n      <ConfirmationModal\n        visible={showSignOutModal}\n        onConfirm={confirmSignOut}\n        onCancel={() => setShowSignOutModal(false)}\n      />\n    </SharedPageLayout>\n  );\n}"
    }
  },

  "fileMigrationMap": {
    "settings.tsx": {
      "before": "242 lines - all inline",
      "after": "~80-100 lines - orchestration only",
      "extracted": {
        "theme-settings-card.tsx": "Lines 43-95 (theme section)",
        "profile-settings-card.tsx": "Lines 97-104 (profile section)",
        "account-settings-card.tsx": "Lines 106-118 (account section)"
      },
      "remains": [
        "Imports",
        "State management (showThemePicker, showSignOutModal, isSigningOut)",
        "Handlers (handleSignOut, confirmSignOut)",
        "Card component imports and rendering",
        "Modal components (ThemePickerModal, ConfirmationModal)"
      ]
    }
  },

  "estimatedDuration": "3-5 hours",

  "successCriteria": {
    "visual": [
      "All settings cards have identical sizing to info/note cards",
      "Headers align perfectly",
      "Borders, padding, radius match exactly",
      "No visual regressions"
    ],
    "functional": [
      "Theme picker modal opens and works",
      "Dark mode toggle works",
      "Sign out flow works (modal → sign out → redirect)",
      "Error banner shows when theme fails to load",
      "No console errors or warnings"
    ],
    "code": [
      "Settings page reduced from 242 to ~80-100 lines",
      "No duplicate card structure styles",
      "All 3 settings cards self-contained and testable",
      "TypeScript compiles without errors",
      "Follows universal Card component pattern"
    ]
  },

  "notes": [
    "Unlike info page which uses accordion cards, settings uses static cards (isAccordion={false})",
    "All settings should be visible at once for quick access",
    "Universal Card component ensures visual consistency across entire app",
    "Modals managed at page level, not in cards (cleaner separation)",
    "This completes card standardization: info cards, note cards, and settings cards all use Card wrapper"
  ]
}
