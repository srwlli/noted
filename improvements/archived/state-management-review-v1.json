{
  "title": "State Management Review: New Notes Not Appearing Without Refresh",
  "version": "1.1",
  "date": "2025-10-08",
  "status": "Implemented",
  "severity": "High - RESOLVED",

  "root_cause": {
    "summary": "The notes list doesn't refresh when navigating back from creating a new note because router.back() doesn't trigger the useEffect dependencies in the notes screen.",
    "details": [
      "Notes screen only re-renders when selectedFolderId changes",
      "router.back() from editor doesn't modify any state dependencies",
      "No mechanism exists to detect navigation events or note creation",
      "Auto-save creates notes in DB but doesn't notify parent component"
    ],
    "affected_files": [
      "app/(tabs)/notes.tsx",
      "app/note-editor/new.tsx",
      "app/note-editor/[id].tsx"
    ]
  },

  "current_flow": {
    "steps": [
      "1. User clicks 'New Note' → navigates to /note-editor/new",
      "2. Auto-save creates note in database (new.tsx:56)",
      "3. User clicks back → router.back() (new.tsx:169)",
      "4. Notes screen doesn't refresh (selectedFolderId unchanged)"
    ],
    "problematic_code_locations": {
      "notes_screen_effect": "app/(tabs)/notes.tsx:28-55 (useEffect only depends on selectedFolderId)",
      "new_note_back_button": "app/note-editor/new.tsx:169 (router.back() with no state update)",
      "edit_note_back_button": "app/note-editor/[id].tsx:203, 231, 258 (same issue)"
    }
  },

  "state_management_issues": [
    {
      "component": "app/(tabs)/notes.tsx",
      "current_refresh_mechanism": "useEffect on selectedFolderId only",
      "issue": "Doesn't detect navigation events or new note creation"
    },
    {
      "component": "app/note-editor/new.tsx",
      "current_refresh_mechanism": "Auto-saves to DB",
      "issue": "Doesn't notify parent component"
    },
    {
      "component": "app/note-editor/[id].tsx",
      "current_refresh_mechanism": "Auto-saves to DB",
      "issue": "Same as new.tsx - no parent notification"
    }
  ],

  "why_some_actions_work": {
    "edit_from_note_item": "Calls onEdit={loadNotes} (notes.tsx:219)",
    "delete": "Calls loadNotes() after deletion (notes.tsx:109)",
    "back_navigation": "DOESN'T WORK - no trigger mechanism"
  },

  "solutions": {
    "option_1_focus_based_refresh": {
      "name": "Focus-Based Refresh (RECOMMENDED)",
      "description": "Use Expo Router's useFocusEffect to reload notes when screen regains focus",
      "pros": [
        "Simple implementation (5 lines of code)",
        "Works for all navigation scenarios",
        "Standard React Native pattern",
        "Minimal code changes"
      ],
      "cons": [
        "Extra API call on every screen focus"
      ],
      "implementation": {
        "file": "app/(tabs)/notes.tsx",
        "location": "After line 55 (after existing useEffect)",
        "code": "import { useFocusEffect } from 'expo-router';\n\nuseFocusEffect(\n  React.useCallback(() => {\n    if (!loading) {\n      handleRefresh();\n    }\n  }, [selectedFolderId])\n);"
      },
      "estimated_effort": "5 minutes",
      "risk": "Low"
    },

    "option_2_navigation_listener": {
      "name": "Navigation Listener",
      "description": "Listen for navigation state changes to detect when returning from editor",
      "pros": [
        "More control over when to refresh",
        "Only refreshes when needed"
      ],
      "cons": [
        "More complex implementation",
        "Requires navigation event handling"
      ],
      "implementation": {
        "file": "app/(tabs)/notes.tsx",
        "code": "import { useNavigation } from 'expo-router';\n\nconst navigation = useNavigation();\n\nuseEffect(() => {\n  const unsubscribe = navigation.addListener('focus', () => {\n    loadNotes();\n  });\n  return unsubscribe;\n}, [selectedFolderId]);"
      },
      "estimated_effort": "15 minutes",
      "risk": "Medium"
    },

    "option_3_global_state": {
      "name": "Global State with Zustand/Context",
      "description": "Create a global notes store that both screens can update",
      "pros": [
        "Most robust solution",
        "Supports real-time updates",
        "Single source of truth",
        "Eliminates prop drilling"
      ],
      "cons": [
        "Requires significant refactoring",
        "Adds new dependency",
        "Learning curve for team"
      ],
      "implementation": {
        "new_files": [
          "stores/notes-store.ts"
        ],
        "files_to_modify": [
          "app/(tabs)/notes.tsx",
          "app/note-editor/new.tsx",
          "app/note-editor/[id].tsx",
          "components/note-item.tsx"
        ],
        "example_code": "// stores/notes-store.ts\nimport create from 'zustand';\n\nexport const useNotesStore = create((set) => ({\n  notes: [],\n  refreshNotes: async (folderId) => {\n    const data = await notesService.getNotesByFolder(folderId);\n    set({ notes: data });\n  },\n  invalidateCache: () => set({ shouldRefresh: true })\n}));"
      },
      "estimated_effort": "2-3 hours",
      "risk": "High"
    },

    "option_4_router_replace": {
      "name": "Router Replace Instead of Back",
      "description": "Change new.tsx to navigate back with a refresh trigger",
      "pros": [
        "Surgical fix",
        "Minimal code change"
      ],
      "cons": [
        "Breaks browser history",
        "Feels unnatural to users",
        "Doesn't fix edit screen issue"
      ],
      "implementation": {
        "file": "app/note-editor/new.tsx",
        "location": "Line 169",
        "code": "router.replace('/(tabs)/notes');"
      },
      "estimated_effort": "2 minutes",
      "risk": "Medium (UX degradation)"
    }
  },

  "recommended_approach": {
    "solution": "Option 1: Focus-Based Refresh",
    "rationale": [
      "Minimal code change (5 lines)",
      "Works for all navigation scenarios (back, edit, delete)",
      "Standard React Native pattern",
      "Already have handleRefresh() function",
      "Low risk, high reward"
    ],
    "implementation_steps": [
      "1. Import useFocusEffect from expo-router in app/(tabs)/notes.tsx",
      "2. Add useFocusEffect hook after line 55 (after existing useEffect)",
      "3. Call handleRefresh() when screen focuses (no loading guard needed)",
      "4. Test creating new notes and navigating back",
      "5. Test editing existing notes and navigating back",
      "6. Verify no performance issues from extra API calls"
    ],
    "code_to_add": {
      "file": "app/(tabs)/notes.tsx",
      "location": "After line 55",
      "import": "import { useFocusEffect } from 'expo-router';",
      "hook": "useFocusEffect(\n  React.useCallback(() => {\n    handleRefresh();\n  }, [selectedFolderId])\n);"
    }
  },

  "implementation_details": {
    "date_implemented": "2025-10-08",
    "final_code": {
      "file": "app/(tabs)/notes.tsx",
      "lines": "57-62",
      "code": "// Refresh notes when screen regains focus (e.g., after creating/editing a note)\nuseFocusEffect(\n  React.useCallback(() => {\n    handleRefresh();\n  }, [selectedFolderId])\n);"
    },
    "changes_made": [
      "Added useFocusEffect import from expo-router (line 3)",
      "Added focus effect hook after initial useEffect (lines 57-62)",
      "Removed loading guard to prevent stale closure issues",
      "handleRefresh() manages refreshing state internally"
    ],
    "dependency_array_decision": {
      "chosen_approach": "Remove loading guard completely",
      "rationale": [
        "handleRefresh() already sets refreshing state",
        "Avoids stale closure issues with loading variable",
        "Matches pull-to-refresh behavior",
        "Simpler code, fewer edge cases",
        "loadNotes() handles concurrent requests safely"
      ],
      "rejected_approach": "Add loading to dependency array",
      "why_rejected": [
        "Would recreate callback on every loading state change",
        "Unnecessary complexity",
        "handleRefresh() already provides protection"
      ]
    },
    "testing_completed": false,
    "testing_notes": "Requires manual testing with the testing plan below"
  },

  "testing_plan": [
    {
      "scenario": "Create new note",
      "steps": [
        "Navigate to notes screen",
        "Click 'New Note' button",
        "Type content and wait for auto-save",
        "Click back button",
        "Verify new note appears in list without manual refresh"
      ]
    },
    {
      "scenario": "Edit existing note",
      "steps": [
        "Navigate to notes screen",
        "Click on existing note",
        "Modify content and wait for auto-save",
        "Click back button",
        "Verify changes appear in list without manual refresh"
      ]
    },
    {
      "scenario": "Create note in specific folder",
      "steps": [
        "Navigate to notes screen",
        "Select a specific folder",
        "Click 'New Note' button",
        "Type content and wait for auto-save",
        "Click back button",
        "Verify new note appears in folder without manual refresh"
      ]
    },
    {
      "scenario": "Delete note",
      "steps": [
        "Navigate to notes screen",
        "Delete a note",
        "Verify note disappears from list (already working)"
      ]
    }
  ],

  "performance_considerations": {
    "api_call_frequency": "Notes will be fetched on every screen focus",
    "mitigation_strategies": [
      "useFocusEffect with proper dependency array prevents unnecessary calls",
      "handleRefresh() sets refreshing state to indicate loading",
      "Supabase query is already optimized with indexing",
      "loadNotes() handles concurrent requests gracefully",
      "Consider adding debounce if performance issues arise"
    ],
    "expected_impact": "Negligible - typical note lists load in <200ms",
    "edge_cases_handled": [
      "Rapid tab switching: Multiple API calls may fire, but latest response wins",
      "Focus while loading: handleRefresh() sets refreshing state appropriately",
      "Concurrent requests: Supabase handles gracefully, no race conditions"
    ]
  },

  "future_enhancements": [
    "Consider Supabase real-time subscriptions for instant updates",
    "Implement optimistic UI updates for better perceived performance",
    "Add pull-to-refresh indicator during focus-based refresh",
    "Cache notes locally with timestamp-based invalidation"
  ],

  "related_issues": [
    "AI title updates not reflecting immediately (same root cause)",
    "Delete operations requiring manual refresh in some cases",
    "Folder changes not always updating note list"
  ],

  "references": {
    "expo_router_docs": "https://docs.expo.dev/router/advanced/navigation-events/",
    "react_navigation_focus": "https://reactnavigation.org/docs/use-focus-effect/",
    "supabase_realtime": "https://supabase.com/docs/guides/realtime"
  }
}
