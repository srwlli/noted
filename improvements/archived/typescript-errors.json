{
  "summary": {
    "total_errors": 60,
    "critical": 4,
    "non_critical": 56,
    "categories": 5
  },
  "categories": [
    {
      "category": "Type Indexing Errors",
      "severity": "critical",
      "count": 3,
      "locations": [
        "app/(tabs)/_layout.tsx:18",
        "app/(tabs)/_layout.tsx:29",
        "app/(tabs)/_layout.tsx:30"
      ],
      "problem": "Colors[colorScheme].tint - colorScheme is string, not 'light' | 'dark'",
      "root_cause": "useThemeColors() returns colorScheme as string, but Colors expects literal type 'light' | 'dark'",
      "impact": "Critical - Prevents proper type checking and could cause runtime errors",
      "fix": {
        "file": "hooks/use-theme-colors.ts",
        "solution": "Add type assertion to return value",
        "code": "return {\n  colors,\n  colorScheme: colorScheme as 'light' | 'dark',\n  isDark,\n  themeName,\n};"
      }
    },
    {
      "category": "Web CSS String Types in React Native Styles",
      "severity": "non_critical",
      "count": 40,
      "locations": [
        "app/(tabs)/_layout.tsx:28-40",
        "app/_layout.tsx:123",
        "components/common-header.tsx:29",
        "components/shared-page-layout.tsx:19",
        "components/test-layout/* (multiple)"
      ],
      "problem": "CSS strings like 'env(safe-area-inset-bottom, 0px)', 'calc()', '100vh' not recognized as valid DimensionValue",
      "root_cause": "React Native TypeScript definitions don't recognize CSS environment variables and calc() functions, even though they work on web",
      "impact": "Non-Critical - Type-level warnings only. Code runs correctly on web with Platform.OS checks",
      "fix_options": [
        {
          "approach": "Type assertions (quick)",
          "code": "...(isWeb && {\n  paddingBottom: 'env(safe-area-inset-bottom, 0px)' as any,\n  height: 'calc(44px + env(safe-area-inset-bottom, 0px))' as any,\n})"
        },
        {
          "approach": "StyleSheet with web overrides (better)",
          "code": "const styles = StyleSheet.create({\n  tabBar: Platform.select({\n    web: {\n      paddingBottom: 'env(safe-area-inset-bottom, 0px)' as any,\n    },\n    default: {},\n  }),\n});"
        }
      ]
    },
    {
      "category": "Missing Property Error",
      "severity": "critical",
      "count": 1,
      "locations": [
        "app/auth/index.tsx:36"
      ],
      "problem": "Property 'data' does not exist on type '{ error: any; }'",
      "root_cause": "signUp() function doesn't return data property, only error. signIn() returns both.",
      "impact": "Critical - Accessing non-existent property could cause runtime errors",
      "fix": {
        "file": "contexts/auth-context.tsx",
        "solution": "Make signUp return consistent shape with signIn",
        "code": "const signUp = async (email: string, password: string) => {\n  const { error } = await supabase.auth.signUp({ email, password });\n  return { error, data: null };\n};"
      },
      "alternative_fix": {
        "file": "app/auth/index.tsx:36",
        "solution": "Destructure conditionally",
        "code": "const result = isLogin\n  ? await signIn(email, password)\n  : await signUp(email, password);\n\nconst { error } = result;\nconst data = 'data' in result ? result.data : null;"
      }
    },
    {
      "category": "Missing Property on Hook Return",
      "severity": "minor",
      "count": 1,
      "locations": [
        "app/landing/_layout.tsx:8"
      ],
      "problem": "Property 'resolvedScheme' does not exist on type returned by useThemeColors()",
      "root_cause": "useThemeColors() doesn't export resolvedScheme, only colorScheme and isDark",
      "impact": "Minor - File may not be actively used (in /landing directory)",
      "fix_options": [
        {
          "approach": "Change usage",
          "code": "const { colorScheme } = useThemeColors();"
        },
        {
          "approach": "Add to hook",
          "file": "hooks/use-theme-colors.ts",
          "code": "const { resolvedScheme } = useThemeController();\nreturn {\n  colors,\n  colorScheme,\n  resolvedScheme,\n  isDark,\n  themeName,\n};"
        }
      ]
    },
    {
      "category": "Cursor Style Type Mismatch",
      "severity": "non_critical",
      "count": 10,
      "locations": [
        "components/test-layout/TestSharedLayout.tsx (multiple)",
        "components/test-layout/* (various)"
      ],
      "problem": "cursor: 'pointer' - string not assignable to CursorValue",
      "root_cause": "React Native types expect specific CursorValue enum, not arbitrary strings",
      "impact": "Non-Critical - Test components only, doesn't affect production",
      "fix": {
        "solution": "Add type assertion for web cursor styles",
        "code": "...(Platform.OS === 'web' && { cursor: 'pointer' as any })"
      }
    }
  ],
  "priority_recommendations": {
    "high_priority": [
      {
        "priority": 1,
        "task": "Fix type indexing in app/(tabs)/_layout.tsx",
        "action": "Add type assertion to colorScheme in use-theme-colors.ts return",
        "reason": "Prevents potential runtime errors",
        "estimated_time": "5 minutes"
      },
      {
        "priority": 2,
        "task": "Fix missing data property in app/auth/index.tsx",
        "action": "Update signUp() to return consistent shape with signIn()",
        "reason": "Could cause undefined access errors",
        "estimated_time": "3 minutes"
      }
    ],
    "medium_priority": [
      {
        "priority": 3,
        "task": "Add resolvedScheme to useThemeColors hook",
        "action": "If /landing is active, add resolvedScheme to hook. Otherwise remove landing directory",
        "reason": "Prevents errors in landing pages if they're used",
        "estimated_time": "2 minutes"
      },
      {
        "priority": 4,
        "task": "Suppress web-specific CSS type warnings",
        "action": "Add 'as any' type assertions for PWA safe-area CSS",
        "reason": "Improves type-checking noise-to-signal ratio",
        "estimated_time": "10 minutes"
      }
    ],
    "low_priority": [
      {
        "priority": 5,
        "task": "Clean up test layout components",
        "action": "Either fix cursor types or remove if unused",
        "reason": "Test components don't affect production",
        "estimated_time": "5 minutes"
      }
    ]
  },
  "action_plan": {
    "phase_1": {
      "name": "Critical Fixes (Required)",
      "tasks": [
        "Fix type indexing error in use-theme-colors.ts",
        "Fix missing data property in auth flow"
      ],
      "resolves": "4 critical errors"
    },
    "phase_2": {
      "name": "Web CSS Type Suppressions (Recommended)",
      "tasks": [
        "Add type assertions for PWA-specific CSS in _layout.tsx",
        "Add type assertions in common-header.tsx",
        "Add type assertions in shared-page-layout.tsx"
      ],
      "resolves": "~40 type warnings"
    },
    "phase_3": {
      "name": "Cleanup (Optional)",
      "tasks": [
        "Check if /landing directory is in use",
        "Clean up test layout components or fix cursor types"
      ],
      "resolves": "11 minor warnings"
    }
  },
  "notes": {
    "theme_refactor": "The VALID_THEME_NAMES refactor introduced NO new errors. All errors existed before.",
    "web_css_support": "React Native types don't recognize web CSS features, but the code works correctly at runtime with Platform checks.",
    "estimated_total_fix_time": "15-20 minutes for Phases 1-2"
  }
}
