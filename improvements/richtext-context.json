{
  "documentPurpose": "Comprehensive context for AI agents implementing rich text markdown editor feature",
  "projectName": "Noted - React Native Note-Taking App",
  "changeScope": "Replace current plain text modal editor with full-screen markdown editor",
  "projectContext": {
    "technology": {
      "framework": "React Native (Expo SDK 54)",
      "router": "Expo Router (file-based routing)",
      "backend": "Supabase (PostgreSQL)",
      "styling": "NativeWind (Tailwind for React Native)",
      "platforms": ["iOS", "Android", "Web (PWA)"]
    },
    "currentState": {
      "noteEditor": {
        "type": "Modal with separate title/content fields",
        "location": "components/note-modal.tsx, components/note-form.tsx",
        "issues": [
          "Feels like filling form, not writing",
          "Separate title/content breaks flow",
          "Modal from top feels heavy",
          "No immediate writing (must tap into fields)",
          "No formatting support"
        ]
      },
      "noteStorage": {
        "database": "Supabase PostgreSQL",
        "table": "notes",
        "schema": {
          "id": "UUID PRIMARY KEY",
          "title": "VARCHAR(500)",
          "content": "TEXT (currently plain text, will store markdown)",
          "user_id": "UUID",
          "folder_id": "UUID (from folders feature)",
          "is_private": "BOOLEAN (from private notes feature)",
          "created_at": "TIMESTAMP",
          "updated_at": "TIMESTAMP"
        },
        "noSchemaChanges": "Markdown stores in existing content TEXT column"
      },
      "existingNotes": {
        "backwardCompatibility": "Plain text notes will render correctly via markdown renderer",
        "migration": "No migration needed - plain text is valid markdown"
      }
    }
  },
  "targetState": {
    "userExperience": {
      "inspiration": "Apple Notes + Bear hybrid",
      "editorFlow": [
        "1. User taps 'New Note' â†’ Full-screen editor appears",
        "2. Cursor ready immediately (auto-focus)",
        "3. User types markdown with live styling (syntax visible but formatted)",
        "4. First line becomes title automatically",
        "5. Toolbar provides formatting buttons (B, I, H, List, etc.)",
        "6. Auto-saves as user types (debounced 1s)",
        "7. Tap back button â†’ Returns to list (auto-saved)"
      ],
      "keyDifferences": {
        "before": "Modal, separate fields, plain text, manual save",
        "after": "Full-screen, single field, markdown, auto-save"
      }
    },
    "technicalImplementation": {
      "markdownRendering": {
        "library": "react-native-live-markdown",
        "behavior": "Shows markdown syntax (**, ##, etc.) but applies styling in real-time",
        "example": "User types **bold** â†’ Sees '**bold**' but text appears bold"
      },
      "storage": {
        "format": "Markdown text in content column",
        "titleExtraction": "Parse first line or # heading, save to title column",
        "htmlExport": "Convert markdown to HTML using 'marked' library on demand"
      },
      "architecture": {
        "routes": {
          "new": "app/note/new.tsx - Create new note",
          "edit": "app/note/[id].tsx - Edit existing note"
        },
        "components": {
          "editor": "components/markdown/markdown-editor.tsx - Main input",
          "toolbar": "components/markdown/markdown-toolbar.tsx - Formatting buttons",
          "renderer": "components/markdown/markdown-renderer.tsx - Display markdown",
          "tableModal": "components/markdown/table-generator-modal.tsx - Visual table creator",
          "linkModal": "components/markdown/link-dialog-modal.tsx - Link insertion"
        },
        "services": {
          "markdown": "services/markdown-service.ts - Render & export utilities",
          "notes": "services/notes.ts - CRUD operations (minimal changes)"
        },
        "utilities": {
          "parser": "utils/note-parser.ts - Extract title from markdown content"
        }
      }
    }
  },
  "implementationStrategy": {
    "approach": "Parallel development - build new system alongside old, then swap",
    "principles": [
      "No breaking changes until final phase",
      "Old modal remains functional during development",
      "Test each phase before proceeding",
      "Verify completion criteria for each task"
    ],
    "phases": {
      "phase1": {
        "name": "Foundation - Markdown Rendering",
        "goal": "Display notes with markdown formatting (read-only)",
        "tasks": [
          "Install: react-native-live-markdown, react-native-markdown-display, marked, @types/marked",
          "Create services/markdown-service.ts (renderToComponents, renderToHtml, renderToDocument)",
          "Create components/markdown/markdown-renderer.tsx (wrapper for react-native-markdown-display)",
          "Create utils/note-parser.ts (extractTitle, parseNote, getPreviewText)",
          "Update components/note-item.tsx to use markdown-renderer for preview"
        ],
        "completionCriteria": [
          "Markdown notes display with formatting in list",
          "Plain text notes still display correctly",
          "Title extraction works from # heading or first line",
          "No console errors or warnings"
        ]
      },
      "phase2": {
        "name": "Editor UI - Full-Screen Experience",
        "goal": "Create new full-screen editor with basic toolbar",
        "tasks": [
          "Create app/note/new.tsx (full-screen route for new notes)",
          "Create app/note/[id].tsx (full-screen route for editing)",
          "Create components/markdown/markdown-editor.tsx (MarkdownTextInput with live styling)",
          "Create components/markdown/markdown-toolbar.tsx (B, I, H1-H3, List, Code buttons)",
          "Wire navigation from app/(tabs)/index.tsx to new routes"
        ],
        "completionCriteria": [
          "Navigating to /note/new shows blank editor with cursor",
          "Navigating to /note/[id] loads note content",
          "Toolbar buttons insert markdown syntax correctly",
          "Live markdown styling works (** shows bold)",
          "Back button returns to list",
          "Old modal still works for fallback"
        ]
      },
      "phase3": {
        "name": "Advanced Features - Tables, Links, Auto-save",
        "goal": "Add visual helpers for complex markdown + auto-save",
        "tasks": [
          "Create components/markdown/table-generator-modal.tsx (row/col picker)",
          "Create components/markdown/link-dialog-modal.tsx (text + URL inputs)",
          "Add table (âŠž) and link (ðŸ”—) buttons to toolbar",
          "Implement auto-save with useEffect + debounce (1000ms)",
          "Add keyboard shortcuts (## â†’ heading, - â†’ list auto-conversion)",
          "Optional: Add preview toggle (edit/view modes)"
        ],
        "completionCriteria": [
          "Table modal generates valid markdown tables",
          "Link modal inserts [text](url) correctly",
          "Auto-save triggers after typing stops",
          "Keyboard shortcuts work reliably",
          "Complex markdown renders properly",
          "No data loss during auto-save"
        ]
      },
      "phase4": {
        "name": "Migration - Replace Old System",
        "goal": "Make new editor default, archive old modal",
        "tasks": [
          "Update app/(tabs)/index.tsx: New Note button â†’ navigate to /note/new",
          "Update note tap: Navigate to /note/[id] instead of opening modal",
          "Add slide-in animation to editor routes",
          "Move components/note-modal.tsx â†’ components/archive/note-modal.tsx",
          "Move components/note-form.tsx â†’ components/archive/note-form.tsx",
          "Remove all imports/references to archived components",
          "Update docs/SCHEMA.md to document markdown storage",
          "Update docs/README.md with new editor flow"
        ],
        "completionCriteria": [
          "New editor is default for all note creation/editing",
          "No active code references old modal",
          "Animations smooth on all platforms",
          "Documentation accurate and complete",
          "All tests passing (iOS, Android, Web)"
        ]
      }
    }
  },
  "technicalDetails": {
    "packages": {
      "reactNativeLiveMarkdown": {
        "purpose": "Live markdown input with syntax styling",
        "npm": "react-native-live-markdown",
        "usage": "import { MarkdownTextInput } from 'react-native-live-markdown'",
        "note": "Shows markdown syntax but applies formatting in real-time"
      },
      "reactNativeMarkdownDisplay": {
        "purpose": "Render markdown to native components for display",
        "npm": "react-native-markdown-display",
        "usage": "import Markdown from 'react-native-markdown-display'",
        "note": "Used in note list to show formatted previews"
      },
      "marked": {
        "purpose": "Convert markdown to HTML for export",
        "npm": "marked",
        "usage": "import { marked } from 'marked'",
        "note": "Only used for HTML export feature, not real-time rendering"
      }
    },
    "toolbarImplementation": {
      "location": "Floating above keyboard (KeyboardAvoidingView)",
      "buttons": [
        {"icon": "B", "action": "Wrap with **text**", "markdown": "**bold**"},
        {"icon": "I", "action": "Wrap with *text*", "markdown": "*italic*"},
        {"icon": "H1", "action": "Insert # at line start", "markdown": "# heading"},
        {"icon": "H2", "action": "Insert ## at line start", "markdown": "## heading"},
        {"icon": "H3", "action": "Insert ### at line start", "markdown": "### heading"},
        {"icon": "â€¢", "action": "Insert - at line start", "markdown": "- list item"},
        {"icon": "1.", "action": "Insert 1. at line start", "markdown": "1. numbered item"},
        {"icon": "ðŸ”—", "action": "Open link modal", "markdown": "[text](url)"},
        {"icon": "âŠž", "action": "Open table modal", "markdown": "| col | col |"},
        {"icon": "â‹®", "action": "More menu", "options": ["strikethrough", "code", "quote"]}
      ],
      "textInsertion": {
        "withSelection": "Wrap selected text with markdown syntax",
        "withoutSelection": "Insert markdown at cursor position",
        "cursorManagement": "Move cursor to appropriate position after insert"
      }
    },
    "autoSaveStrategy": {
      "trigger": "useEffect watching content changes",
      "debounce": "1000ms (1 second) after typing stops",
      "implementation": "const timer = setTimeout(() => saveNote(content), 1000)",
      "cleanup": "return () => clearTimeout(timer)",
      "indicator": "Optional: Show 'Saving...' or 'âœ“ Saved' in header"
    },
    "titleExtraction": {
      "logic": [
        "1. Check if first line starts with # (heading)",
        "2. If yes: Remove # symbols, use as title",
        "3. If no: Use first line as-is (up to 500 chars)",
        "4. Fallback: If empty, use 'Note [timestamp]'"
      ],
      "example": "# My Note\\nContent â†’ title: 'My Note'",
      "example2": "Plain title\\nContent â†’ title: 'Plain title'",
      "storage": "Save extracted title to notes.title column for fast queries"
    },
    "markdownFeatures": {
      "supported": [
        "Headings (# H1, ## H2, ### H3)",
        "Bold (**text**), Italic (*text*), Strikethrough (~~text~~)",
        "Bullet lists (- item), Numbered lists (1. item)",
        "Checklists (- [ ] task, - [x] done)",
        "Links ([text](url))",
        "Inline code (`code`), Code blocks (``` code ```)",
        "Blockquotes (> quote)",
        "Tables (| col | col |)",
        "Horizontal rules (---)"
      ],
      "limitations": [
        "No text colors (markdown spec)",
        "No font sizes (use headings)",
        "Images via links only (upload feature future enhancement)"
      ]
    }
  },
  "codeExamples": {
    "markdownService": "// services/markdown-service.ts\nimport { marked } from 'marked';\nimport Markdown from 'react-native-markdown-display';\n\nexport const markdownService = {\n  renderToComponents(markdown: string): JSX.Element {\n    return <Markdown>{markdown}</Markdown>;\n  },\n\n  renderToHtml(markdown: string): string {\n    return marked(markdown);\n  },\n\n  renderToDocument(title: string, markdown: string): string {\n    return `<!DOCTYPE html>\\n<html>\\n<head>\\n<title>${title}</title>\\n<style>body { font-family: sans-serif; max-width: 800px; margin: 40px auto; }</style>\\n</head>\\n<body>\\n${marked(markdown)}\\n</body>\\n</html>`;\n  }\n};",
    "noteParser": "// utils/note-parser.ts\nexport function extractTitle(markdown: string): string {\n  const lines = markdown.trim().split('\\n');\n  const firstLine = lines[0]?.trim() || '';\n\n  if (firstLine.startsWith('#')) {\n    return firstLine.replace(/^#+\\s*/, ''); // Remove # symbols\n  }\n\n  if (firstLine) {\n    return firstLine.substring(0, 500); // Limit to VARCHAR(500)\n  }\n\n  return `Note ${new Date().toLocaleString()}`; // Fallback\n}\n\nexport function parseNote(markdown: string) {\n  return {\n    title: extractTitle(markdown),\n    content: markdown\n  };\n}\n\nexport function getPreviewText(markdown: string, maxLength = 100): string {\n  const lines = markdown.split('\\n');\n  const contentLines = lines.slice(1); // Skip title line\n  return contentLines.join(' ').substring(0, maxLength);\n}",
    "newNoteScreen": "// app/note/new.tsx\nimport { useState, useRef } from 'react';\nimport { View, KeyboardAvoidingView } from 'react-native';\nimport { MarkdownTextInput } from 'react-native-live-markdown';\nimport { MarkdownToolbar } from '@/components/markdown/markdown-toolbar';\nimport { useRouter } from 'expo-router';\nimport { notesService } from '@/services/notes';\nimport { extractTitle } from '@/utils/note-parser';\n\nexport default function NewNoteScreen() {\n  const [content, setContent] = useState('');\n  const [selection, setSelection] = useState({ start: 0, end: 0 });\n  const router = useRouter();\n  const textInputRef = useRef(null);\n\n  // Auto-save\n  useEffect(() => {\n    if (!content.trim()) return;\n    const timer = setTimeout(async () => {\n      const title = extractTitle(content);\n      await notesService.createNote(title, content);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [content]);\n\n  const handleInsert = (before: string, after: string) => {\n    const { start, end } = selection;\n    const selectedText = content.substring(start, end);\n    if (start !== end) {\n      const newContent = content.substring(0, start) + before + selectedText + after + content.substring(end);\n      setContent(newContent);\n    } else {\n      const newContent = content.substring(0, start) + before + after + content.substring(start);\n      setContent(newContent);\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView style={{ flex: 1 }}>\n      <MarkdownTextInput\n        ref={textInputRef}\n        value={content}\n        onChangeText={setContent}\n        onSelectionChange={(e) => setSelection(e.nativeEvent.selection)}\n        autoFocus\n        multiline\n        placeholder=\"Start typing...\"\n      />\n      <MarkdownToolbar onInsert={handleInsert} />\n    </KeyboardAvoidingView>\n  );\n}",
    "markdownToolbar": "// components/markdown/markdown-toolbar.tsx\nimport { View, TouchableOpacity, Text, StyleSheet } from 'react-native';\nimport { useThemeColors } from '@/hooks/use-theme-colors';\n\ninterface MarkdownToolbarProps {\n  onInsert: (before: string, after: string) => void;\n}\n\nexport function MarkdownToolbar({ onInsert }: MarkdownToolbarProps) {\n  const { colors } = useThemeColors();\n\n  return (\n    <View style={[styles.toolbar, { backgroundColor: colors.surface, borderTopColor: colors.border }]}>\n      <ToolbarButton text=\"B\" onPress={() => onInsert('**', '**')} />\n      <ToolbarButton text=\"I\" onPress={() => onInsert('*', '*')} />\n      <ToolbarButton text=\"H1\" onPress={() => onInsert('# ', '')} />\n      <ToolbarButton text=\"â€¢\" onPress={() => onInsert('- ', '')} />\n    </View>\n  );\n}\n\nfunction ToolbarButton({ text, onPress }) {\n  return (\n    <TouchableOpacity style={styles.button} onPress={onPress}>\n      <Text style={styles.buttonText}>{text}</Text>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  toolbar: {\n    flexDirection: 'row',\n    borderTopWidth: 1,\n    paddingHorizontal: 8,\n    paddingVertical: 8,\n    gap: 8,\n  },\n  button: {\n    width: 40,\n    height: 40,\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});"
  },
  "testingGuidance": {
    "phase1": [
      "Create test note with markdown: '# Title\\n**Bold** text'",
      "Verify note list shows formatted preview",
      "Verify plain text note 'Plain note' still displays",
      "Check console for errors"
    ],
    "phase2": [
      "Navigate to /note/new, verify blank editor appears",
      "Type markdown, verify live styling works",
      "Tap B button, verify ** inserted",
      "Navigate back, verify note saved"
    ],
    "phase3": [
      "Tap table button, select 3x3, verify table generated",
      "Tap link button, enter text/URL, verify link inserted",
      "Type content, wait 2s, verify auto-save occurred",
      "Type '## ' and space, verify converts to heading"
    ],
    "phase4": [
      "Verify all 'New Note' actions use new editor",
      "Verify old modal components in archive/ folder",
      "Test on iOS device, Android device, Web browser",
      "Verify no console errors or warnings"
    ]
  },
  "troubleshooting": {
    "packageInstallFails": "Try: npm install --legacy-peer-deps or check React Native version compatibility",
    "markdownNotRendering": "Check: import statements correct, MarkdownTextInput props configured, NativeWind conflicts",
    "autoSaveNotWorking": "Check: useEffect dependencies, debounce timer cleanup, notesService methods",
    "toolbarNotVisible": "Check: KeyboardAvoidingView behavior prop, platform-specific keyboard handling",
    "navigationIssues": "Check: Expo Router file structure, navigation imports, screen options"
  },
  "successCriteria": {
    "functionality": [
      "Users can create notes with markdown formatting",
      "Users can edit existing notes with markdown",
      "Toolbar provides easy formatting without knowing markdown",
      "Auto-save prevents data loss",
      "Old plain text notes display correctly"
    ],
    "performance": [
      "Editor opens instantly with cursor ready",
      "Live markdown styling has no lag",
      "Auto-save doesn't block typing",
      "Smooth animations on all platforms"
    ],
    "quality": [
      "No console errors or warnings",
      "Works on iOS, Android, and Web",
      "Code follows project conventions",
      "Documentation updated and accurate"
    ]
  },
  "references": {
    "detailedPlan": "improvements/rich-text-implementation.json - Full technical spec",
    "industryComparison": "See industryComparison section in rich-text-implementation.json",
    "toolbarSpec": "See toolbarImplementation section in rich-text-implementation.json",
    "projectDocs": [
      "docs/SCHEMA.md - Database schema",
      "docs/ARCHITECTURE.md - App architecture",
      "docs/API.md - API reference"
    ]
  }
}
