{
  "title": "Multi-Stack Theme System Reusability Guide",
  "version": "1.0",
  "date": "2025-10-03",
  "description": "How to reuse the React Native theme system across Next.js, Remix, Vite, Vue, Svelte, and more",
  "sourceArchitecture": "React Native + Expo (Noted PWA)",

  "quickReference": {
    "portabilityMatrix": {
      "nextjs": { "difficulty": "EASY", "time": "30min", "codeReuse": "85%" },
      "remix": { "difficulty": "EASY", "time": "30min", "codeReuse": "85%" },
      "vite": { "difficulty": "EASY", "time": "20min", "codeReuse": "90%" },
      "expo": { "difficulty": "NONE", "time": "5min", "codeReuse": "100%" },
      "reactNativeCli": { "difficulty": "NONE", "time": "5min", "codeReuse": "100%" },
      "vue": { "difficulty": "MEDIUM", "time": "60min", "codeReuse": "60%" },
      "svelte": { "difficulty": "MEDIUM", "time": "60min", "codeReuse": "60%" },
      "solid": { "difficulty": "MEDIUM", "time": "45min", "codeReuse": "70%" },
      "angular": { "difficulty": "HARD", "time": "120min", "codeReuse": "40%" }
    },
    "whatToReuse": {
      "always": ["Theme constants (10 themes × 18 colors)", "Validation logic", "3-way toggle UX pattern", "Type definitions"],
      "adapt": ["Storage layer", "System detection", "Context/State management", "UI components"],
      "replace": ["React-specific hooks", "React Native primitives", "Package dependencies"]
    }
  },

  "stacks": {
    "nextjs": {
      "name": "Next.js",
      "versions": "13+ (App Router) or 12+ (Pages Router)",
      "difficulty": "EASY",
      "estimatedTime": "30 minutes",
      "codeReuse": "85%",

      "changes": {
        "storage": "AsyncStorage → localStorage + cookies",
        "systemDetection": "useColorScheme → matchMedia",
        "toasts": "sonner-native → sonner",
        "icons": "@expo/vector-icons → lucide-react",
        "ui": "React Native primitives → HTML + Tailwind"
      },

      "packages": {
        "add": ["sonner", "lucide-react", "js-cookie", "@types/js-cookie"],
        "remove": ["@react-native-async-storage/async-storage", "@expo/vector-icons", "sonner-native"],
        "commands": [
          "npm install sonner lucide-react js-cookie",
          "npm install --save-dev @types/js-cookie"
        ]
      },

      "fileMapping": {
        "constants/theme.ts": {
          "destination": "lib/themes.ts",
          "changes": "NONE - Copy as-is",
          "action": "cp constants/theme.ts lib/themes.ts"
        },
        "lib/theme-storage.ts": {
          "destination": "lib/theme-storage.ts",
          "changes": "Replace AsyncStorage with localStorage + cookies",
          "codeReuse": "50%",
          "newCode": "Add SSR checks (typeof window !== 'undefined')"
        },
        "contexts/theme-controller.tsx": {
          "destination": "contexts/theme-provider.tsx",
          "changes": "Replace useColorScheme with matchMedia",
          "codeReuse": "80%",
          "newCode": "matchMedia event listeners"
        },
        "components/settings-cards/theme-settings-card.tsx": {
          "destination": "components/theme-settings.tsx",
          "changes": "Rebuild with HTML + Tailwind",
          "codeReuse": "40%",
          "newCode": "Tailwind classes, button elements"
        }
      },

      "implementation": {
        "appRouter": {
          "step1": "Create lib/themes.ts - copy from React Native",
          "step2": "Create lib/theme-storage.ts with localStorage + cookies",
          "step3": "Create contexts/theme-provider.tsx with matchMedia",
          "step4": "Update app/layout.tsx to wrap app in ThemeProvider",
          "step5": "Create components/theme-settings.tsx with Tailwind",
          "step6": "Add CSS variables to globals.css or apply-theme.ts"
        },
        "pagesRouter": {
          "step1": "Create lib/themes.ts - copy from React Native",
          "step2": "Create lib/theme-storage.ts with localStorage + cookies",
          "step3": "Create contexts/theme-provider.tsx with matchMedia",
          "step4": "Update pages/_app.tsx to wrap app in ThemeProvider",
          "step5": "Create components/theme-settings.tsx with Tailwind",
          "step6": "Add CSS variables to styles/globals.css"
        }
      },

      "exampleCode": {
        "storageAdapter": "// lib/theme-storage.ts\nimport Cookies from 'js-cookie';\n\nconst KEYS = {\n  THEME_NAME: 'theme_name',\n  COLOR_SCHEME: 'color_scheme',\n};\n\nexport const ThemeStorage = {\n  getThemeName() {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem(KEYS.THEME_NAME) as ThemeName | null;\n  },\n  setThemeName(name: ThemeName) {\n    if (typeof window === 'undefined') return;\n    localStorage.setItem(KEYS.THEME_NAME, name);\n    Cookies.set(KEYS.THEME_NAME, name, { expires: 365 });\n  }\n};"
      },

      "notes": [
        "Use 'use client' directive in App Router components",
        "Check typeof window !== 'undefined' before localStorage",
        "Cookies ensure SSR theme consistency",
        "matchMedia auto-updates when OS theme changes"
      ]
    },

    "remix": {
      "name": "Remix",
      "versions": "1.0+",
      "difficulty": "EASY",
      "estimatedTime": "30 minutes",
      "codeReuse": "85%",

      "changes": {
        "storage": "AsyncStorage → cookies (via createCookie)",
        "systemDetection": "useColorScheme → matchMedia + loader",
        "toasts": "sonner-native → sonner",
        "icons": "@expo/vector-icons → lucide-react",
        "ui": "React Native primitives → HTML + Tailwind"
      },

      "packages": {
        "add": ["sonner", "lucide-react"],
        "remove": ["@react-native-async-storage/async-storage", "@expo/vector-icons", "sonner-native"],
        "commands": ["npm install sonner lucide-react"]
      },

      "remixSpecific": {
        "cookieStorage": {
          "description": "Use Remix's createCookie for SSR-compatible storage",
          "code": "// lib/theme-storage.server.ts\nimport { createCookie } from '@remix-run/node';\n\nexport const themeCookie = createCookie('theme_name', {\n  maxAge: 31536000, // 1 year\n});\n\nexport const colorSchemeCookie = createCookie('color_scheme', {\n  maxAge: 31536000,\n});\n\n// In loader\nexport async function loader({ request }: LoaderArgs) {\n  const cookieHeader = request.headers.get('Cookie');\n  const themeName = await themeCookie.parse(cookieHeader);\n  const colorScheme = await colorSchemeCookie.parse(cookieHeader);\n  \n  return json({ themeName, colorScheme });\n}\n\n// In action\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const themeName = formData.get('themeName');\n  \n  return json(\n    { success: true },\n    {\n      headers: {\n        'Set-Cookie': await themeCookie.serialize(themeName),\n      },\n    }\n  );\n}"
        },
        "loaderIntegration": {
          "description": "Load theme from cookies in root loader",
          "code": "// app/root.tsx\nexport async function loader({ request }: LoaderArgs) {\n  const cookieHeader = request.headers.get('Cookie');\n  const [themeName, colorScheme] = await Promise.all([\n    themeCookie.parse(cookieHeader),\n    colorSchemeCookie.parse(cookieHeader),\n  ]);\n  \n  return json({\n    themeName: themeName || 'monochrome',\n    colorScheme: colorScheme || 'system',\n  });\n}"
        }
      },

      "implementation": {
        "step1": "Create lib/themes.ts - copy from React Native",
        "step2": "Create lib/theme-storage.server.ts with createCookie",
        "step3": "Add loader to app/root.tsx to read theme cookies",
        "step4": "Create contexts/theme-provider.tsx with matchMedia",
        "step5": "Update app/root.tsx to wrap app in ThemeProvider",
        "step6": "Create action to update theme cookies",
        "step7": "Create components/theme-settings.tsx with Tailwind"
      },

      "notes": [
        "Remix cookies are server-only - use loader/action",
        "Client-side changes need form submission or fetcher",
        "Cookies automatically sync between server and client",
        "No hydration mismatches with proper cookie setup"
      ]
    },

    "vite": {
      "name": "Vite + React",
      "versions": "4.0+",
      "difficulty": "EASY",
      "estimatedTime": "20 minutes",
      "codeReuse": "90%",

      "changes": {
        "storage": "AsyncStorage → localStorage only",
        "systemDetection": "useColorScheme → matchMedia",
        "toasts": "sonner-native → sonner",
        "icons": "@expo/vector-icons → lucide-react",
        "ui": "React Native primitives → HTML + Tailwind"
      },

      "packages": {
        "add": ["sonner", "lucide-react"],
        "remove": ["@react-native-async-storage/async-storage", "@expo/vector-icons", "sonner-native"],
        "commands": ["npm install sonner lucide-react"]
      },

      "simplifications": {
        "noSSR": "No server-side rendering - remove all SSR checks",
        "noCookies": "No cookies needed - localStorage only",
        "simpler": "Simplest migration of all web frameworks"
      },

      "implementation": {
        "step1": "Create lib/themes.ts - copy from React Native",
        "step2": "Create lib/theme-storage.ts with localStorage ONLY",
        "step3": "Create contexts/theme-provider.tsx with matchMedia",
        "step4": "Update src/main.tsx to wrap app in ThemeProvider",
        "step5": "Create components/theme-settings.tsx with Tailwind"
      },

      "exampleCode": {
        "storageSimplified": "// lib/theme-storage.ts (Vite - No SSR)\nexport const ThemeStorage = {\n  getThemeName() {\n    return localStorage.getItem('theme_name') as ThemeName | null;\n  },\n  setThemeName(name: ThemeName) {\n    localStorage.setItem('theme_name', name);\n  },\n  // No cookies, no SSR checks\n};"
      },

      "notes": [
        "Simplest web migration - client-only",
        "Remove all typeof window checks",
        "No cookies needed",
        "Perfect for SPAs"
      ]
    },

    "vue": {
      "name": "Vue 3 + Composition API",
      "versions": "3.0+",
      "difficulty": "MEDIUM",
      "estimatedTime": "60 minutes",
      "codeReuse": "60%",

      "changes": {
        "state": "useState → ref/reactive",
        "effects": "useEffect → watchEffect/watch",
        "context": "React Context → provide/inject",
        "memoization": "useMemo → computed",
        "callbacks": "useCallback → functions (no memo needed)",
        "storage": "AsyncStorage → localStorage",
        "systemDetection": "useColorScheme → matchMedia",
        "ui": "React Native → Vue components + Tailwind"
      },

      "packages": {
        "add": ["vue-sonner", "lucide-vue-next"],
        "remove": ["All React packages"],
        "commands": ["npm install vue-sonner lucide-vue-next"]
      },

      "conversionGuide": {
        "reactToVue": {
          "useState": "ref() or reactive()",
          "useEffect": "watchEffect() or watch()",
          "useContext": "provide() / inject()",
          "useMemo": "computed()",
          "useCallback": "Regular function (Vue auto-optimizes)"
        }
      },

      "exampleCode": {
        "themeComposable": "// composables/useTheme.ts\nimport { ref, computed, watchEffect, provide, inject } from 'vue';\nimport { ThemeStorage } from '@/lib/theme-storage';\nimport type { ThemeName, ColorSchemeMode } from '@/lib/themes';\nimport { toast } from 'vue-sonner';\n\nconst THEME_KEY = Symbol('theme');\n\nexport function createTheme() {\n  const themeName = ref<ThemeName>('monochrome');\n  const colorScheme = ref<ColorSchemeMode>('system');\n  const systemScheme = ref<'light' | 'dark'>('light');\n  const isLoading = ref(true);\n  const loadError = ref<string | null>(null);\n\n  // System theme detection\n  watchEffect((onCleanup) => {\n    if (typeof window === 'undefined') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    systemScheme.value = mediaQuery.matches ? 'dark' : 'light';\n\n    const handler = (e: MediaQueryListEvent) => {\n      systemScheme.value = e.matches ? 'dark' : 'light';\n    };\n\n    mediaQuery.addEventListener('change', handler);\n    onCleanup(() => mediaQuery.removeEventListener('change', handler));\n  });\n\n  // Resolved scheme\n  const resolvedScheme = computed(() => {\n    if (colorScheme.value === 'system') {\n      return systemScheme.value;\n    }\n    return colorScheme.value;\n  });\n\n  // Load preferences\n  watchEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    try {\n      const stored = ThemeStorage.getThemeName();\n      if (stored) themeName.value = stored;\n\n      const storedScheme = ThemeStorage.getColorScheme();\n      if (storedScheme) colorScheme.value = storedScheme;\n    } catch (error) {\n      loadError.value = 'Failed to load theme';\n    } finally {\n      isLoading.value = false;\n    }\n  });\n\n  function setTheme(theme: ThemeName) {\n    try {\n      ThemeStorage.setThemeName(theme);\n      themeName.value = theme;\n      toast.success('Theme updated');\n    } catch (error) {\n      toast.error('Failed to save theme');\n    }\n  }\n\n  function setColorScheme(scheme: ColorSchemeMode) {\n    try {\n      ThemeStorage.setColorScheme(scheme);\n      colorScheme.value = scheme;\n      toast.success('Color scheme updated');\n    } catch (error) {\n      toast.error('Failed to save color scheme');\n    }\n  }\n\n  return {\n    themeName,\n    colorScheme,\n    resolvedScheme,\n    isLoading,\n    loadError,\n    setTheme,\n    setColorScheme,\n  };\n}\n\nexport function provideTheme() {\n  const theme = createTheme();\n  provide(THEME_KEY, theme);\n  return theme;\n}\n\nexport function useTheme() {\n  const theme = inject(THEME_KEY);\n  if (!theme) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return theme;\n}",
        "themeProvider": "// App.vue\n<script setup lang=\"ts\">\nimport { provideTheme } from '@/composables/useTheme';\nimport { Toaster } from 'vue-sonner';\n\nprovideTheme();\n</script>\n\n<template>\n  <RouterView />\n  <Toaster position=\"top-right\" />\n</template>",
        "themeSettings": "// components/ThemeSettings.vue\n<script setup lang=\"ts\">\nimport { useTheme } from '@/composables/useTheme';\nimport { Sun, Moon, Monitor } from 'lucide-vue-next';\nimport { Themes } from '@/lib/themes';\n\nconst { themeName, colorScheme, resolvedScheme, setColorScheme, isLoading } = useTheme();\n\nconst handleColorSchemeChange = (scheme: ColorSchemeMode) => {\n  setColorScheme(scheme);\n};\n</script>\n\n<template>\n  <div class=\"space-y-4\">\n    <div class=\"flex gap-2\">\n      <button\n        @click=\"handleColorSchemeChange('light')\"\n        :disabled=\"isLoading\"\n        :class=\"[\n          'flex items-center gap-2 px-4 py-3',\n          colorScheme === 'light' ? 'bg-blue-500 text-white' : 'bg-white'\n        ]\"\n      >\n        <Sun :size=\"16\" />\n        <span>Light</span>\n      </button>\n      <!-- System and Dark buttons -->\n    </div>\n  </div>\n</template>"
      },

      "notes": [
        "Composition API is similar to React hooks",
        "provide/inject replaces Context API",
        "computed() auto-tracks dependencies (no manual deps)",
        "No need for useCallback - Vue optimizes automatically"
      ]
    },

    "svelte": {
      "name": "Svelte / SvelteKit",
      "versions": "4.0+",
      "difficulty": "MEDIUM",
      "estimatedTime": "60 minutes",
      "codeReuse": "60%",

      "changes": {
        "state": "useState → writable stores",
        "effects": "useEffect → $: reactive statements",
        "context": "React Context → writable stores (global)",
        "memoization": "useMemo → derived stores",
        "storage": "AsyncStorage → localStorage",
        "systemDetection": "useColorScheme → matchMedia in onMount",
        "ui": "React Native → Svelte components + Tailwind"
      },

      "packages": {
        "add": ["svelte-sonner", "lucide-svelte"],
        "remove": ["All React packages"],
        "commands": ["npm install svelte-sonner lucide-svelte"]
      },

      "conversionGuide": {
        "reactToSvelte": {
          "useState": "writable(initialValue)",
          "useEffect": "$: reactive statement or onMount",
          "useContext": "writable store (import directly)",
          "useMemo": "derived(stores, callback)",
          "useCallback": "Regular function"
        }
      },

      "exampleCode": {
        "themeStore": "// lib/stores/theme.ts\nimport { writable, derived } from 'svelte/store';\nimport { browser } from '$app/environment';\nimport { ThemeStorage } from '../theme-storage';\nimport { toast } from 'svelte-sonner';\nimport type { ThemeName, ColorSchemeMode } from '../themes';\n\nfunction createThemeStore() {\n  const themeName = writable<ThemeName>('monochrome');\n  const colorScheme = writable<ColorSchemeMode>('system');\n  const systemScheme = writable<'light' | 'dark'>('light');\n  const isLoading = writable(true);\n  const loadError = writable<string | null>(null);\n\n  // Derived resolved scheme\n  const resolvedScheme = derived(\n    [colorScheme, systemScheme],\n    ([$colorScheme, $systemScheme]) => {\n      if ($colorScheme === 'system') {\n        return $systemScheme;\n      }\n      return $colorScheme;\n    }\n  );\n\n  // Initialize\n  if (browser) {\n    // Load from storage\n    try {\n      const stored = ThemeStorage.getThemeName();\n      if (stored) themeName.set(stored);\n\n      const storedScheme = ThemeStorage.getColorScheme();\n      if (storedScheme) colorScheme.set(storedScheme);\n    } catch (error) {\n      loadError.set('Failed to load theme');\n    } finally {\n      isLoading.set(false);\n    }\n\n    // System theme detection\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    systemScheme.set(mediaQuery.matches ? 'dark' : 'light');\n\n    mediaQuery.addEventListener('change', (e) => {\n      systemScheme.set(e.matches ? 'dark' : 'light');\n    });\n  }\n\n  function setTheme(theme: ThemeName) {\n    try {\n      ThemeStorage.setThemeName(theme);\n      themeName.set(theme);\n      toast.success('Theme updated');\n    } catch (error) {\n      toast.error('Failed to save theme');\n    }\n  }\n\n  function setColorScheme(scheme: ColorSchemeMode) {\n    try {\n      ThemeStorage.setColorScheme(scheme);\n      colorScheme.set(scheme);\n      toast.success('Color scheme updated');\n    } catch (error) {\n      toast.error('Failed to save color scheme');\n    }\n  }\n\n  return {\n    themeName,\n    colorScheme,\n    resolvedScheme,\n    isLoading,\n    loadError,\n    setTheme,\n    setColorScheme,\n  };\n}\n\nexport const theme = createThemeStore();",
        "themeSettings": "<!-- components/ThemeSettings.svelte -->\n<script lang=\"ts\">\n  import { theme } from '$lib/stores/theme';\n  import { Sun, Moon, Monitor } from 'lucide-svelte';\n  import { Themes } from '$lib/themes';\n\n  function handleColorSchemeChange(scheme: ColorSchemeMode) {\n    theme.setColorScheme(scheme);\n  }\n</script>\n\n<div class=\"space-y-4\">\n  <div class=\"flex gap-2\">\n    <button\n      on:click={() => handleColorSchemeChange('light')}\n      disabled={$theme.isLoading}\n      class=\"flex items-center gap-2 px-4 py-3\"\n      class:bg-blue-500={$theme.colorScheme === 'light'}\n      class:text-white={$theme.colorScheme === 'light'}\n    >\n      <Sun size={16} />\n      <span>Light</span>\n    </button>\n    <!-- System and Dark buttons -->\n  </div>\n\n  <p class=\"text-sm text-gray-600\">\n    {#if $theme.colorScheme === 'system'}\n      Currently using {$theme.resolvedScheme} mode (automatic)\n    {:else}\n      {$theme.colorScheme.charAt(0).toUpperCase() + $theme.colorScheme.slice(1)} mode\n    {/if}\n  </p>\n</div>",
        "appLayout": "<!-- routes/+layout.svelte -->\n<script>\n  import { Toaster } from 'svelte-sonner';\n  import '../app.css';\n</script>\n\n<slot />\n<Toaster position=\"top-right\" />"
      },

      "notes": [
        "Stores are globally accessible - no provider needed",
        "$: reactive statements auto-update",
        "derived() replaces useMemo",
        "Svelte auto-subscribes/unsubscribes to stores"
      ]
    },

    "solid": {
      "name": "Solid.js",
      "versions": "1.0+",
      "difficulty": "MEDIUM",
      "estimatedTime": "45 minutes",
      "codeReuse": "70%",

      "changes": {
        "state": "useState → createSignal",
        "effects": "useEffect → createEffect",
        "context": "React Context → Solid Context",
        "memoization": "useMemo → createMemo",
        "storage": "AsyncStorage → localStorage",
        "systemDetection": "useColorScheme → matchMedia in onMount",
        "ui": "React Native → Solid components + Tailwind"
      },

      "packages": {
        "add": ["solid-toast", "lucide-solid"],
        "remove": ["All React packages"],
        "commands": ["npm install solid-toast lucide-solid"]
      },

      "notes": [
        "Very similar to React - easiest non-React migration",
        "Signals are more granular than React state",
        "createEffect similar to useEffect",
        "Context API nearly identical"
      ]
    },

    "expo": {
      "name": "Expo (other projects)",
      "versions": "SDK 48+",
      "difficulty": "NONE",
      "estimatedTime": "5 minutes",
      "codeReuse": "100%",

      "changes": {
        "none": "Fully compatible - copy all files as-is"
      },

      "implementation": {
        "step1": "Copy constants/theme.ts → your project",
        "step2": "Copy lib/theme-storage.ts → your project",
        "step3": "Copy contexts/theme-controller.tsx → your project",
        "step4": "Copy components/settings-cards/theme-settings-card.tsx → your project",
        "step5": "Wrap app in ThemeControllerProvider",
        "step6": "Use useThemeColors() hook in components"
      },

      "notes": [
        "100% compatible - no changes needed",
        "Already has all dependencies",
        "Just copy and use"
      ]
    },

    "reactNativeCli": {
      "name": "React Native CLI",
      "versions": "0.70+",
      "difficulty": "NONE",
      "estimatedTime": "5 minutes",
      "codeReuse": "100%",

      "changes": {
        "dependencies": "Install @react-native-async-storage/async-storage and sonner-native"
      },

      "implementation": {
        "step1": "npm install @react-native-async-storage/async-storage sonner-native",
        "step2": "Copy all theme files from Expo project",
        "step3": "Wrap app in ThemeControllerProvider"
      },

      "notes": [
        "Fully compatible after installing dependencies",
        "May need pod install on iOS"
      ]
    }
  },

  "generalPrinciples": {
    "whatAlwaysWorks": {
      "themeData": "Theme constants (10 themes, 18 colors) work everywhere - pure JavaScript objects",
      "validationLogic": "Theme name validation, color scheme validation - pure functions",
      "typeDefinitions": "TypeScript types are universal",
      "uxPatterns": "3-way toggle, theme picker - UI patterns work everywhere"
    },
    "whatNeedsAdaptation": {
      "storage": "Each platform has different persistence (AsyncStorage, localStorage, cookies, IndexedDB)",
      "systemDetection": "Each platform detects OS theme differently (useColorScheme, matchMedia, etc)",
      "stateManagement": "React hooks vs Vue Composition API vs Svelte stores",
      "uiPrimitives": "TouchableOpacity vs button, View vs div, Text vs p"
    },
    "migrationStrategy": {
      "step1": "Copy theme constants (100% reusable)",
      "step2": "Adapt storage layer for platform",
      "step3": "Adapt state management for framework",
      "step4": "Rebuild UI with platform primitives",
      "step5": "Test all 3 modes (light/dark/system)"
    }
  },

  "commonPitfalls": {
    "ssrMismatches": {
      "problem": "Server renders different theme than client",
      "solution": "Use cookies for SSR, sync with client storage",
      "affectedStacks": ["Next.js", "Remix", "SvelteKit", "Nuxt"]
    },
    "flashOfWrongTheme": {
      "problem": "Brief flash before theme loads",
      "solution": "Inline script in HTML to apply theme before hydration",
      "affectedStacks": ["All SSR frameworks"]
    },
    "storageAccessErrors": {
      "problem": "localStorage/cookies blocked by browser",
      "solution": "Graceful fallback to in-memory state",
      "affectedStacks": ["All web frameworks"]
    },
    "systemDetectionTiming": {
      "problem": "matchMedia not available during SSR",
      "solution": "Check typeof window !== 'undefined'",
      "affectedStacks": ["All SSR frameworks"]
    }
  },

  "testingChecklist": {
    "forAllStacks": [
      "✓ Light mode works",
      "✓ Dark mode works",
      "✓ System mode detects OS preference",
      "✓ System mode updates when OS theme changes",
      "✓ Preferences persist after page reload",
      "✓ Toast notifications appear on changes",
      "✓ All 10 themes selectable",
      "✓ Validation prevents invalid themes",
      "✓ Error states handled gracefully"
    ],
    "ssrFrameworks": [
      "✓ No hydration mismatches",
      "✓ Theme consistent between server and client",
      "✓ No flash of wrong theme",
      "✓ Cookies sync properly"
    ],
    "accessibility": [
      "✓ Keyboard navigation works",
      "✓ Screen readers announce changes",
      "✓ Focus states visible",
      "✓ Color contrast meets WCAG AA"
    ]
  },

  "references": {
    "sourceProject": "Noted PWA (React Native + Expo)",
    "documentation": {
      "reactNative": "https://reactnative.dev/docs/usecolorscheme",
      "nextjs": "https://nextjs.org/docs",
      "remix": "https://remix.run/docs",
      "vue": "https://vuejs.org/guide/typescript/composition-api.html",
      "svelte": "https://svelte.dev/docs/svelte-store",
      "solid": "https://docs.solidjs.com/concepts/signals"
    }
  }
}
