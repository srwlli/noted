{
  "title": "Export Noted for Embedding in Other Apps",
  "dateCreated": "2025-10-02",
  "status": "planning",
  "priority": "low",

  "overview": {
    "description": "Enable Noted to be embedded or integrated into other applications as a notes module",
    "userNeed": [
      "Use Noted within existing apps (CRM, project management, etc.)",
      "Embed notes functionality without rebuilding from scratch",
      "Sync notes between multiple apps",
      "White-label Noted for custom branding"
    ]
  },

  "embeddingMethods": {
    "1_iframe": {
      "name": "iframe Embedding (Web)",
      "difficulty": "Easy",
      "setup": "Zero changes needed",
      "implementation": {
        "code": "<iframe src=\"https://noted-bay-three.vercel.app\" width=\"100%\" height=\"600px\" />",
        "requirements": [
          "Host app must be web-based",
          "Noted already deployed (✓)",
          "HTTPS required"
        ],
        "limitations": [
          "Limited cross-origin communication (postMessage only)",
          "Separate authentication context",
          "Cannot share local storage",
          "Third-party cookie restrictions in some browsers"
        ],
        "useCases": [
          "Add notes sidebar to web dashboard",
          "Embed in admin panel",
          "Include in documentation site",
          "White-label with custom domain (iframe.noted.yourdomain.com)"
        ]
      },
      "enhancements": {
        "postMessage": {
          "description": "Two-way communication between host app and Noted iframe",
          "parentToIframe": [
            "Pass user authentication token",
            "Set initial note/folder filter",
            "Change theme dynamically"
          ],
          "iframeToParent": [
            "Notify when note created/updated",
            "Send note count",
            "Trigger save events"
          ],
          "codeExample": {
            "parent": "iframe.contentWindow.postMessage({ type: 'SET_USER', userId: '123' }, '*')",
            "iframe": "window.parent.postMessage({ type: 'NOTE_CREATED', noteId: '456' }, '*')"
          }
        },
        "urlParams": {
          "description": "Configure iframe behavior via URL parameters",
          "examples": [
            "https://noted.app?folderId=abc123 (open specific folder)",
            "https://noted.app?theme=dark (force dark mode)",
            "https://noted.app?user=userId&token=authToken (SSO)"
          ]
        }
      }
    },
    "2_webview": {
      "name": "WebView Embedding (React Native/Mobile)",
      "difficulty": "Easy",
      "setup": "Zero changes to Noted needed",
      "implementation": {
        "code": "import { WebView } from 'react-native-webview';\n\n<WebView \n  source={{ uri: 'https://noted-bay-three.vercel.app' }}\n  style={{ flex: 1 }}\n  onMessage={(event) => {\n    const data = JSON.parse(event.nativeEvent.data);\n    console.log('Message from Noted:', data);\n  }}\n  injectedJavaScript=\"\n    window.ReactNativeWebView.postMessage(JSON.stringify({ type: 'READY' }));\n  \"\n/>",
        "requirements": [
          "Host app must be React Native",
          "Install react-native-webview package",
          "Noted already deployed (✓)"
        ],
        "useCases": [
          "Add notes tab to existing mobile app",
          "Embed in productivity app",
          "Include in CRM mobile app",
          "White-label for custom branding"
        ]
      },
      "enhancements": {
        "injectedJavaScript": {
          "description": "Run custom JavaScript inside Noted WebView",
          "examples": [
            "Inject authentication token into localStorage",
            "Auto-navigate to specific folder",
            "Hide UI elements (header, footer)",
            "Apply custom CSS for branding"
          ],
          "codeExample": "const injectedJS = `\n  localStorage.setItem('authToken', '${userToken}');\n  window.location.href = '/notes';\n`;"
        },
        "postMessage": {
          "description": "Two-way communication between native app and WebView",
          "nativeToWebView": [
            "Pass authentication token",
            "Trigger note creation",
            "Change theme"
          ],
          "webViewToNative": [
            "Send note created event",
            "Request native share dialog",
            "Trigger native notification"
          ]
        }
      }
    },
    "3_npmPackage": {
      "name": "npm Package (React Component Library)",
      "difficulty": "Medium",
      "setup": "Refactor Noted as reusable React components",
      "implementation": {
        "packageName": "@noted/app or @yourcompany/noted",
        "installation": "npm install @noted/app",
        "usage": "import { NotedApp, NotesList, NoteEditor } from '@noted/app';\n\nfunction MyApp() {\n  return (\n    <div>\n      <h1>My App</h1>\n      <NotedApp \n        userId={user.id}\n        supabaseUrl={process.env.SUPABASE_URL}\n        supabaseKey={process.env.SUPABASE_KEY}\n        theme=\"ocean\"\n      />\n    </div>\n  );\n}",
        "exportedComponents": [
          "<NotedApp /> - Full app",
          "<NotesList /> - Just the notes list",
          "<NoteEditor /> - Just the editor",
          "<FolderTree /> - Just the folder tree",
          "<ThemePicker /> - Theme selector"
        ],
        "requirements": [
          "Refactor Noted to remove Expo Router (use React Router or none)",
          "Extract components into standalone package",
          "Make Supabase config configurable (props)",
          "Handle auth externally (pass userId prop)",
          "Publish to npm registry"
        ],
        "useCases": [
          "Integrate notes into Next.js app",
          "Add to React admin dashboard",
          "Include in custom CRM",
          "Build white-label SaaS product"
        ]
      },
      "refactoringSteps": [
        "Remove Expo Router dependency",
        "Extract core components (NotesList, NoteEditor, etc.)",
        "Make Supabase client configurable via props",
        "Replace AuthContext with userId prop",
        "Create package.json for publishing",
        "Build with Rollup or Vite (not Expo)",
        "Publish to npm registry"
      ]
    },
    "4_apiIntegration": {
      "name": "API Integration (Headless CMS)",
      "difficulty": "Medium",
      "setup": "Expose Supabase API or build custom REST/GraphQL API",
      "implementation": {
        "approach": "Other apps interact with notes via API calls, not UI embedding",
        "endpoints": {
          "getNotes": "GET /api/notes?userId=123",
          "createNote": "POST /api/notes { title, content, userId }",
          "updateNote": "PUT /api/notes/:id { content }",
          "deleteNote": "DELETE /api/notes/:id",
          "getFolders": "GET /api/folders?userId=123",
          "searchNotes": "GET /api/notes/search?q=query&userId=123"
        },
        "authentication": {
          "method": "API keys or OAuth tokens",
          "example": "Authorization: Bearer YOUR_API_KEY"
        },
        "useCases": [
          "Sync notes to external system (CRM, project management)",
          "Build custom UI while using Noted as backend",
          "Mobile app with native UI + Noted data",
          "Automation workflows (Zapier, n8n)"
        ]
      },
      "options": {
        "option1": {
          "name": "Use Supabase API Directly",
          "pros": [
            "Already exists (Supabase PostgREST API)",
            "No additional backend code needed",
            "Built-in auth with RLS"
          ],
          "cons": [
            "Exposes database structure",
            "Less control over API responses",
            "RLS policies must be configured correctly"
          ],
          "setup": [
            "Generate Supabase API keys",
            "Configure RLS policies for external access",
            "Provide API documentation (endpoints, schemas)"
          ]
        },
        "option2": {
          "name": "Build Custom REST API",
          "pros": [
            "Full control over endpoints",
            "Can add business logic",
            "Hide database implementation details"
          ],
          "cons": [
            "Requires backend development",
            "Additional hosting costs",
            "More maintenance"
          ],
          "setup": [
            "Create Next.js API routes or Express server",
            "Implement CRUD endpoints for notes/folders",
            "Add authentication middleware",
            "Deploy to Vercel/Railway/Heroku"
          ]
        },
        "option3": {
          "name": "Build GraphQL API",
          "pros": [
            "Flexible querying (clients request exactly what they need)",
            "Single endpoint",
            "Strong typing"
          ],
          "cons": [
            "More complex than REST",
            "Requires GraphQL knowledge",
            "Additional tooling (Apollo, etc.)"
          ],
          "setup": [
            "Add GraphQL server (Apollo Server)",
            "Define schema (Note, Folder, User types)",
            "Implement resolvers",
            "Add authentication layer"
          ]
        }
      }
    }
  },

  "usageExamples": {
    "example1_crmApp": {
      "scenario": "Add Noted to CRM for customer notes",
      "method": "iframe",
      "implementation": {
        "description": "Embed Noted in CRM sidebar to take customer notes",
        "code": "<!-- In CRM customer detail page -->\n<div class=\"customer-details\">\n  <h2>Customer: John Doe</h2>\n  <div class=\"sidebar\">\n    <iframe \n      src=\"https://noted.app?folderId=customer-123&theme=ocean\" \n      width=\"400px\" \n      height=\"100%\"\n    ></iframe>\n  </div>\n</div>",
        "workflow": [
          "User opens customer page in CRM",
          "Noted iframe loads with customer-specific folder (folderId=customer-123)",
          "User creates notes about customer",
          "Notes auto-save to Supabase",
          "Notes persist across sessions"
        ],
        "enhancements": [
          "Pass customer ID via URL param",
          "Auto-create folder for each customer",
          "Use postMessage to sync note count to CRM UI"
        ]
      }
    },
    "example2_mobileApp": {
      "scenario": "Add notes feature to React Native app",
      "method": "WebView",
      "implementation": {
        "description": "Embed Noted as a tab in existing mobile app",
        "code": "// In React Native app\nimport { WebView } from 'react-native-webview';\n\nfunction NotesTab() {\n  const [noteCount, setNoteCount] = useState(0);\n\n  return (\n    <WebView\n      source={{ uri: 'https://noted.app' }}\n      onMessage={(event) => {\n        const data = JSON.parse(event.nativeEvent.data);\n        if (data.type === 'NOTE_COUNT') {\n          setNoteCount(data.count); // Update tab badge\n        }\n      }}\n      injectedJavaScript={`\n        localStorage.setItem('authToken', '${userToken}');\n      `}\n    />\n  );\n}",
        "workflow": [
          "User taps 'Notes' tab in mobile app",
          "WebView loads Noted app",
          "Injected JS sets auth token",
          "User creates/edits notes",
          "postMessage sends note count to native app",
          "Native app updates tab badge (e.g., 'Notes (5)')"
        ]
      }
    },
    "example3_adminDashboard": {
      "scenario": "Integrate notes into Next.js admin dashboard",
      "method": "npm package",
      "implementation": {
        "description": "Use Noted components directly in React app",
        "code": "// In Next.js admin dashboard\nimport { NotesList, NoteEditor } from '@noted/app';\n\nfunction AdminDashboard() {\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  return (\n    <div className=\"dashboard\">\n      <Sidebar />\n      <MainContent>\n        <NotesList \n          userId={session.user.id}\n          onNoteSelect={setSelectedNote}\n          supabaseUrl={process.env.NEXT_PUBLIC_SUPABASE_URL}\n          supabaseKey={process.env.NEXT_PUBLIC_SUPABASE_KEY}\n        />\n        <NoteEditor \n          note={selectedNote}\n          onSave={(note) => console.log('Note saved:', note)}\n        />\n      </MainContent>\n    </div>\n  );\n}",
        "workflow": [
          "Admin dashboard imports Noted components",
          "Pass Supabase credentials via props",
          "Use alongside other dashboard components",
          "Full customization of UI/styling",
          "Share authentication with dashboard"
        ]
      }
    },
    "example4_automation": {
      "scenario": "Sync notes to project management tool (Asana, Jira)",
      "method": "API integration",
      "implementation": {
        "description": "Use Supabase API or custom API to sync notes to external tools",
        "code": "// In automation workflow (Zapier, n8n, custom script)\nasync function syncNoteToAsana(noteId) {\n  // 1. Fetch note from Noted API\n  const note = await fetch(`https://noted.app/api/notes/${noteId}`, {\n    headers: { 'Authorization': `Bearer ${API_KEY}` }\n  }).then(r => r.json());\n\n  // 2. Create task in Asana\n  await fetch('https://app.asana.com/api/1.0/tasks', {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${ASANA_TOKEN}` },\n    body: JSON.stringify({\n      name: note.title,\n      notes: note.content,\n      projects: ['PROJECT_ID']\n    })\n  });\n}",
        "workflow": [
          "User creates note in Noted",
          "Webhook or polling detects new note",
          "Automation script fetches note via API",
          "Script creates task in Asana/Jira",
          "Bi-directional sync (optional)"
        ]
      }
    }
  },

  "implementationPriority": {
    "phase1": {
      "name": "iframe/WebView URL Parameters",
      "duration": "2-4 hours",
      "tasks": [
        "Add URL param handling (folderId, theme, userId)",
        "Test iframe embedding in sample HTML page",
        "Test WebView embedding in React Native sample",
        "Document embedding parameters"
      ],
      "deliverable": "Noted can be embedded via iframe/WebView with custom config"
    },
    "phase2": {
      "name": "postMessage Communication",
      "duration": "4-6 hours",
      "tasks": [
        "Add window.addEventListener('message') handler in Noted",
        "Implement postMessage API (SET_USER, SET_FOLDER, etc.)",
        "Send events to parent (NOTE_CREATED, NOTE_UPDATED)",
        "Create demo parent app showing two-way communication"
      ],
      "deliverable": "Parent apps can communicate with Noted iframe"
    },
    "phase3": {
      "name": "Supabase API Documentation",
      "duration": "2-3 hours",
      "tasks": [
        "Document Supabase PostgREST endpoints",
        "Provide API key generation instructions",
        "Create example API calls (curl, JavaScript)",
        "Document RLS policies for external access"
      ],
      "deliverable": "External apps can access Noted data via API"
    },
    "phase4": {
      "name": "npm Package (Component Library)",
      "duration": "20-40 hours",
      "tasks": [
        "Remove Expo Router dependency",
        "Extract core components",
        "Make Supabase config props-based",
        "Create package.json and build config",
        "Write component documentation",
        "Publish to npm"
      ],
      "deliverable": "React apps can install and use Noted components"
    }
  },

  "challenges": [
    "Authentication: How to share auth between host app and Noted?",
    "Third-party cookies: iframe may not work in Safari/Chrome with strict settings",
    "Styling conflicts: Embedded Noted may clash with host app CSS",
    "Data isolation: How to prevent users from seeing each other's notes?",
    "Versioning: Host apps may break if Noted API changes",
    "Performance: iframe adds overhead vs native components"
  ],

  "securityConsiderations": [
    "Validate postMessage origin (check event.origin)",
    "Use HTTPS only for iframe src",
    "Implement CORS headers for API access",
    "Rate limit API endpoints",
    "Require authentication for all API calls",
    "Audit RLS policies to prevent data leaks",
    "Don't expose sensitive data in postMessage",
    "Validate all URL parameters"
  ],

  "monetizationOpportunities": [
    "White-label licensing (monthly fee per embedded instance)",
    "API usage tiers (free: 1000 requests/month, paid: unlimited)",
    "Custom domain hosting (iframe.noted.yourcompany.com)",
    "Premium features unlock (realtime sync, advanced search)",
    "Enterprise support for embedding"
  ],

  "notes": [
    "iframe and WebView methods work immediately with zero changes to Noted",
    "npm package requires significant refactoring (remove Expo Router)",
    "API integration can use existing Supabase API or build custom layer",
    "Most practical for quick wins: iframe + URL params + postMessage",
    "White-label embedding could be a business model",
    "Consider creating 'Noted Embeddable' product variant"
  ]
}
