{
  "title": "IDE ↔ Noted ↔ AI Agent Documentation Pipeline",
  "subtitle": "Use Noted as communication layer between developer, IDE, and AI agents",
  "version": "1.0.0",
  "date": "2025-10-09",
  "status": "planning",
  "priority": "high",
  "effort": "high (30-40 hours for MVP)",

  "overview": {
    "description": "Transform Noted into a central knowledge hub where developers write documentation in their IDE, notes automatically sync to Noted app, and AI agents (like Claude Code) can read/write to the same knowledge base using RAG. Enables persistent agent memory and living documentation.",
    "core_concept": "Noted becomes the 'shared brain' between human developers and AI agents",
    "key_innovation": "Agent has persistent access to project context without developer repeating information every session",
    "target_users": [
      "Developers using Claude Code or similar AI coding assistants",
      "Teams wanting shared documentation accessible to both humans and AI",
      "Solo developers building complex projects with AI assistance"
    ]
  },

  "the_problem": {
    "current_state": [
      "AI agents have no memory between sessions",
      "Developer must repeat project context every time",
      "Documentation lives separate from agent workflow",
      "Agent-generated docs don't persist anywhere useful",
      "No feedback loop: agent learns → documents → developer corrects → agent relearns"
    ],
    "pain_points": [
      "Context switching: leave IDE → open separate docs → copy/paste",
      "Lost context: agent forgets decisions from previous sessions",
      "Manual documentation: developer must write everything agent figures out",
      "Scattered knowledge: project info across Notion, Slack, code comments, etc."
    ]
  },

  "the_solution": {
    "architecture": "Three-way real-time sync: IDE ↔ Noted ↔ AI Agent",
    "data_flow": [
      "Developer writes/edits notes in IDE (VS Code, Cursor, etc.)",
      "IDE extension syncs changes to Noted app via API",
      "Notes get vector embeddings (RAG infrastructure)",
      "Agent queries Noted via RAG when user asks questions",
      "Agent can write new notes back to Noted",
      "New notes appear in IDE automatically",
      "Developer reviews/corrects → cycle continues"
    ],
    "benefits": [
      "Agent has persistent project knowledge across sessions",
      "Living documentation that both humans and AI maintain",
      "Context automatically available to agent (no copy/paste)",
      "Agent documents its work → developer reviews in IDE",
      "Single source of truth for project knowledge",
      "Collaboration between human and AI made seamless"
    ]
  },

  "architecture_diagram": {
    "visual": "┌──────────────┐\n│   VS Code    │  Developer writes docs\n│   (+ Ext)    │  Auto-save triggers sync\n└──────┬───────┘\n       │ REST API / WebSocket\n       ↓\n┌──────────────┐\n│  Noted App   │  Central knowledge hub\n│  + Supabase  │  - Notes database\n│  + RAG       │  - Vector embeddings\n└──────┬───────┘  - Search/query API\n       │\n       │ RAG Query API\n       ↓\n┌──────────────┐\n│  AI Agent    │  Claude Code, Cursor AI, etc.\n│ (Claude Code)│  - Reads via RAG\n└──────────────┘  - Writes via API",
    "components": {
      "ide_extension": "VS Code extension monitoring project files",
      "noted_api": "Supabase REST API + custom Edge Functions",
      "rag_system": "Vector embeddings + semantic search (from RAG plan)",
      "agent_interface": "API methods for agents to read/write notes"
    }
  },

  "use_cases": {
    "use_case_1_agent_learns_from_docs": {
      "title": "Agent learns project context from developer's notes",
      "scenario": [
        "1. Developer creates `/docs/architecture.md` in project",
        "2. IDE extension syncs to Noted app",
        "3. Noted generates embedding (RAG)",
        "4. Developer asks agent: 'How does authentication work?'",
        "5. Agent queries RAG → finds architecture.md",
        "6. Agent answers based on YOUR documentation",
        "7. No need to repeat context every session"
      ],
      "value": "Agent has persistent memory of project decisions"
    },
    "use_case_2_agent_documents_work": {
      "title": "Agent documents implementation decisions as it works",
      "scenario": [
        "1. Developer: 'Implement user authentication'",
        "2. Agent implements auth system",
        "3. Agent creates note 'Auth Implementation.md' via API",
        "4. Note syncs to Noted app",
        "5. Note appears in IDE sidebar automatically",
        "6. Developer reviews agent's documentation",
        "7. Developer makes corrections in IDE",
        "8. Changes sync back to Noted",
        "9. Agent sees updates on next query"
      ],
      "value": "Living documentation maintained by both human and AI"
    },
    "use_case_3_team_knowledge_base": {
      "title": "Shared knowledge base for team + AI",
      "scenario": [
        "1. Team members write docs in their IDEs",
        "2. All docs sync to central Noted workspace",
        "3. Any team member's agent can query all docs",
        "4. Agent A learns from what Agent B documented",
        "5. Consistent context across entire team",
        "6. New team member: agent reads all docs instantly"
      ],
      "value": "Single source of truth accessible by humans and AI"
    },
    "use_case_4_iterative_refinement": {
      "title": "Iterative documentation refinement loop",
      "scenario": [
        "1. Agent generates initial API design doc",
        "2. Developer reviews in IDE, adds corrections",
        "3. Agent reads updated doc",
        "4. Agent refines implementation based on corrections",
        "5. Agent updates doc with final decisions",
        "6. Developer approves → doc becomes reference",
        "7. Future queries use refined doc"
      ],
      "value": "Documentation improves through human-AI collaboration"
    },
    "use_case_5_context_persistence": {
      "title": "Agent remembers across coding sessions",
      "scenario": [
        "Day 1: Agent helps design database schema",
        "        Agent writes 'Database Schema.md'",
        "Day 2: New session, developer asks about tables",
        "        Agent queries RAG → reads yesterday's doc",
        "        Agent remembers schema without being told",
        "Day 3: Schema changes, developer updates doc",
        "        Agent automatically sees new version"
      ],
      "value": "Agent context persists days, weeks, months"
    }
  },

  "implementation": {
    "phase_1_vs_code_extension_foundation": {
      "description": "Build basic VS Code extension that syncs markdown files to Noted",
      "duration": "8-12 hours",
      "deliverables": [
        "VS Code extension package (TypeScript)",
        "File watcher for project /docs folder or .noted/ folder",
        "One-way sync: IDE → Noted (create/update notes)",
        "Authentication via API key stored in VS Code settings",
        "Status bar indicator (synced/syncing/error)"
      ],
      "technical_details": {
        "extension_structure": {
          "src/extension.ts": "Main extension entry point",
          "src/fileWatcher.ts": "Monitor .md files for changes",
          "src/notedClient.ts": "API client for Noted backend",
          "src/auth.ts": "Handle API key authentication",
          "package.json": "Extension manifest"
        },
        "api_calls": [
          "POST /api/notes/sync - Create or update note from file",
          "GET /api/notes/list - List all synced notes",
          "DELETE /api/notes/{id} - Delete note when file removed"
        ],
        "file_watching": "Use VS Code workspace.createFileSystemWatcher to monitor *.md files",
        "sync_strategy": "Debounce file changes (500ms) to avoid excessive API calls",
        "conflict_resolution_phase1": "Last write wins (simple MVP approach)"
      },
      "setup_flow": {
        "step_1": "User installs 'Noted Sync' extension from VS Code marketplace",
        "step_2": "Extension prompts for Noted API key (from app settings)",
        "step_3": "User configures sync folder (default: /docs or /.noted)",
        "step_4": "Extension scans folder and uploads existing .md files",
        "step_5": "Status bar shows 'Synced ✓' when complete"
      },
      "user_settings": {
        "noted.apiKey": "User's API key from Noted app",
        "noted.syncFolder": "Folder to watch (default: 'docs')",
        "noted.autoSync": "Enable/disable auto-sync (default: true)",
        "noted.syncOnSave": "Sync immediately on save vs debounced (default: true)"
      }
    },

    "phase_2_noted_api_sync_endpoints": {
      "description": "Add API endpoints to Noted backend for IDE sync operations",
      "duration": "4-6 hours",
      "deliverables": [
        "New Supabase Edge Function: ide-sync",
        "API routes for create/update/delete notes from IDE",
        "Special note metadata: synced_from_ide: boolean, ide_file_path: string",
        "Rate limiting (100 requests/minute per user)",
        "Webhook support (optional for phase 2)"
      ],
      "technical_details": {
        "edge_function": {
          "file": "supabase/functions/ide-sync/index.ts",
          "routes": [
            "POST /ide-sync/create - Create new note from IDE file",
            "PUT /ide-sync/update/{id} - Update existing note",
            "DELETE /ide-sync/delete/{id} - Delete note (file removed in IDE)",
            "GET /ide-sync/list - List all IDE-synced notes for user",
            "GET /ide-sync/status - Check sync status and last sync time"
          ]
        },
        "database_changes": {
          "migration": "20251010_add_ide_sync_metadata.sql",
          "changes": [
            "ALTER TABLE notes ADD COLUMN synced_from_ide BOOLEAN DEFAULT FALSE;",
            "ALTER TABLE notes ADD COLUMN ide_file_path TEXT;",
            "ALTER TABLE notes ADD COLUMN last_ide_sync_at TIMESTAMP;",
            "CREATE INDEX idx_notes_ide_synced ON notes(user_id, synced_from_ide) WHERE synced_from_ide = TRUE;"
          ]
        },
        "authentication": "Use existing user_api_keys table, validate API key in Edge Function",
        "rate_limiting": "Use Supabase Edge Function rate limiting (100 req/min)",
        "sync_metadata": {
          "synced_from_ide": true,
          "ide_file_path": "docs/architecture.md",
          "ide_last_modified": "2025-10-09T10:30:00Z",
          "last_ide_sync_at": "2025-10-09T10:30:05Z"
        }
      }
    },

    "phase_3_two_way_sync": {
      "description": "Enable Noted → IDE sync (agent writes, developer sees in IDE)",
      "duration": "6-8 hours",
      "deliverables": [
        "IDE extension polls Noted API for updates",
        "New notes created in Noted appear in IDE",
        "Note edits in Noted update IDE files",
        "Conflict detection and resolution UI",
        "Merge conflict markers (similar to git)"
      ],
      "technical_details": {
        "polling_strategy": {
          "method": "Poll Noted API every 10 seconds for updates",
          "endpoint": "GET /ide-sync/changes?since={timestamp}",
          "optimization": "Only fetch notes modified after last sync",
          "fallback": "WebSocket for real-time updates (phase 4)"
        },
        "conflict_detection": {
          "scenario": "Note edited in both IDE and Noted app simultaneously",
          "detection": "Compare last_modified timestamps",
          "resolution_options": [
            "Keep IDE version",
            "Keep Noted version",
            "Show diff and let user merge",
            "Create both as separate notes"
          ],
          "ui": "VS Code diff editor showing both versions side-by-side"
        },
        "file_updates": {
          "strategy": "Write to IDE file system using VS Code workspace API",
          "notification": "Show toast: 'architecture.md updated by Noted app'",
          "editor_behavior": "If file open in editor, show reload prompt"
        }
      }
    },

    "phase_4_agent_integration_layer": {
      "description": "Enable AI agents to read/write notes via API",
      "duration": "8-10 hours",
      "deliverables": [
        "Agent API client library (TypeScript/Python)",
        "Methods: queryNotes(), createNote(), updateNote()",
        "Integration with RAG system (query by semantic meaning)",
        "Agent authentication via service account or user delegation",
        "Usage examples and documentation"
      ],
      "technical_details": {
        "agent_api_client": {
          "file": "services/agent/noted-agent-client.ts",
          "methods": [
            "queryNotes(query: string, options?: QueryOptions): Promise<Note[]> - Semantic search via RAG",
            "createNote(title: string, content: string, metadata?: NoteMetadata): Promise<Note>",
            "updateNote(noteId: string, updates: Partial<Note>): Promise<Note>",
            "listProjectNotes(projectId?: string): Promise<Note[]>",
            "generateEmbedding(content: string): Promise<number[]> - For custom RAG implementations"
          ]
        },
        "rag_integration": {
          "requirement": "RAG system must be implemented (see rag-ask-your-notes-implementation.json)",
          "workflow": [
            "1. Agent calls queryNotes('how does authentication work?')",
            "2. Client generates embedding for query",
            "3. Client calls vector similarity search",
            "4. Client returns top K relevant notes",
            "5. Agent reads notes and formulates answer"
          ]
        },
        "authentication_strategies": {
          "option_1_user_delegation": {
            "description": "Agent acts on behalf of user",
            "flow": "User grants agent access to their Noted account via OAuth",
            "pros": ["Proper authorization", "Audit trail"],
            "cons": ["Complex setup", "Requires user action"]
          },
          "option_2_service_account": {
            "description": "Agent has its own Noted account",
            "flow": "Create special 'agent' user with API key",
            "pros": ["Simple", "No user action needed"],
            "cons": ["All agents share same account", "Less secure"]
          },
          "option_3_project_api_key": {
            "description": "Project-level API key (recommended)",
            "flow": "User generates project-specific API key in Noted, adds to .env",
            "pros": ["Project-scoped", "Easy to revoke", "No OAuth complexity"],
            "cons": ["Must be kept secret"]
          },
          "recommended": "Option 3 - Project API key"
        },
        "usage_example": {
          "language": "TypeScript",
          "code": "import { NotedAgentClient } from '@noted/agent-client';\n\n// Initialize client\nconst noted = new NotedAgentClient({\n  apiKey: process.env.NOTED_PROJECT_API_KEY,\n  projectId: 'my-project-123'\n});\n\n// Agent queries documentation\nconst docs = await noted.queryNotes('authentication architecture');\nconsole.log(`Found ${docs.length} relevant docs`);\n\n// Agent reads first doc\nconst authDoc = docs[0];\nconsole.log(authDoc.title); // 'Authentication Architecture'\nconsole.log(authDoc.content); // Full markdown content\n\n// Agent implements feature based on docs\n// ...\n\n// Agent documents implementation\nawait noted.createNote(\n  'Auth Implementation Notes',\n  '# Implementation\\n\\n- Used JWT tokens\\n- Session stored in Redis\\n...'\n);"
        }
      }
    },

    "phase_5_ide_sidebar_panel": {
      "description": "Add VS Code sidebar panel for managing synced notes",
      "duration": "6-8 hours",
      "deliverables": [
        "Custom sidebar view in VS Code",
        "Tree view of all synced notes",
        "Quick actions: open, sync, create new note",
        "Sync status indicators",
        "Search/filter notes"
      ],
      "technical_details": {
        "sidebar_ui": {
          "location": "VS Code Activity Bar (new icon)",
          "icon": "noted-logo or document icon",
          "view_content": [
            "📁 Synced Notes (folder)",
            "  📄 architecture.md (synced 2m ago)",
            "  📄 api-design.md (synced 5m ago)",
            "  ⚠️ database.md (conflict)",
            "➕ Create New Note",
            "🔄 Sync All",
            "⚙️ Settings"
          ]
        },
        "tree_view_implementation": {
          "class": "NotedTreeDataProvider implements vscode.TreeDataProvider",
          "methods": [
            "getTreeItem(element): TreeItem",
            "getChildren(element?): Note[]",
            "refresh(): void - Reload tree from API"
          ]
        },
        "context_menu_actions": [
          "Open in Editor",
          "Open in Noted App",
          "Copy Public URL (if published)",
          "Sync Now",
          "Resolve Conflict",
          "Remove from Sync"
        ]
      }
    },

    "phase_6_real_time_collaboration": {
      "description": "Replace polling with real-time WebSocket updates",
      "duration": "6-8 hours",
      "deliverables": [
        "WebSocket connection between IDE and Noted",
        "Live updates when agent writes new note",
        "Live updates when note edited in Noted app",
        "Operational transforms for simultaneous edits (advanced)",
        "Presence indicators (who's editing what)"
      ],
      "technical_details": {
        "websocket_implementation": {
          "server": "Supabase Realtime (built-in WebSocket support)",
          "client": "VS Code extension subscribes to note changes",
          "subscription": "supabase.channel('notes').on('postgres_changes', callback)"
        },
        "real_time_events": [
          "note_created - New note added by agent/app",
          "note_updated - Note content changed",
          "note_deleted - Note removed",
          "sync_conflict - Simultaneous edit detected"
        ],
        "operational_transforms": {
          "description": "Advanced conflict resolution for simultaneous edits",
          "library": "Use Yjs or Automerge for CRDT-based merging",
          "complexity": "High - consider for Phase 7 or later",
          "fallback": "Simple last-write-wins for MVP"
        }
      }
    }
  },

  "technical_architecture": {
    "components_overview": {
      "vs_code_extension": {
        "language": "TypeScript",
        "framework": "VS Code Extension API",
        "size": "~2000 lines of code",
        "dependencies": ["@types/vscode", "axios for API calls", "chokidar for file watching"]
      },
      "noted_backend": {
        "location": "Supabase Edge Functions",
        "language": "TypeScript (Deno runtime)",
        "new_functions": ["ide-sync", "agent-query"],
        "modifications": "Add ide_sync metadata to notes table"
      },
      "agent_client_library": {
        "languages": ["TypeScript (primary)", "Python (optional)"],
        "distribution": "npm package @noted/agent-client",
        "dependencies": ["axios", "openai (for embeddings)"]
      }
    },
    "data_flow_detailed": {
      "create_note_flow": [
        "1. Developer creates docs/auth.md in VS Code",
        "2. File watcher detects new file",
        "3. Extension reads file content",
        "4. Extension POST /ide-sync/create with content + metadata",
        "5. Edge Function validates API key",
        "6. Edge Function inserts note into notes table",
        "7. Edge Function generates embedding (calls generate-embedding)",
        "8. Edge Function returns note ID + sync status",
        "9. Extension stores mapping (file_path → note_id)",
        "10. Status bar shows 'Synced ✓'"
      ],
      "agent_query_flow": [
        "1. User asks agent: 'How does auth work?'",
        "2. Agent calls noted.queryNotes('authentication')",
        "3. Client generates embedding for 'authentication'",
        "4. Client calls rag-query Edge Function",
        "5. Edge Function searches notes via vector similarity",
        "6. Edge Function returns top 5 relevant notes",
        "7. Agent reads notes and formulates answer",
        "8. Agent responds to user with info from notes"
      ],
      "agent_create_flow": [
        "1. Agent finishes implementing feature",
        "2. Agent calls noted.createNote('Impl Notes', content)",
        "3. Client POST /ide-sync/create",
        "4. Edge Function creates note with synced_from_ide=false",
        "5. WebSocket emits note_created event",
        "6. IDE extension receives event",
        "7. Extension writes new file to docs/impl-notes.md",
        "8. VS Code shows notification: 'New note from agent'"
      ]
    },
    "security_considerations": [
      "API keys stored in VS Code secure storage (not plain text)",
      "API keys scoped to project (not global user access)",
      "Rate limiting on all sync endpoints",
      "File path validation (prevent directory traversal)",
      "Content size limits (max 1MB per note)",
      "No execution of code from synced files"
    ],
    "performance_optimizations": [
      "Debounce file changes (500ms) to avoid excessive syncs",
      "Batch sync multiple file changes into single API call",
      "Cache note metadata locally (reduce API calls)",
      "Incremental sync (only changed files)",
      "Lazy load embeddings (don't block sync on embedding generation)"
    ]
  },

  "user_experience": {
    "developer_workflow": {
      "setup": [
        "1. Install VS Code extension from marketplace",
        "2. Open project in VS Code",
        "3. Extension prompts: 'Connect to Noted account'",
        "4. Developer generates API key in Noted app settings",
        "5. Paste API key into VS Code extension",
        "6. Select sync folder (defaults to /docs)",
        "7. Extension scans and uploads existing notes",
        "8. Status bar: 'Noted: 5 notes synced ✓'"
      ],
      "daily_use": [
        "Developer writes docs in /docs folder as normal",
        "Every save auto-syncs to Noted (no manual action)",
        "Status bar always shows sync status",
        "Sidebar panel shows list of synced notes",
        "If agent creates new note, notification appears",
        "Click notification to open new file in editor"
      ],
      "conflict_handling": [
        "Extension detects conflict (edited in both places)",
        "Shows VS Code diff editor with both versions",
        "Developer chooses: keep local, keep remote, or merge",
        "After resolution, extension syncs final version"
      ]
    },
    "agent_workflow": {
      "reading_docs": [
        "User asks agent a question",
        "Agent queries Noted via RAG",
        "Agent receives relevant documentation",
        "Agent formulates answer from docs",
        "Agent cites source notes in response"
      ],
      "writing_docs": [
        "Agent implements feature",
        "Agent documents implementation decisions",
        "Agent creates note via API",
        "Note syncs to IDE automatically",
        "Developer reviews and refines documentation"
      ]
    }
  },

  "marketplace_distribution": {
    "vs_code_marketplace": {
      "extension_name": "Noted Sync",
      "display_name": "Noted - AI Documentation Hub",
      "description": "Sync your project documentation to Noted and enable AI agents to read/write living docs",
      "publisher": "noted-app",
      "categories": ["Documentation", "AI", "Productivity"],
      "keywords": ["noted", "documentation", "ai", "rag", "sync", "markdown"],
      "rating_goal": "4.5+ stars",
      "installation_goal": "1000+ installs in first 3 months"
    },
    "marketing_positioning": {
      "tagline": "Turn your IDE into an AI-powered documentation hub",
      "value_props": [
        "✅ Write docs in your editor, sync to Noted automatically",
        "🤖 AI agents can read your project docs via RAG",
        "📝 Agents document their work, you review in IDE",
        "🔄 Living documentation maintained by human + AI",
        "💾 Persistent agent memory across sessions"
      ],
      "target_audience": "Developers using AI coding assistants (Claude Code, Cursor, Copilot)"
    }
  },

  "cost_analysis": {
    "development_costs": {
      "phase_1": "8-12 hours (VS Code extension MVP)",
      "phase_2": "4-6 hours (Noted API endpoints)",
      "phase_3": "6-8 hours (Two-way sync)",
      "phase_4": "8-10 hours (Agent integration)",
      "phase_5": "6-8 hours (Sidebar panel)",
      "phase_6": "6-8 hours (Real-time WebSocket)",
      "total": "38-52 hours for complete implementation"
    },
    "ongoing_costs": {
      "api_usage": "Minimal - same Supabase costs as normal app usage",
      "embeddings": "$0.00001 per note (one-time per note)",
      "rag_queries": "$0.00001 per query (agent queries)",
      "storage": "Same as normal notes (no additional cost)"
    },
    "user_cost_model": "Free to use (users already pay for Noted + their own AI API keys)"
  },

  "success_metrics": {
    "adoption": [
      "% of Noted users who install VS Code extension",
      "Average notes synced per user",
      "Daily active users of extension",
      "Extension marketplace rating"
    ],
    "usage": [
      "Number of sync operations per day",
      "Number of agent queries to synced notes",
      "Number of notes created by agents",
      "Average session time with extension active"
    ],
    "quality": [
      "Sync reliability (% successful syncs)",
      "Conflict rate (% of syncs with conflicts)",
      "User satisfaction survey score",
      "GitHub stars on extension repo"
    ]
  },

  "rollout_strategy": {
    "phase_1_alpha": {
      "duration": "2 weeks",
      "users": "Personal testing + 5 beta users",
      "features": ["One-way sync only", "Basic file watching", "Simple API"],
      "goals": ["Validate core sync functionality", "Test API reliability", "Gather feedback"]
    },
    "phase_2_beta": {
      "duration": "4 weeks",
      "users": "50 beta users via waitlist",
      "features": ["Two-way sync", "Conflict resolution", "Agent integration"],
      "goals": ["Test at scale", "Identify edge cases", "Refine UX"]
    },
    "phase_3_public": {
      "duration": "Ongoing",
      "users": "All Noted users + VS Code marketplace",
      "features": ["All features", "Real-time sync", "Sidebar panel"],
      "goals": ["Public launch", "Marketing campaign", "Community feedback"]
    }
  },

  "future_enhancements": {
    "phase_7_multi_ide_support": [
      "JetBrains plugin (IntelliJ, WebStorm, PyCharm)",
      "Neovim plugin",
      "Sublime Text plugin",
      "Use same backend API (just different IDE clients)"
    ],
    "phase_8_team_collaboration": [
      "Shared project workspaces",
      "Team member presence indicators",
      "Review and approval workflow for agent-generated docs",
      "Commenting and discussions on notes"
    ],
    "phase_9_advanced_features": [
      "Code snippet extraction (auto-link code to notes)",
      "Visual diagrams from markdown (Mermaid, PlantUML)",
      "Version history and rollback",
      "Custom templates for different doc types",
      "Integration with GitHub PRs (auto-link notes to PRs)"
    ]
  },

  "comparison_with_existing_tools": {
    "vs_notion_api": {
      "noted_advantage": "Built-in RAG, designed for AI agents from ground up",
      "notion_limitation": "No native RAG, complex API, slow for real-time sync"
    },
    "vs_obsidian_sync": {
      "noted_advantage": "Cloud-first with RAG, multi-device, agent-friendly API",
      "obsidian_limitation": "Local-first, no RAG, limited agent integration"
    },
    "vs_github_wiki": {
      "noted_advantage": "Real-time IDE sync, RAG queries, richer formatting",
      "github_limitation": "Manual git workflow, no RAG, no AI agent integration"
    },
    "vs_confluence": {
      "noted_advantage": "Developer-first, IDE integration, lightweight",
      "confluence_limitation": "Enterprise bloat, slow, not designed for code projects"
    }
  },

  "open_source_strategy": {
    "approach": "Open source the VS Code extension, keep backend proprietary",
    "rationale": [
      "Extension code benefits from community contributions",
      "Backend API is core value (keep proprietary)",
      "Open source extension builds trust and adoption",
      "Community can add features and fix bugs"
    ],
    "license": "MIT License for extension",
    "repository": "https://github.com/noted-app/noted-vscode",
    "contribution_guidelines": "Standard CONTRIBUTING.md with PR templates"
  },

  "technical_challenges": {
    "challenge_1_file_conflicts": {
      "problem": "Note edited in both IDE and Noted app simultaneously",
      "solution": "Three-way merge with visual diff editor",
      "complexity": "Medium",
      "mitigation": "Start with last-write-wins, add advanced merge later"
    },
    "challenge_2_large_files": {
      "problem": "Syncing 10MB+ files (e.g., huge markdown docs)",
      "solution": "Chunk large files, only sync changed chunks",
      "complexity": "High",
      "mitigation": "Set file size limit (1MB) for MVP"
    },
    "challenge_3_performance": {
      "problem": "Syncing 1000+ notes on initial setup takes minutes",
      "solution": "Background batch sync with progress indicator",
      "complexity": "Low",
      "mitigation": "Show progress bar, allow background sync"
    },
    "challenge_4_auth_security": {
      "problem": "API keys must be secure but easy to use",
      "solution": "Use VS Code secure storage API",
      "complexity": "Low",
      "mitigation": "Never store in plain text, use encryption"
    }
  },

  "developer_documentation": {
    "guides_needed": [
      "Quickstart: Install and setup in 5 minutes",
      "Configuration: All settings explained",
      "Agent Integration: How to query notes from your AI agent",
      "API Reference: Complete REST API documentation",
      "Troubleshooting: Common issues and solutions",
      "Advanced: Custom sync strategies and conflict resolution"
    ],
    "code_examples": [
      "Basic sync setup",
      "Agent querying notes via RAG",
      "Agent creating new notes",
      "Handling conflicts programmatically",
      "Custom file watchers"
    ]
  },

  "notes": [
    "This is a game-changer for AI-assisted development",
    "Turns Noted into the 'operating system' for human-AI collaboration",
    "Living documentation is the future - this makes it practical",
    "RAG + IDE integration = persistent agent memory",
    "Start with VS Code (widest audience), expand to other IDEs later",
    "Open source the extension to build community and trust",
    "Focus on developer experience - make sync invisible and automatic",
    "This positions Noted as the go-to tool for AI-assisted development teams"
  ]
}
