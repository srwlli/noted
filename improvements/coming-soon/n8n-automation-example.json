{
  "title": "n8n Automation with Noted",
  "dateCreated": "2025-10-02",
  "status": "example",
  "priority": "medium",

  "overview": {
    "description": "Concrete examples of automating Noted using n8n workflow automation platform",
    "whatIsN8n": "n8n is an open-source workflow automation tool (like Zapier) that can connect Noted to 400+ other apps and services",
    "benefits": [
      "Automate note creation from external sources (emails, Slack, forms)",
      "Sync notes to other tools (Notion, Google Docs, Asana)",
      "Set up smart notifications and reminders",
      "Create backup workflows",
      "Build custom integrations without coding"
    ]
  },

  "prerequisitesForN8n": {
    "notedRequirements": [
      "Expose Supabase API endpoints (already exists via PostgREST)",
      "Generate Supabase service role key or anon key",
      "Configure RLS policies to allow API access",
      "Optional: Add webhook support for realtime events"
    ],
    "n8nSetup": [
      "Install n8n (self-hosted or cloud.n8n.io)",
      "Create Supabase credentials in n8n",
      "Understand basic n8n workflow building"
    ]
  },

  "example1_emailToNote": {
    "name": "Email → Noted",
    "description": "Automatically create a note from emails sent to a specific address",
    "useCase": "Forward important emails to notes@yourdomain.com and they become notes in Noted",

    "workflow": {
      "trigger": {
        "node": "Email Trigger (IMAP)",
        "config": {
          "host": "imap.gmail.com",
          "user": "notes@yourdomain.com",
          "password": "APP_PASSWORD",
          "mailbox": "INBOX"
        },
        "description": "Triggers when new email arrives"
      },
      "step1": {
        "node": "Extract Email Data",
        "type": "Set Node",
        "mapping": {
          "title": "{{ $json.subject }}",
          "content": "{{ $json.textPlain || $json.html }}",
          "from": "{{ $json.from.address }}",
          "date": "{{ $json.date }}"
        }
      },
      "step2": {
        "node": "Create Note in Supabase",
        "type": "HTTP Request Node",
        "method": "POST",
        "url": "https://YOUR_PROJECT.supabase.co/rest/v1/notes",
        "headers": {
          "apikey": "YOUR_SUPABASE_ANON_KEY",
          "Authorization": "Bearer YOUR_SUPABASE_ANON_KEY",
          "Content-Type": "application/json",
          "Prefer": "return=representation"
        },
        "body": {
          "title": "{{ $json.title }}",
          "content": "From: {{ $json.from }}\\n\\nDate: {{ $json.date }}\\n\\n{{ $json.content }}",
          "user_id": "YOUR_USER_ID",
          "folder_id": "EMAIL_FOLDER_ID",
          "created_at": "{{ $now }}"
        }
      },
      "step3": {
        "node": "Send Confirmation (Optional)",
        "type": "Send Email Node",
        "config": {
          "to": "{{ $json.from }}",
          "subject": "Email saved to Noted",
          "text": "Your email '{{ $json.title }}' has been saved to your notes."
        }
      }
    },

    "workflowDiagram": "[Email Trigger] → [Extract Data] → [HTTP Request: POST to Supabase] → [Send Confirmation]",

    "n8nWorkflowJSON": {
      "nodes": [
        {
          "parameters": {
            "mailbox": "INBOX"
          },
          "name": "Email Trigger",
          "type": "n8n-nodes-base.emailReadImap",
          "position": [250, 300]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://YOUR_PROJECT.supabase.co/rest/v1/notes",
            "authentication": "headerAuth",
            "options": {},
            "headerParametersUi": {
              "parameter": [
                {
                  "name": "apikey",
                  "value": "YOUR_SUPABASE_KEY"
                },
                {
                  "name": "Authorization",
                  "value": "Bearer YOUR_SUPABASE_KEY"
                },
                {
                  "name": "Prefer",
                  "value": "return=representation"
                }
              ]
            },
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "title",
                  "value": "={{ $json.subject }}"
                },
                {
                  "name": "content",
                  "value": "={{ $json.textPlain }}"
                },
                {
                  "name": "user_id",
                  "value": "YOUR_USER_ID"
                }
              ]
            }
          },
          "name": "Create Note",
          "type": "n8n-nodes-base.httpRequest",
          "position": [450, 300]
        }
      ],
      "connections": {
        "Email Trigger": {
          "main": [[{ "node": "Create Note", "type": "main", "index": 0 }]]
        }
      }
    }
  },

  "example2_slackToNote": {
    "name": "Slack Starred Message → Noted",
    "description": "When you star a Slack message, automatically save it as a note",
    "useCase": "Keep important Slack discussions in Noted for reference",

    "workflow": {
      "trigger": {
        "node": "Slack Trigger",
        "event": "star_added",
        "description": "Triggers when you star a message in Slack"
      },
      "step1": {
        "node": "Get Message Details",
        "type": "Slack Node",
        "operation": "Get Message",
        "messageId": "{{ $json.item.message.ts }}",
        "channel": "{{ $json.item.channel }}"
      },
      "step2": {
        "node": "Format Note Content",
        "type": "Set Node",
        "mapping": {
          "title": "Slack: {{ $json.channel_name }} - {{ $json.user }}",
          "content": "{{ $json.text }}\\n\\n---\\nChannel: #{{ $json.channel_name }}\\nFrom: @{{ $json.user }}\\nDate: {{ $json.ts }}\\nLink: {{ $json.permalink }}"
        }
      },
      "step3": {
        "node": "Create Note in Supabase",
        "type": "HTTP Request Node",
        "method": "POST",
        "url": "https://YOUR_PROJECT.supabase.co/rest/v1/notes",
        "body": {
          "title": "{{ $json.title }}",
          "content": "{{ $json.content }}",
          "user_id": "YOUR_USER_ID",
          "folder_id": "SLACK_FOLDER_ID"
        }
      }
    },

    "workflowDiagram": "[Slack Trigger: star_added] → [Get Message Details] → [Format Content] → [Create Note]"
  },

  "example3_notionSync": {
    "name": "Noted → Notion Sync",
    "description": "Sync all notes from a specific folder to Notion database",
    "useCase": "Publish public notes to Notion knowledge base",

    "workflow": {
      "trigger": {
        "node": "Schedule Trigger",
        "interval": "Every 1 hour",
        "description": "Run sync every hour"
      },
      "step1": {
        "node": "Get Notes from Supabase",
        "type": "HTTP Request Node",
        "method": "GET",
        "url": "https://YOUR_PROJECT.supabase.co/rest/v1/notes?folder_id=eq.PUBLIC_FOLDER_ID&select=*",
        "headers": {
          "apikey": "YOUR_SUPABASE_KEY",
          "Authorization": "Bearer YOUR_SUPABASE_KEY"
        }
      },
      "step2": {
        "node": "Loop Over Notes",
        "type": "Split In Batches Node",
        "batchSize": 1
      },
      "step3": {
        "node": "Check if Note Exists in Notion",
        "type": "Notion Node",
        "operation": "Database → Query",
        "databaseId": "NOTION_DATABASE_ID",
        "filter": {
          "property": "note_id",
          "text": {
            "equals": "{{ $json.id }}"
          }
        }
      },
      "step4": {
        "node": "IF Node",
        "type": "IF Node",
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.results.length }}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "step5_true": {
        "node": "Create Page in Notion",
        "type": "Notion Node",
        "operation": "Page → Create",
        "databaseId": "NOTION_DATABASE_ID",
        "properties": {
          "Title": "{{ $json.title }}",
          "note_id": "{{ $json.id }}",
          "Content": "{{ $json.content }}"
        }
      },
      "step5_false": {
        "node": "Update Page in Notion",
        "type": "Notion Node",
        "operation": "Page → Update",
        "pageId": "={{ $json.results[0].id }}",
        "properties": {
          "Title": "{{ $json.title }}",
          "Content": "{{ $json.content }}"
        }
      }
    },

    "workflowDiagram": "[Schedule: Every 1h] → [GET Supabase Notes] → [Loop] → [Check Notion] → [IF exists] → [Update / Create]"
  },

  "example4_aiSummary": {
    "name": "Daily Note Summary via AI",
    "description": "At end of day, get AI summary of all notes created today and email it",
    "useCase": "Daily recap of productivity",

    "workflow": {
      "trigger": {
        "node": "Schedule Trigger",
        "schedule": "0 18 * * *",
        "description": "Every day at 6 PM"
      },
      "step1": {
        "node": "Get Today's Notes",
        "type": "HTTP Request Node",
        "method": "GET",
        "url": "https://YOUR_PROJECT.supabase.co/rest/v1/notes?user_id=eq.YOUR_USER_ID&created_at=gte.{{ $now.minus(1, 'day').toISO() }}&select=title,content",
        "headers": {
          "apikey": "YOUR_SUPABASE_KEY"
        }
      },
      "step2": {
        "node": "Format Notes for AI",
        "type": "Set Node",
        "mapping": {
          "notes_text": "={{ $json.map(n => `${n.title}\\n${n.content}`).join('\\n\\n---\\n\\n') }}"
        }
      },
      "step3": {
        "node": "OpenAI GPT-4",
        "type": "OpenAI Node",
        "operation": "Message",
        "model": "gpt-4",
        "messages": [
          {
            "role": "user",
            "content": "Summarize the following notes created today in a brief daily recap (3-5 bullet points):\\n\\n{{ $json.notes_text }}"
          }
        ]
      },
      "step4": {
        "node": "Send Email Summary",
        "type": "Send Email Node",
        "to": "your@email.com",
        "subject": "Your Daily Note Summary - {{ $now.toFormat('MMM dd, yyyy') }}",
        "html": "<h2>Today's Summary</h2>\\n{{ $json.choices[0].message.content }}\\n\\n<p>Total notes created: {{ $json.total_notes }}</p>"
      }
    },

    "workflowDiagram": "[Schedule: 6 PM daily] → [GET Today's Notes] → [Format for AI] → [OpenAI GPT-4] → [Email Summary]"
  },

  "example5_webhookBackup": {
    "name": "Real-time Backup to Google Drive",
    "description": "When note is created/updated, backup to Google Drive as markdown file",
    "useCase": "Automatic backups for data safety",

    "workflow": {
      "trigger": {
        "node": "Webhook Trigger",
        "path": "/noted-backup",
        "method": "POST",
        "description": "Supabase sends webhook when note changes"
      },
      "step1": {
        "node": "Parse Webhook Data",
        "type": "Set Node",
        "mapping": {
          "noteId": "{{ $json.record.id }}",
          "title": "{{ $json.record.title }}",
          "content": "{{ $json.record.content }}",
          "operation": "{{ $json.type }}"
        }
      },
      "step2": {
        "node": "Format as Markdown",
        "type": "Set Node",
        "mapping": {
          "markdown": "# {{ $json.title }}\\n\\n{{ $json.content }}\\n\\n---\\nLast updated: {{ $now }}",
          "filename": "{{ $json.noteId }}.md"
        }
      },
      "step3": {
        "node": "Upload to Google Drive",
        "type": "Google Drive Node",
        "operation": "Upload",
        "folderId": "BACKUP_FOLDER_ID",
        "fileName": "{{ $json.filename }}",
        "fileContent": "={{ $json.markdown }}"
      }
    },

    "workflowDiagram": "[Webhook from Supabase] → [Parse Data] → [Convert to Markdown] → [Upload to Google Drive]",

    "supabaseWebhookSetup": {
      "method": "Database Webhooks (Supabase extension)",
      "steps": [
        "1. In Supabase Dashboard → Database → Webhooks",
        "2. Create new webhook for 'notes' table",
        "3. Events: INSERT, UPDATE",
        "4. Webhook URL: https://YOUR_N8N_INSTANCE/webhook/noted-backup",
        "5. Include columns: id, title, content, updated_at"
      ]
    }
  },

  "example6_reminderNotifications": {
    "name": "Smart Note Reminders",
    "description": "Check for notes with 'TODO' or 'REMINDER' in title and send daily digest",
    "useCase": "Never forget action items in notes",

    "workflow": {
      "trigger": {
        "node": "Schedule Trigger",
        "schedule": "0 9 * * *",
        "description": "Every morning at 9 AM"
      },
      "step1": {
        "node": "Get Notes with Reminders",
        "type": "HTTP Request Node",
        "method": "GET",
        "url": "https://YOUR_PROJECT.supabase.co/rest/v1/notes?user_id=eq.YOUR_USER_ID&or=(title.ilike.%TODO%,title.ilike.%REMINDER%)&select=title,content,created_at",
        "headers": {
          "apikey": "YOUR_SUPABASE_KEY"
        }
      },
      "step2": {
        "node": "IF Has Reminders",
        "type": "IF Node",
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.length }}",
              "operation": "greaterThan",
              "value2": 0
            }
          ]
        }
      },
      "step3": {
        "node": "Format Reminder List",
        "type": "Set Node",
        "mapping": {
          "reminderHtml": "={{ $json.map(n => `<li><strong>${n.title}</strong> (created ${new Date(n.created_at).toLocaleDateString()})</li>`).join('') }}"
        }
      },
      "step4": {
        "node": "Send Push Notification",
        "type": "HTTP Request Node",
        "method": "POST",
        "url": "https://api.pushover.net/1/messages.json",
        "body": {
          "token": "PUSHOVER_APP_TOKEN",
          "user": "PUSHOVER_USER_KEY",
          "title": "📝 You have {{ $json.length }} reminders",
          "message": "Open Noted to review your TODO items",
          "html": 1
        }
      }
    },

    "workflowDiagram": "[Schedule: 9 AM] → [GET Notes with TODO/REMINDER] → [IF > 0] → [Format List] → [Send Push Notification]"
  },

  "technicalDetails": {
    "supabaseApiAccess": {
      "endpoint": "https://YOUR_PROJECT_ID.supabase.co/rest/v1/TABLE_NAME",
      "authentication": {
        "method": "Bearer token in Authorization header",
        "keys": {
          "anonKey": "For client-side access (RLS enforced)",
          "serviceRoleKey": "For server-side access (bypasses RLS - use carefully)"
        }
      },
      "commonOperations": {
        "listNotes": "GET /rest/v1/notes?user_id=eq.USER_ID",
        "createNote": "POST /rest/v1/notes with JSON body",
        "updateNote": "PATCH /rest/v1/notes?id=eq.NOTE_ID",
        "deleteNote": "DELETE /rest/v1/notes?id=eq.NOTE_ID",
        "search": "GET /rest/v1/notes?title=ilike.*search*",
        "filter": "GET /rest/v1/notes?folder_id=eq.FOLDER_ID&created_at=gte.2025-01-01"
      },
      "headers": {
        "apikey": "YOUR_SUPABASE_ANON_KEY",
        "Authorization": "Bearer YOUR_SUPABASE_ANON_KEY",
        "Content-Type": "application/json",
        "Prefer": "return=representation (returns created/updated row)"
      }
    },
    "n8nNodes": {
      "httpRequest": "For calling Supabase API directly",
      "supabase": "n8n has official Supabase node (community)",
      "webhook": "For receiving events from Supabase",
      "schedule": "For periodic tasks (backups, summaries)",
      "if": "For conditional logic",
      "splitInBatches": "For looping over notes",
      "set": "For data transformation"
    }
  },

  "setupSteps": {
    "step1": {
      "title": "Get Supabase API Credentials",
      "tasks": [
        "Go to Supabase Dashboard → Settings → API",
        "Copy Project URL (e.g., https://abcdefg.supabase.co)",
        "Copy anon/public key (for client-side access)",
        "Copy service_role key (for server-side, use carefully)"
      ]
    },
    "step2": {
      "title": "Install n8n",
      "options": [
        {
          "method": "Cloud",
          "url": "https://cloud.n8n.io",
          "pros": "No setup, free tier available"
        },
        {
          "method": "Self-hosted (Docker)",
          "command": "docker run -it --rm --name n8n -p 5678:5678 -v ~/.n8n:/home/node/.n8n n8nio/n8n",
          "pros": "Full control, unlimited workflows"
        },
        {
          "method": "npm",
          "command": "npm install n8n -g && n8n",
          "pros": "Easy local development"
        }
      ]
    },
    "step3": {
      "title": "Create First Workflow",
      "tasks": [
        "Open n8n UI (http://localhost:5678)",
        "Click 'New Workflow'",
        "Add nodes from left sidebar",
        "Connect nodes by dragging",
        "Configure each node (API keys, URLs, etc.)",
        "Click 'Execute Workflow' to test",
        "Activate workflow when ready"
      ]
    },
    "step4": {
      "title": "Set up Supabase Webhooks (Optional)",
      "tasks": [
        "Supabase Dashboard → Database → Webhooks",
        "Create webhook for 'notes' table",
        "Events: INSERT, UPDATE, DELETE",
        "Webhook URL: Your n8n webhook URL",
        "Add secret for security (optional)",
        "Test with dummy data"
      ]
    }
  },

  "moreAutomationIdeas": [
    "Voice memo → Transcribe with Whisper → Save as note",
    "Calendar event → Create note with meeting agenda",
    "GitHub issue created → Save as note in Dev folder",
    "Twitter bookmark → Save tweet as note",
    "Pocket article saved → Create note with article summary",
    "Daily weather → Save as note with date",
    "Stripe payment received → Create invoice note",
    "Typeform submission → Create note with responses",
    "RSS feed item → Create note with article content",
    "Telegram message to bot → Create note"
  ],

  "estimatedSetupTime": {
    "basicWorkflow": "30 minutes - 1 hour",
    "complexWorkflow": "2-4 hours",
    "webhookSetup": "1-2 hours",
    "totalLearningCurve": "4-8 hours for n8n basics"
  },

  "notes": [
    "n8n is free and open-source (unlike Zapier)",
    "Can self-host for unlimited workflows",
    "Supabase PostgREST API makes integration easy",
    "No changes needed to Noted app for basic automation",
    "Webhooks require Supabase Database Webhooks feature",
    "Most powerful when combined with AI (OpenAI, Claude)",
    "Can replace need for native app integrations",
    "Great for personal productivity hacks"
  ]
}
