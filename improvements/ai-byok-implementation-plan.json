{
  "title": "AI Integration - BYOK (Bring Your Own Key) Implementation Plan",
  "date": "2025-10-06",
  "version": "1.0.0",
  "status": "ready-to-implement",
  "model": "byok",
  "cost_model": "user-pays-own-api-costs",

  "module_purpose": {
    "description": "This is a REUSABLE BYOK module being built in the Noted app",
    "current_usage": "Single user (developer) testing with own API keys",
    "intended_use": "Copy this module to OTHER projects where users add their own keys",
    "portability": "All AI components isolated in components/ai/, services/ai/, and supabase/functions/ai-*",
    "benefits": [
      "Build once, reuse in multiple projects",
      "Zero AI costs for you (users pay directly to Anthropic/Perplexity)",
      "Battle-tested in this app before deploying to production apps",
      "Professional BYOK pattern with encryption and security"
    ],
    "how_to_reuse": {
      "step_1": "Copy components/ai/ directory to new project",
      "step_2": "Copy services/ai/ directory to new project",
      "step_3": "Copy supabase/functions/ai-* Edge Functions to new project",
      "step_4": "Run user_ai_keys migration in new project's database",
      "step_5": "Add AI Settings card to new project's Settings page",
      "step_6": "Users can now add their own API keys and use AI features"
    }
  },

  "executive_summary": {
    "overview": "Implement AI features where users provide their own API keys. Each user stores encrypted keys, pays for their own usage, and enjoys seamless AI features.",
    "approach": "Bring Your Own Key (BYOK)",
    "user_cost": "$0.01-$2.00/month per user (they pay directly to Anthropic/Perplexity)",
    "your_cost": "$0 for AI (only Supabase Edge Function invocations, within free tier)",
    "modularity": "Fully modular - can be enabled/disabled globally or per-user",
    "security": "Keys encrypted client-side, decrypted server-side in Edge Functions only"
  },

  "architecture_decisions": {
    "key_storage": {
      "method": "Plain text in Supabase database (user_ai_keys table)",
      "encryption": "OPTION A: RLS ONLY - No encryption for Phase 1",
      "rationale": "Simple implementation for single-user testing. Add encryption when porting to multi-user production apps.",
      "upgrade_path": "Option B (Supabase Vault) or Option C (Server-side encryption with master key)",
      "access_control": "RLS policies - users can only access their own keys"
    },
    "api_calls": {
      "method": "Supabase Edge Functions (server-side)",
      "flow": "React Native → Edge Function → Fetch user keys → Call API → Return result",
      "security": "API keys never exposed to client after initial save"
    },
    "user_experience": {
      "onboarding": "Optional - show 'Add API Keys' prompt on first AI feature use",
      "key_management": "AI Settings card in Settings page",
      "graceful_degradation": "Hide AI features if user hasn't added keys"
    }
  },

  "phase_1_infrastructure": {
    "name": "Database & Edge Functions Setup",
    "priority": "HIGH",

    "tasks": [
      {
        "id": "1.1",
        "name": "Create Database Migration",
        "file": "supabase/migrations/20251007000000_add_user_ai_keys.sql",
        "description": "Create user_ai_keys table with RLS policies",
        "sql": "-- AI API Keys table for BYOK (Bring Your Own Key) module\n-- Stores user's API keys for Anthropic (Claude) and Perplexity\n-- Phase 1: Plain text with RLS only (no encryption)\n-- Upgrade path: Add encryption when porting to production multi-user apps\n\nCREATE TABLE user_ai_keys (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  anthropic_key TEXT,\n  perplexity_key TEXT,\n  keys_verified BOOLEAN DEFAULT false,\n  last_verified_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  UNIQUE(user_id)\n);\n\n-- Create index for user lookups\nCREATE INDEX idx_user_ai_keys_user_id ON user_ai_keys(user_id);\n\n-- Enable RLS to isolate user data\nALTER TABLE user_ai_keys ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies\nCREATE POLICY \"Users can view own keys\"\n  ON user_ai_keys FOR SELECT\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can insert own keys\"\n  ON user_ai_keys FOR INSERT\n  WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update own keys\"\n  ON user_ai_keys FOR UPDATE\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete own keys\"\n  ON user_ai_keys FOR DELETE\n  USING (auth.uid() = user_id);\n\n-- Add comments for documentation\nCOMMENT ON TABLE user_ai_keys IS 'BYOK module: Stores user API keys for AI features (Claude, Perplexity)';\nCOMMENT ON COLUMN user_ai_keys.anthropic_key IS 'Anthropic (Claude) API key starting with sk-ant-api03-';\nCOMMENT ON COLUMN user_ai_keys.perplexity_key IS 'Perplexity AI API key starting with pplx-';",
        "rollback": "-- Rollback script (run manually if migration fails)\nDROP TABLE IF EXISTS user_ai_keys CASCADE;",
        "test_after_migration": [
          "INSERT INTO user_ai_keys (user_id, anthropic_key) VALUES (auth.uid(), 'test-key');",
          "SELECT * FROM user_ai_keys WHERE user_id = auth.uid();",
          "DELETE FROM user_ai_keys WHERE user_id = auth.uid();"
        ]
      },
      {
        "id": "1.2",
        "name": "Set Up Edge Functions Structure",
        "description": "Initialize Supabase Edge Functions project structure",
        "commands": [
          "supabase functions new ai-generate-title",
          "supabase functions new ai-summarize",
          "supabase functions new ai-verify-keys"
        ],
        "structure": {
          "supabase/functions/ai-generate-title/index.ts": "Generate note titles with Claude Haiku",
          "supabase/functions/ai-summarize/index.ts": "Generate note summaries with Claude Haiku",
          "supabase/functions/ai-verify-keys/index.ts": "Test user's API keys validity",
          "supabase/functions/_shared/decrypt.ts": "Shared key decryption utility",
          "supabase/functions/_shared/get-user.ts": "Shared auth helper"
        }
      },
      {
        "id": "1.3",
        "name": "Create ai-generate-title Edge Function",
        "file": "supabase/functions/ai-generate-title/index.ts",
        "description": "Server-side function that fetches user's key and calls Anthropic API",
        "dependencies": ["npm:@anthropic-ai/sdk@0.32.1"],
        "environment_secrets": {
          "SUPABASE_SERVICE_ROLE_KEY": "Required to bypass RLS and query user_ai_keys table",
          "how_to_add": "Supabase Dashboard → Edge Functions → Add Secret"
        },
        "logic": [
          "Extract user from JWT in Authorization header",
          "Create Supabase admin client with service role key (to bypass RLS)",
          "Fetch user's anthropic_key from user_ai_keys table",
          "Validate key exists",
          "Call Anthropic API with user's key",
          "Return generated title"
        ],
        "error_handling": [
          "Missing API key → 400 error with code 'NO_API_KEY_CONFIGURED'",
          "Invalid API key → 401 error with code 'INVALID_API_KEY'",
          "API rate limit → 429 error with retry-after header",
          "Network timeout → 504 error with code 'API_REQUEST_TIMEOUT'",
          "Service unavailable → 503 error with code 'SERVICE_UNAVAILABLE'"
        ],
        "concurrent_request_protection": {
          "issue": "User clicking Generate Title button rapidly could trigger multiple API calls",
          "solution": "Client-side debouncing + loading state disables button during request",
          "implementation": "Button disabled when isGenerating=true, re-enabled on success/error"
        }
      },
      {
        "id": "1.4",
        "name": "Create Key Validation Utilities",
        "file": "services/ai/key-validation.ts",
        "description": "Client-side validation before storing keys",
        "methods": {
          "validateAnthropicKey": "Validate format: /^sk-ant-api03-[A-Za-z0-9_-]{95}$/",
          "validatePerplexityKey": "Validate format: /^pplx-[A-Za-z0-9]{32,}$/",
          "maskKey": "Display masked version (sk-ant-***...***)"
        },
        "validation_approach": "OPTIONAL - Validate format, offer 'Test Connection' button, but allow save without testing",
        "rationale": "APIs might be down temporarily, don't block users from saving keys"
      },
      {
        "id": "1.5",
        "name": "Deploy Edge Functions",
        "description": "Deploy all Edge Functions to Supabase",
        "prerequisites": [
          "Supabase CLI installed (npm install -g supabase)",
          "Logged into Supabase (supabase login)",
          "Project linked (supabase link --project-ref ikovzegiuzjkubymwvjz)",
          "SUPABASE_SERVICE_ROLE_KEY added to Edge Function secrets"
        ],
        "commands": [
          "supabase functions deploy ai-generate-title",
          "supabase functions deploy ai-summarize",
          "supabase functions deploy ai-verify-keys"
        ],
        "verify_deployment": [
          "Check Supabase Dashboard → Edge Functions",
          "Test function: supabase functions invoke ai-generate-title --body '{\"content\":\"test\"}'",
          "Check function logs: supabase functions logs ai-generate-title"
        ]
      }
    ],

    "deliverables": [
      "user_ai_keys table created with RLS and DELETE policy",
      "Edge Functions deployed and callable with SUPABASE_SERVICE_ROLE_KEY configured",
      "Key validation utilities tested (format validation only)",
      "Concurrent request protection implemented (button debouncing)"
    ]
  },

  "phase_2_ui_components": {
    "name": "Key Management UI",
    "priority": "HIGH",

    "components": [
      {
        "id": "2.1",
        "name": "AI Settings Card",
        "file": "components/settings-cards/ai-settings-card.tsx",
        "description": "Accordion card in Settings page for AI configuration",
        "ui_pattern": "Follows existing Settings card pattern (ThemeSettingsCard, ProfileSettingsCard, etc.)",
        "features": [
          "Shows API key status (Connected ✓ or Not configured ⚠)",
          "Key status rows per provider (Anthropic, Perplexity)",
          "Manage API Keys button with chevron (›)",
          "Delete Keys button (destructive style)"
        ],
        "ui_layout": {
          "header_collapsed": {
            "icon": "MaterialIcons: keyboard-arrow-right",
            "title": "AI Features",
            "style": "Same pattern as other cards"
          },
          "header_expanded": {
            "icon": "MaterialIcons: keyboard-arrow-down",
            "title": "AI Features"
          },
          "content_when_no_keys": {
            "message": "Configure your AI API keys to enable smart features.",
            "button": "Add API Keys",
            "button_style": "TouchableOpacity with surface background, border, borderRadius: 12"
          },
          "content_when_has_keys": {
            "rows": [
              {
                "label": "Anthropic API",
                "value": "✓ Connected (green) / ⚠ Not configured (yellow)",
                "style": "Same as Profile card debugRow pattern"
              },
              {
                "label": "Perplexity API",
                "value": "✓ Connected / ⚠ Not configured",
                "style": "Same as Profile card debugRow pattern"
              }
            ],
            "buttons": [
              {
                "label": "Manage API Keys",
                "icon": "chevron ›",
                "action": "Opens ApiKeysModal for editing",
                "style": "Same as Theme card themeSelectorButton"
              },
              {
                "label": "Delete All Keys",
                "action": "Opens confirmation modal",
                "style": "Destructive (red text like PrimaryActionRow destructive variant)"
              }
            ]
          }
        },
        "placement": "Settings page, after DevSettingsCard, before AccountSettingsCard",
        "props": {
          "isExpanded": "boolean",
          "onToggle": "() => void",
          "managed_by_parent": "expandedCard state in settings.tsx"
        }
      },
      {
        "id": "2.2",
        "name": "API Keys Modal",
        "file": "components/ai/api-keys-modal.tsx",
        "description": "Modal for adding/editing API keys",
        "fields": [
          {
            "name": "Anthropic API Key",
            "type": "password",
            "placeholder": "sk-ant-api03-...",
            "validation": "^sk-ant-api03-[A-Za-z0-9_-]{95}$",
            "help_link": "https://console.anthropic.com/",
            "required": true
          },
          {
            "name": "Perplexity API Key",
            "type": "password",
            "placeholder": "pplx-...",
            "validation": "^pplx-[A-Za-z0-9]{32,}$",
            "help_link": "https://perplexity.ai/settings/api",
            "required": false
          }
        ],
        "actions": [
          {
            "name": "Cancel",
            "action": "Close modal without saving"
          },
          {
            "name": "Test Connection (optional)",
            "action": "Call ai-verify-keys Edge Function to validate keys",
            "feedback": "Show success/error toast with specific errors",
            "note": "Optional - users can save without testing"
          },
          {
            "name": "Save Keys",
            "action": "Validate format, save to database (plain text), close modal",
            "validation": "Format validation only (regex check)",
            "note": "Saves even if Test Connection not run (APIs might be temporarily down)"
          },
          {
            "name": "Delete Key (individual)",
            "action": "Set specific key to NULL in database (anthropic_key or perplexity_key)",
            "ui": "Small X icon next to each key input field when key exists",
            "confirmation": "No confirmation for individual key deletion"
          }
        ],
        "security_message": "🔒 Your keys are encrypted and stored securely. Only you can access them. We never share your keys with anyone.",
        "help_section": {
          "title": "Where do I get API keys?",
          "anthropic": "1. Go to console.anthropic.com\n2. Create account or sign in\n3. Navigate to API Keys\n4. Create new key\n5. Copy key starting with 'sk-ant-api03-'",
          "perplexity": "1. Go to perplexity.ai/settings/api\n2. Create account or sign in\n3. Generate API key\n4. Copy key starting with 'pplx-'"
        }
      },
      {
        "id": "2.3",
        "name": "AI Key Status Component",
        "file": "components/ai/ai-key-status.tsx",
        "description": "Reusable component to show key status",
        "variants": {
          "connected": "✓ Connected (green checkmark)",
          "not_configured": "⚠ Not configured (yellow warning)",
          "invalid": "✗ Invalid (red X)",
          "testing": "⏳ Testing... (spinner)"
        }
      }
    ],

    "deliverables": [
      "AI Settings card in Settings page",
      "API Keys modal functional",
      "Key validation working",
      "Encryption before save confirmed"
    ]
  },

  "phase_3_ai_features": {
    "name": "Core AI Features Implementation",
    "priority": "HIGH",

    "features": [
      {
        "id": "3.1",
        "name": "Smart Titles (Client Service)",
        "file": "services/ai/claude.ts",
        "description": "Client-side service that calls Edge Function",
        "methods": {
          "generateTitle": {
            "signature": "async function generateTitle(noteContent: string): Promise<string>",
            "implementation": "Call supabase.functions.invoke('ai-generate-title', { body: { content } })",
            "error_handling": [
              "No API key → Show 'Add API Keys' modal",
              "Invalid key → Show error with link to Settings",
              "Rate limit → Show 'Try again later' message",
              "Network error → Show retry button"
            ]
          }
        }
      },
      {
        "id": "3.2",
        "name": "Edge Function: Generate Title",
        "file": "supabase/functions/ai-generate-title/index.ts",
        "description": "Server-side function using user's Anthropic key",
        "flow": [
          "1. Extract user from JWT in Authorization header",
          "2. Query user_ai_keys table for anthropic_key_encrypted",
          "3. Decrypt key using server-side secret",
          "4. Initialize Anthropic client with decrypted key",
          "5. Call Claude Haiku API with note content (first 2000 chars)",
          "6. Return generated title to client"
        ],
        "api_call": {
          "model": "claude-3-5-haiku-20241022",
          "max_tokens": 50,
          "temperature": 0.3,
          "prompt": "Generate a concise, descriptive title (max 50 chars) for this note:\\n\\n{content}"
        },
        "cost_per_request": "$0.0001"
      },
      {
        "id": "3.3",
        "name": "UI Integration: Generate Title Button",
        "files": [
          "app/note-editor/[id].tsx",
          "app/note-editor/new.tsx"
        ],
        "description": "Add Generate Title button to note editor header",
        "button_placement": "Header, next to Preview/Edit toggle",
        "icon": "MaterialIcons: auto-awesome (sparkle icon)",
        "states": {
          "default": "Show sparkle icon",
          "loading": "Show spinner, disable button",
          "success": "Update title field, show success toast",
          "error": "Show error toast with actionable message"
        },
        "conditional_rendering": "Only show if user has Anthropic key configured",
        "user_flow": [
          "1. User taps ✨ icon",
          "2. Show loading spinner",
          "3. Call generateTitle(content)",
          "4. Update title field with result",
          "5. Allow user to edit before saving",
          "6. Show 'Title generated!' toast"
        ]
      },
      {
        "id": "3.4",
        "name": "Onboarding Prompt",
        "file": "components/ai/ai-onboarding-prompt.tsx",
        "description": "Show prompt when user tries AI feature without keys",
        "trigger": "User taps Generate Title without API keys configured",
        "ui": {
          "title": "✨ AI Features Available",
          "message": "Generate titles, summaries, and enhance notes with AI.\\n\\nTo use AI features, add your API keys in Settings.",
          "actions": [
            {
              "label": "Maybe Later",
              "action": "Dismiss modal"
            },
            {
              "label": "Add Keys →",
              "action": "Open API Keys modal"
            }
          ]
        }
      }
    ],

    "deliverables": [
      "generateTitle service working end-to-end",
      "Generate Title button in note editors",
      "Loading and error states polished",
      "Onboarding prompt for users without keys",
      "Success/error toasts implemented"
    ]
  },

  "phase_4_polish": {
    "name": "UX Polish & Testing",
    "priority": "MEDIUM",

    "tasks": [
      {
        "id": "4.1",
        "name": "Key Verification Edge Function",
        "file": "supabase/functions/ai-verify-keys/index.ts",
        "description": "Test user's API keys with minimal cost",
        "tests": {
          "anthropic": "1-token request (cost: $0.0001)",
          "perplexity": "Simple query (cost: $0.001)"
        },
        "return": {
          "anthropic_valid": "boolean",
          "perplexity_valid": "boolean",
          "error_messages": "string[] if invalid"
        }
      },
      {
        "id": "4.2",
        "name": "Graceful Degradation",
        "description": "Handle missing keys elegantly",
        "behaviors": [
          "Hide AI buttons if ENABLE_AI_FEATURES=false",
          "Hide AI buttons for users without keys",
          "Show 'Add API Keys' prompt on first AI tap",
          "Clear error messages for all failure cases",
          "Fallback to manual entry if AI fails"
        ]
      },
      {
        "id": "4.3",
        "name": "Error Messages",
        "description": "User-friendly error handling",
        "errors": {
          "no_keys_configured": "To use AI features, add your API keys in Settings → AI Features",
          "invalid_anthropic_key": "Your Anthropic API key is invalid. Please check Settings → AI Features",
          "rate_limit_exceeded": "You've reached your API rate limit. Try again in a few minutes.",
          "network_error": "Unable to connect to AI service. Check your internet connection.",
          "api_error": "AI service encountered an error. Please try again."
        }
      }
    ],

    "deliverables": [
      "Key verification working",
      "All error states handled gracefully",
      "Clear, actionable error messages",
      "Seamless UX for users with and without keys"
    ]
  },

  "testing_plan": {
    "unit_tests": [
      "Key encryption/decryption functions",
      "Key format validation",
      "API key masking display"
    ],
    "integration_tests": [
      "Add keys → Encrypt → Save → Verify stored encrypted",
      "Generate title → Edge Function → Decrypt → API call → Return",
      "Invalid key → Proper error handling",
      "Missing key → Show onboarding prompt"
    ],
    "edge_cases": [
      "User has no keys → graceful prompts",
      "API rate limit exceeded → user-friendly error",
      "Network failure → retry logic",
      "Invalid key format → validation before save",
      "Key decryption fails → clear error message"
    ],
    "manual_testing": [
      "Add valid Anthropic key → verify in database (encrypted)",
      "Generate title → confirm Edge Function called",
      "Add invalid key → verify error handling",
      "Delete keys → confirm AI features hidden",
      "Test on iOS, Android, Web"
    ]
  },

  "security_considerations": {
    "encryption_phase_1": {
      "approach": "Option A: RLS Only (no encryption)",
      "rationale": "Simple implementation for single-user testing in development",
      "security": "RLS policies prevent cross-user access, but keys visible in database dumps",
      "acceptable_because": "You are the only user, testing in dev environment",
      "upgrade_before_production": "Add encryption when copying module to multi-user apps"
    },
    "encryption_upgrade_options": {
      "option_b_supabase_vault": {
        "method": "Use Supabase Vault for secure key storage",
        "pros": ["Professional-grade encryption", "Managed by Supabase", "Built-in key rotation"],
        "cons": ["Requires Supabase Pro plan ($25/month)", "More complex setup"],
        "when_to_use": "Production multi-user apps with budget for Pro plan"
      },
      "option_c_server_encryption": {
        "method": "Encrypt with master key stored in Edge Function secrets",
        "pros": ["Works on free tier", "Full control over encryption", "No vendor lock-in"],
        "cons": ["Must implement encryption logic", "Must manage master key securely"],
        "when_to_use": "Production multi-user apps on free tier or when you want full control"
      }
    },
    "access_control": [
      "RLS policies prevent users accessing others' keys",
      "Edge Functions verify user auth before fetching keys",
      "No key sharing between users",
      "User can delete keys anytime"
    ],
    "privacy": [
      "No API request logging with note content",
      "No analytics on AI usage (optional: add if desired)",
      "Transparent about where keys are stored",
      "Clear documentation on data flow"
    ],
    "best_practices": [
      "Never log decrypted keys",
      "Use HTTPS for all Edge Function calls",
      "Validate key format before saving",
      "Rate limit Edge Function calls per user",
      "Monitor for suspicious patterns"
    ]
  },

  "cost_analysis": {
    "user_costs": {
      "light_user": {
        "notes_per_month": 10,
        "ai_requests": "10 titles + 2 research",
        "estimated_cost": "$0.01/month"
      },
      "medium_user": {
        "notes_per_month": 100,
        "ai_requests": "100 titles + 20 enhancements + 10 research",
        "estimated_cost": "$0.20/month"
      },
      "heavy_user": {
        "notes_per_month": 500,
        "ai_requests": "500 titles + 100 enhancements + 50 research + chat",
        "estimated_cost": "$1-2/month"
      }
    },
    "your_costs": {
      "ai_apis": "$0 (users pay directly)",
      "edge_functions": "$0 (within Supabase free tier: 500K invocations/month)",
      "database_storage": "$0 (minimal - just encrypted keys)",
      "total": "$0/month"
    },
    "scalability": {
      "1_user": "$0/month (you)",
      "100_users": "$0/month (you)",
      "10000_users": "$0/month (you)",
      "note": "All AI costs borne by users, scales infinitely at zero cost to you"
    }
  },

  "modularity": {
    "global_feature_flag": {
      "variable": "ENABLE_AI_FEATURES",
      "behavior": "If false, hide all AI UI components globally"
    },
    "per_user_opt_in": {
      "behavior": "Users without keys never see AI features",
      "graceful": "AI buttons only shown when keys configured"
    },
    "incremental_rollout": {
      "phase_1": "Smart Titles only",
      "phase_2": "Add Summaries",
      "phase_3": "Add Enhancement, Research, Chat",
      "independence": "Each feature can be enabled/disabled independently"
    },
    "easy_removal": {
      "steps": [
        "Set ENABLE_AI_FEATURES=false",
        "Drop user_ai_keys table",
        "Delete components/ai/ directory",
        "Delete supabase/functions/ai-* functions",
        "Remove AI Settings card from Settings page"
      ],
      "impact": "Zero impact on core note-taking functionality"
    }
  },

  "error_handling": {
    "error_constants": {
      "file": "services/ai/errors.ts",
      "description": "Centralized error codes for programmatic handling",
      "constants": {
        "NO_KEY": {
          "code": "NO_API_KEY_CONFIGURED",
          "message": "To use AI features, add your API keys in Settings → AI Features",
          "user_action": "Show modal with link to Settings",
          "http_status": 400
        },
        "INVALID_KEY": {
          "code": "INVALID_API_KEY",
          "message": "Your API key is invalid. Please check Settings → AI Features",
          "user_action": "Show error toast with link to Settings",
          "http_status": 401
        },
        "RATE_LIMIT": {
          "code": "API_RATE_LIMIT_EXCEEDED",
          "message": "You've reached your API rate limit. Try again in a few minutes.",
          "user_action": "Show error toast with retry button (if retry-after header present)",
          "http_status": 429
        },
        "TIMEOUT": {
          "code": "API_REQUEST_TIMEOUT",
          "message": "AI service is taking too long to respond. Please try again.",
          "user_action": "Show error toast with retry button",
          "http_status": 504
        },
        "SERVICE_DOWN": {
          "code": "SERVICE_UNAVAILABLE",
          "message": "AI service is currently unavailable. Please try again later.",
          "user_action": "Show error toast with retry button",
          "http_status": 503
        },
        "NETWORK": {
          "code": "NETWORK_ERROR",
          "message": "Unable to connect to AI service. Check your internet connection.",
          "user_action": "Show error toast with retry button",
          "http_status": null
        }
      }
    },
    "retry_logic": {
      "rate_limit_429": "Parse retry-after header, show countdown timer",
      "timeout_504": "Allow immediate retry (may have been temporary network issue)",
      "service_down_503": "Allow immediate retry",
      "network_error": "Allow immediate retry"
    },
    "timeout_values": {
      "generate_title": "30 seconds (Haiku is fast, should respond in 1-3s)",
      "summarize": "45 seconds (longer input, may take 5-10s)",
      "verify_keys": "10 seconds (minimal request for testing)"
    }
  },

  "pre_implementation_checklist": {
    "description": "Complete these tasks BEFORE starting Phase 1 implementation",
    "critical_high_priority": [
      {
        "task": "Choose encryption strategy",
        "decision": "OPTION A: RLS only (no encryption)",
        "status": "✅ DECIDED"
      },
      {
        "task": "Add SUPABASE_SERVICE_ROLE_KEY to Edge Function environment",
        "location": "Supabase Dashboard → Project Settings → API → service_role key (secret)",
        "how": "Supabase Dashboard → Edge Functions → Settings → Secrets → Add SUPABASE_SERVICE_ROLE_KEY",
        "status": "⏳ TODO"
      },
      {
        "task": "Verify Anthropic SDK works in Deno",
        "command": "supabase functions new test-anthropic && add import statement",
        "test": "import Anthropic from 'npm:@anthropic-ai/sdk@0.32.1'",
        "status": "⏳ TODO"
      },
      {
        "task": "Test supabase functions serve",
        "command": "supabase functions serve",
        "expected": "Started local functions server on port 54321",
        "status": "⏳ TODO"
      }
    ],
    "medium_priority": [
      {
        "task": "Define error message constants",
        "file": "services/ai/errors.ts",
        "constants": ["NO_KEY", "INVALID_KEY", "RATE_LIMIT", "TIMEOUT", "SERVICE_DOWN", "NETWORK"],
        "status": "✅ SPECIFIED (see error_handling section)"
      },
      {
        "task": "Choose key validation approach",
        "decision": "OPTIONAL - Format validation + Test Connection button, but allow save without testing",
        "status": "✅ DECIDED"
      }
    ],
    "low_priority": [
      {
        "task": "Verify Supabase CLI installed",
        "command": "supabase --version",
        "expected": "supabase version 1.x.x",
        "install_if_missing": "npm install -g supabase",
        "status": "⏳ TODO"
      },
      {
        "task": "Verify logged into Supabase",
        "command": "supabase login",
        "expected": "Already logged in",
        "status": "⏳ TODO"
      },
      {
        "task": "Verify project linked",
        "command": "supabase link --project-ref ikovzegiuzjkubymwvjz",
        "expected": "Already linked to project",
        "status": "⏳ TODO"
      }
    ]
  },

  "file_structure": {
    "new_files": [
      "supabase/migrations/20251007000000_add_user_ai_keys.sql",
      "supabase/functions/ai-generate-title/index.ts",
      "supabase/functions/ai-summarize/index.ts",
      "supabase/functions/ai-verify-keys/index.ts",
      "supabase/functions/_shared/get-user.ts",
      "services/ai/claude.ts",
      "services/ai/key-validation.ts",
      "services/ai/errors.ts",
      "services/ai/types.ts",
      "services/ai/index.ts",
      "components/ai/api-keys-modal.tsx",
      "components/ai/ai-key-status.tsx",
      "components/ai/ai-onboarding-prompt.tsx",
      "components/settings-cards/ai-settings-card.tsx"
    ],
    "modified_files": [
      "app/(tabs)/settings.tsx - Add AI Settings card",
      "app/note-editor/[id].tsx - Add Generate Title button",
      "app/note-editor/new.tsx - Add Generate Title button"
    ]
  },

  "implementation_checklist": [
    {
      "phase": "Phase 1: Infrastructure",
      "tasks": [
        "Create database migration for user_ai_keys table",
        "Apply migration to Supabase",
        "Set up Supabase Edge Functions project structure",
        "Create ai-generate-title Edge Function",
        "Create key decryption utilities (server-side)",
        "Create key encryption utilities (client-side)",
        "Test Edge Function locally with supabase functions serve",
        "Deploy Edge Functions to Supabase"
      ]
    },
    {
      "phase": "Phase 2: UI",
      "tasks": [
        "Create AISettingsCard component",
        "Create ApiKeysModal component",
        "Create AIKeyStatus component",
        "Add AI Settings card to Settings page (after Testing)",
        "Test modal open/close, validation, encryption",
        "Design help documentation links"
      ]
    },
    {
      "phase": "Phase 3: Features",
      "tasks": [
        "Create services/ai/claude.ts (client service)",
        "Implement generateTitle function",
        "Add Generate Title button to note editors",
        "Handle loading, success, error states",
        "Create onboarding prompt for users without keys",
        "Test end-to-end: Add keys → Generate title → Success"
      ]
    },
    {
      "phase": "Phase 4: Polish",
      "tasks": [
        "Create ai-verify-keys Edge Function",
        "Implement Test Connection button",
        "Add all error messages",
        "Test graceful degradation (no keys, invalid keys, etc.)",
        "Test on iOS, Android, Web",
        "Write user documentation (how to get API keys)"
      ]
    }
  ],

  "next_steps": {
    "immediate": [
      "Review this plan and confirm BYOK approach",
      "Create database migration for user_ai_keys",
      "Set up Supabase CLI for Edge Functions development",
      "Install @anthropic-ai/sdk in Edge Functions"
    ],
    "short_term": [
      "Implement Phase 1 (Infrastructure)",
      "Test Edge Function locally",
      "Deploy to Supabase and test with your own keys"
    ],
    "long_term": [
      "Complete all 4 phases",
      "Test with multiple users",
      "Monitor API costs and Edge Function performance",
      "Add more AI features (summaries, research, enhancement)"
    ]
  },

  "user_documentation": {
    "getting_api_keys": {
      "anthropic": {
        "steps": [
          "Go to https://console.anthropic.com/",
          "Create account or sign in",
          "Navigate to API Keys section",
          "Click 'Create Key'",
          "Copy key (starts with 'sk-ant-api03-')",
          "Paste into Noted app Settings → AI Features"
        ],
        "pricing": "Pay-as-you-go, $0.0001 per title generation"
      },
      "perplexity": {
        "steps": [
          "Go to https://perplexity.ai/settings/api",
          "Create account or sign in",
          "Click 'Generate API Key'",
          "Copy key (starts with 'pplx-')",
          "Paste into Noted app Settings → AI Features"
        ],
        "pricing": "Pay-as-you-go, $0.003 per research request"
      }
    },
    "faq": {
      "q1": "Are my API keys safe?",
      "a1": "Yes. Your keys are encrypted before storage and only decrypted server-side when making API calls. They're never exposed to other users.",
      "q2": "How much will AI features cost me?",
      "a2": "Typical usage costs $0.01-$0.20/month. You pay Anthropic/Perplexity directly based on your usage.",
      "q3": "Can I remove my API keys?",
      "a3": "Yes, anytime. Go to Settings → AI Features → Manage Keys → Delete.",
      "q4": "What happens if I don't add API keys?",
      "a4": "AI features will be hidden. You can still use all other features of Noted normally.",
      "q5": "Do you see my API keys?",
      "a5": "No. Keys are encrypted before storage and only you can use them."
    }
  },

  "future_enhancements": {
    "phase_5_optional": [
      "Add AI Summarization (Phase 1.2 from original plan)",
      "Add Web Research with Perplexity (Phase 2.1)",
      "Add Smart Categorization (Phase 2.2)",
      "Add Content Enhancement (Phase 3.1)",
      "Add Ask Your Notes chat (Phase 3.2)"
    ],
    "advanced_features": [
      "Usage analytics dashboard (show user their API costs)",
      "Budget alerts (warn user if approaching limit)",
      "Alternative: Allow users to choose between BYOK or paid subscription",
      "API key rotation and expiration handling",
      "Multiple API key support (backup keys)"
    ]
  }
}
